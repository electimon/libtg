/* generated by tl_generator */

#include "types.h"
#include "tl_object.h"
#include "macro.h"
#include <stdbool.h>

tlo_t * tl_true();
tlo_t * tl_boolFalse();
tlo_t * tl_boolTrue();
tlo_t * tl_vector();
tlo_t * tl_error(int arg_code, const char * arg_text);
tlo_t * tl_ipPort(int arg_ipv4, int arg_port);
tlo_t * tl_ipPortSecret(int arg_ipv4, int arg_port, unsigned char * arg_secret, int len_arg_secret);
tlo_t * tl_accessPointRule(const char * arg_phone_prefix_rules, int arg_dc_id, IpPort *arg_ips, int len_arg_ips);
tlo_t * tl_help_configSimple(int arg_date, int arg_expires, AccessPointRule *arg_rules, int len_arg_rules);
tlo_t * tl_inputPeerPhotoFileLocationLegacy(bool arg_big, InputPeer arg_peer, long arg_volume_id, int arg_local_id);
tlo_t * tl_inputStickerSetThumbLegacy(InputStickerSet arg_stickerset, long arg_volume_id, int arg_local_id);
tlo_t * tl_invokeWithBusinessConnectionPrefix(const char * arg_connection_id);
tlo_t * tl_invokeWithGooglePlayIntegrityPrefix(const char * arg_nonce, const char * arg_token);
tlo_t * tl_invokeWithApnsSecretPrefix(const char * arg_nonce, const char * arg_secret);
tlo_t * tl_inputPeerEmpty();
tlo_t * tl_inputPeerSelf();
tlo_t * tl_inputPeerChat(long arg_chat_id);
tlo_t * tl_inputPeerUser(long arg_user_id, long arg_access_hash);
tlo_t * tl_inputPeerChannel(long arg_channel_id, long arg_access_hash);
tlo_t * tl_inputPeerUserFromMessage(InputPeer arg_peer, int arg_msg_id, long arg_user_id);
tlo_t * tl_inputPeerChannelFromMessage(InputPeer arg_peer, int arg_msg_id, long arg_channel_id);
tlo_t * tl_inputUserEmpty();
tlo_t * tl_inputUserSelf();
tlo_t * tl_inputUser(long arg_user_id, long arg_access_hash);
tlo_t * tl_inputUserFromMessage(InputPeer arg_peer, int arg_msg_id, long arg_user_id);
tlo_t * tl_inputPhoneContact(long arg_client_id, const char * arg_phone, const char * arg_first_name, const char * arg_last_name);
tlo_t * tl_inputFile(long arg_id, int arg_parts, const char * arg_name, const char * arg_md5_checksum);
tlo_t * tl_inputFileBig(long arg_id, int arg_parts, const char * arg_name);
tlo_t * tl_inputFileStoryDocument(InputDocument arg_id);
tlo_t * tl_inputMediaEmpty();
tlo_t * tl_inputMediaUploadedPhoto(bool arg_spoiler, InputFile arg_file, InputDocument *arg_stickers, int len_arg_stickers, int arg_ttl_seconds);
tlo_t * tl_inputMediaPhoto(bool arg_spoiler, InputPhoto arg_id, int arg_ttl_seconds);
tlo_t * tl_inputMediaGeoPoint(InputGeoPoint arg_geo_point);
tlo_t * tl_inputMediaContact(const char * arg_phone_number, const char * arg_first_name, const char * arg_last_name, const char * arg_vcard);
tlo_t * tl_inputMediaUploadedDocument(bool arg_nosound_video, bool arg_force_file, bool arg_spoiler, InputFile arg_file, InputFile arg_thumb, const char * arg_mime_type, DocumentAttribute *arg_attributes, int len_arg_attributes, InputDocument *arg_stickers, int len_arg_stickers, int arg_ttl_seconds);
tlo_t * tl_inputMediaDocument(bool arg_spoiler, InputDocument arg_id, int arg_ttl_seconds, const char * arg_query);
tlo_t * tl_inputMediaVenue(InputGeoPoint arg_geo_point, const char * arg_title, const char * arg_address, const char * arg_provider, const char * arg_venue_id, const char * arg_venue_type);
tlo_t * tl_inputMediaPhotoExternal(bool arg_spoiler, const char * arg_url, int arg_ttl_seconds);
tlo_t * tl_inputMediaDocumentExternal(bool arg_spoiler, const char * arg_url, int arg_ttl_seconds);
tlo_t * tl_inputMediaGame(InputGame arg_id);
tlo_t * tl_inputMediaInvoice(const char * arg_title, const char * arg_description, InputWebDocument arg_photo, Invoice arg_invoice, unsigned char * arg_payload, int len_arg_payload, const char * arg_provider, DataJSON arg_provider_data, const char * arg_start_param, InputMedia arg_extended_media);
tlo_t * tl_inputMediaGeoLive(bool arg_stopped, InputGeoPoint arg_geo_point, int arg_heading, int arg_period, int arg_proximity_notification_radius);
tlo_t * tl_inputMediaPoll(Poll arg_poll, unsigned char * *arg_correct_answers, int len_arg_correct_answers, const char * arg_solution, MessageEntity *arg_solution_entities, int len_arg_solution_entities);
tlo_t * tl_inputMediaDice(const char * arg_emoticon);
tlo_t * tl_inputMediaStory(InputPeer arg_peer, int arg_id);
tlo_t * tl_inputMediaWebPage(bool arg_force_large_media, bool arg_force_small_media, bool arg_optional, const char * arg_url);
tlo_t * tl_inputMediaPaidMedia(long arg_stars_amount, InputMedia *arg_extended_media, int len_arg_extended_media, const char * arg_payload);
tlo_t * tl_inputChatPhotoEmpty();
tlo_t * tl_inputChatUploadedPhoto(InputFile arg_file, InputFile arg_video, double arg_video_start_ts, VideoSize arg_video_emoji_markup);
tlo_t * tl_inputChatPhoto(InputPhoto arg_id);
tlo_t * tl_inputGeoPointEmpty();
tlo_t * tl_inputGeoPoint(double arg_lat, double arg_long, int arg_accuracy_radius);
tlo_t * tl_inputPhotoEmpty();
tlo_t * tl_inputPhoto(long arg_id, long arg_access_hash, unsigned char * arg_file_reference, int len_arg_file_reference);
tlo_t * tl_inputFileLocation(long arg_volume_id, int arg_local_id, long arg_secret, unsigned char * arg_file_reference, int len_arg_file_reference);
tlo_t * tl_inputEncryptedFileLocation(long arg_id, long arg_access_hash);
tlo_t * tl_inputDocumentFileLocation(long arg_id, long arg_access_hash, unsigned char * arg_file_reference, int len_arg_file_reference, const char * arg_thumb_size);
tlo_t * tl_inputSecureFileLocation(long arg_id, long arg_access_hash);
tlo_t * tl_inputTakeoutFileLocation();
tlo_t * tl_inputPhotoFileLocation(long arg_id, long arg_access_hash, unsigned char * arg_file_reference, int len_arg_file_reference, const char * arg_thumb_size);
tlo_t * tl_inputPhotoLegacyFileLocation(long arg_id, long arg_access_hash, unsigned char * arg_file_reference, int len_arg_file_reference, long arg_volume_id, int arg_local_id, long arg_secret);
tlo_t * tl_inputPeerPhotoFileLocation(bool arg_big, InputPeer arg_peer, long arg_photo_id);
tlo_t * tl_inputStickerSetThumb(InputStickerSet arg_stickerset, int arg_thumb_version);
tlo_t * tl_inputGroupCallStream(InputGroupCall arg_call, long arg_time_ms, int arg_scale, int arg_video_channel, int arg_video_quality);
tlo_t * tl_peerUser(long arg_user_id);
tlo_t * tl_peerChat(long arg_chat_id);
tlo_t * tl_peerChannel(long arg_channel_id);
tlo_t * tl_storage_fileUnknown();
tlo_t * tl_storage_filePartial();
tlo_t * tl_storage_fileJpeg();
tlo_t * tl_storage_fileGif();
tlo_t * tl_storage_filePng();
tlo_t * tl_storage_filePdf();
tlo_t * tl_storage_fileMp3();
tlo_t * tl_storage_fileMov();
tlo_t * tl_storage_fileMp4();
tlo_t * tl_storage_fileWebp();
tlo_t * tl_userEmpty(long arg_id);
tlo_t * tl_user(bool arg_self, bool arg_contact, bool arg_mutual_contact, bool arg_deleted, bool arg_bot, bool arg_bot_chat_history, bool arg_bot_nochats, bool arg_verified, bool arg_restricted, bool arg_min, bool arg_bot_inline_geo, bool arg_support, bool arg_scam, bool arg_apply_min_photo, bool arg_fake, bool arg_bot_attach_menu, bool arg_premium, bool arg_attach_menu_enabled, bool arg_bot_can_edit, bool arg_close_friend, bool arg_stories_hidden, bool arg_stories_unavailable, bool arg_contact_require_premium, bool arg_bot_business, bool arg_bot_has_main_app, long arg_id, long arg_access_hash, const char * arg_first_name, const char * arg_last_name, const char * arg_username, const char * arg_phone, UserProfilePhoto arg_photo, UserStatus arg_status, int arg_bot_info_version, RestrictionReason *arg_restriction_reason, int len_arg_restriction_reason, const char * arg_bot_inline_placeholder, const char * arg_lang_code, EmojiStatus arg_emoji_status, Username *arg_usernames, int len_arg_usernames, int arg_stories_max_id, PeerColor arg_color, PeerColor arg_profile_color, int arg_bot_active_users);
tlo_t * tl_userProfilePhotoEmpty();
tlo_t * tl_userProfilePhoto(bool arg_has_video, bool arg_personal, long arg_photo_id, unsigned char * arg_stripped_thumb, int len_arg_stripped_thumb, int arg_dc_id);
tlo_t * tl_userStatusEmpty();
tlo_t * tl_userStatusOnline(int arg_expires);
tlo_t * tl_userStatusOffline(int arg_was_online);
tlo_t * tl_userStatusRecently(bool arg_by_me);
tlo_t * tl_userStatusLastWeek(bool arg_by_me);
tlo_t * tl_userStatusLastMonth(bool arg_by_me);
tlo_t * tl_chatEmpty(long arg_id);
tlo_t * tl_chat(bool arg_creator, bool arg_left, bool arg_deactivated, bool arg_call_active, bool arg_call_not_empty, bool arg_noforwards, long arg_id, const char * arg_title, ChatPhoto arg_photo, int arg_participants_count, int arg_date, int arg_version, InputChannel arg_migrated_to, ChatAdminRights arg_admin_rights, ChatBannedRights arg_default_banned_rights);
tlo_t * tl_chatForbidden(long arg_id, const char * arg_title);
tlo_t * tl_channel(bool arg_creator, bool arg_left, bool arg_broadcast, bool arg_verified, bool arg_megagroup, bool arg_restricted, bool arg_signatures, bool arg_min, bool arg_scam, bool arg_has_link, bool arg_has_geo, bool arg_slowmode_enabled, bool arg_call_active, bool arg_call_not_empty, bool arg_fake, bool arg_gigagroup, bool arg_noforwards, bool arg_join_to_send, bool arg_join_request, bool arg_forum, bool arg_stories_hidden, bool arg_stories_hidden_min, bool arg_stories_unavailable, bool arg_signature_profiles, long arg_id, long arg_access_hash, const char * arg_title, const char * arg_username, ChatPhoto arg_photo, int arg_date, RestrictionReason *arg_restriction_reason, int len_arg_restriction_reason, ChatAdminRights arg_admin_rights, ChatBannedRights arg_banned_rights, ChatBannedRights arg_default_banned_rights, int arg_participants_count, Username *arg_usernames, int len_arg_usernames, int arg_stories_max_id, PeerColor arg_color, PeerColor arg_profile_color, EmojiStatus arg_emoji_status, int arg_level, int arg_subscription_until_date);
tlo_t * tl_channelForbidden(bool arg_broadcast, bool arg_megagroup, long arg_id, long arg_access_hash, const char * arg_title, int arg_until_date);
tlo_t * tl_chatFull(bool arg_can_set_username, bool arg_has_scheduled, bool arg_translations_disabled, long arg_id, const char * arg_about, ChatParticipants arg_participants, Photo arg_chat_photo, PeerNotifySettings arg_notify_settings, ExportedChatInvite arg_exported_invite, BotInfo *arg_bot_info, int len_arg_bot_info, int arg_pinned_msg_id, int arg_folder_id, InputGroupCall arg_call, int arg_ttl_period, Peer arg_groupcall_default_join_as, const char * arg_theme_emoticon, int arg_requests_pending, long *arg_recent_requesters, int len_arg_recent_requesters, ChatReactions arg_available_reactions, int arg_reactions_limit);
tlo_t * tl_channelFull(bool arg_can_view_participants, bool arg_can_set_username, bool arg_can_set_stickers, bool arg_hidden_prehistory, bool arg_can_set_location, bool arg_has_scheduled, bool arg_can_view_stats, bool arg_blocked, bool arg_can_delete_channel, bool arg_antispam, bool arg_participants_hidden, bool arg_translations_disabled, bool arg_stories_pinned_available, bool arg_view_forum_as_messages, bool arg_restricted_sponsored, bool arg_can_view_revenue, bool arg_paid_media_allowed, bool arg_can_view_stars_revenue, bool arg_paid_reactions_available, long arg_id, const char * arg_about, int arg_participants_count, int arg_admins_count, int arg_kicked_count, int arg_banned_count, int arg_online_count, int arg_read_inbox_max_id, int arg_read_outbox_max_id, int arg_unread_count, Photo arg_chat_photo, PeerNotifySettings arg_notify_settings, ExportedChatInvite arg_exported_invite, BotInfo *arg_bot_info, int len_arg_bot_info, long arg_migrated_from_chat_id, int arg_migrated_from_max_id, int arg_pinned_msg_id, StickerSet arg_stickerset, int arg_available_min_id, int arg_folder_id, long arg_linked_chat_id, ChannelLocation arg_location, int arg_slowmode_seconds, int arg_slowmode_next_send_date, int arg_stats_dc, int arg_pts, InputGroupCall arg_call, int arg_ttl_period, const char * *arg_pending_suggestions, int len_arg_pending_suggestions, Peer arg_groupcall_default_join_as, const char * arg_theme_emoticon, int arg_requests_pending, long *arg_recent_requesters, int len_arg_recent_requesters, Peer arg_default_send_as, ChatReactions arg_available_reactions, int arg_reactions_limit, PeerStories arg_stories, WallPaper arg_wallpaper, int arg_boosts_applied, int arg_boosts_unrestrict, StickerSet arg_emojiset);
tlo_t * tl_chatParticipant(long arg_user_id, long arg_inviter_id, int arg_date);
tlo_t * tl_chatParticipantCreator(long arg_user_id);
tlo_t * tl_chatParticipantAdmin(long arg_user_id, long arg_inviter_id, int arg_date);
tlo_t * tl_chatParticipantsForbidden(long arg_chat_id, ChatParticipant arg_self_participant);
tlo_t * tl_chatParticipants(long arg_chat_id, ChatParticipant *arg_participants, int len_arg_participants, int arg_version);
tlo_t * tl_chatPhotoEmpty();
tlo_t * tl_chatPhoto(bool arg_has_video, long arg_photo_id, unsigned char * arg_stripped_thumb, int len_arg_stripped_thumb, int arg_dc_id);
tlo_t * tl_messageEmpty(int arg_id, Peer arg_peer_id);
tlo_t * tl_message(bool arg_out, bool arg_mentioned, bool arg_media_unread, bool arg_silent, bool arg_post, bool arg_from_scheduled, bool arg_legacy, bool arg_edit_hide, bool arg_pinned, bool arg_noforwards, bool arg_invert_media, bool arg_offline, int arg_id, Peer arg_from_id, int arg_from_boosts_applied, Peer arg_peer_id, Peer arg_saved_peer_id, MessageFwdHeader arg_fwd_from, long arg_via_bot_id, long arg_via_business_bot_id, MessageReplyHeader arg_reply_to, int arg_date, const char * arg_message, MessageMedia arg_media, ReplyMarkup arg_reply_markup, MessageEntity *arg_entities, int len_arg_entities, int arg_views, int arg_forwards, MessageReplies arg_replies, int arg_edit_date, const char * arg_post_author, long arg_grouped_id, MessageReactions arg_reactions, RestrictionReason *arg_restriction_reason, int len_arg_restriction_reason, int arg_ttl_period, int arg_quick_reply_shortcut_id, long arg_effect, FactCheck arg_factcheck);
tlo_t * tl_messageService(bool arg_out, bool arg_mentioned, bool arg_media_unread, bool arg_silent, bool arg_post, bool arg_legacy, int arg_id, Peer arg_from_id, Peer arg_peer_id, MessageReplyHeader arg_reply_to, int arg_date, MessageAction arg_action, int arg_ttl_period);
tlo_t * tl_messageMediaEmpty();
tlo_t * tl_messageMediaPhoto(bool arg_spoiler, Photo arg_photo, int arg_ttl_seconds);
tlo_t * tl_messageMediaGeo(GeoPoint arg_geo);
tlo_t * tl_messageMediaContact(const char * arg_phone_number, const char * arg_first_name, const char * arg_last_name, const char * arg_vcard, long arg_user_id);
tlo_t * tl_messageMediaUnsupported();
tlo_t * tl_messageMediaDocument(bool arg_nopremium, bool arg_spoiler, bool arg_video, bool arg_round, bool arg_voice, Document arg_document, Document *arg_alt_documents, int len_arg_alt_documents, int arg_ttl_seconds);
tlo_t * tl_messageMediaWebPage(bool arg_force_large_media, bool arg_force_small_media, bool arg_manual, bool arg_safe, WebPage arg_webpage);
tlo_t * tl_messageMediaVenue(GeoPoint arg_geo, const char * arg_title, const char * arg_address, const char * arg_provider, const char * arg_venue_id, const char * arg_venue_type);
tlo_t * tl_messageMediaGame(Game arg_game);
tlo_t * tl_messageMediaInvoice(bool arg_shipping_address_requested, bool arg_test, const char * arg_title, const char * arg_description, WebDocument arg_photo, int arg_receipt_msg_id, const char * arg_currency, long arg_total_amount, const char * arg_start_param, MessageExtendedMedia arg_extended_media);
tlo_t * tl_messageMediaGeoLive(GeoPoint arg_geo, int arg_heading, int arg_period, int arg_proximity_notification_radius);
tlo_t * tl_messageMediaPoll(Poll arg_poll, PollResults arg_results);
tlo_t * tl_messageMediaDice(int arg_value, const char * arg_emoticon);
tlo_t * tl_messageMediaStory(bool arg_via_mention, Peer arg_peer, int arg_id, StoryItem arg_story);
tlo_t * tl_messageMediaGiveaway(bool arg_only_new_subscribers, bool arg_winners_are_visible, long *arg_channels, int len_arg_channels, const char * *arg_countries_iso2, int len_arg_countries_iso2, const char * arg_prize_description, int arg_quantity, int arg_months, long arg_stars, int arg_until_date);
tlo_t * tl_messageMediaGiveawayResults(bool arg_only_new_subscribers, bool arg_refunded, long arg_channel_id, int arg_additional_peers_count, int arg_launch_msg_id, int arg_winners_count, int arg_unclaimed_count, long *arg_winners, int len_arg_winners, int arg_months, long arg_stars, const char * arg_prize_description, int arg_until_date);
tlo_t * tl_messageMediaPaidMedia(long arg_stars_amount, MessageExtendedMedia *arg_extended_media, int len_arg_extended_media);
tlo_t * tl_messageActionEmpty();
tlo_t * tl_messageActionChatCreate(const char * arg_title, long *arg_users, int len_arg_users);
tlo_t * tl_messageActionChatEditTitle(const char * arg_title);
tlo_t * tl_messageActionChatEditPhoto(Photo arg_photo);
tlo_t * tl_messageActionChatDeletePhoto();
tlo_t * tl_messageActionChatAddUser(long *arg_users, int len_arg_users);
tlo_t * tl_messageActionChatDeleteUser(long arg_user_id);
tlo_t * tl_messageActionChatJoinedByLink(long arg_inviter_id);
tlo_t * tl_messageActionChannelCreate(const char * arg_title);
tlo_t * tl_messageActionChatMigrateTo(long arg_channel_id);
tlo_t * tl_messageActionChannelMigrateFrom(const char * arg_title, long arg_chat_id);
tlo_t * tl_messageActionPinMessage();
tlo_t * tl_messageActionHistoryClear();
tlo_t * tl_messageActionGameScore(long arg_game_id, int arg_score);
tlo_t * tl_messageActionPaymentSentMe(bool arg_recurring_init, bool arg_recurring_used, const char * arg_currency, long arg_total_amount, unsigned char * arg_payload, int len_arg_payload, PaymentRequestedInfo arg_info, const char * arg_shipping_option_id, PaymentCharge arg_charge);
tlo_t * tl_messageActionPaymentSent(bool arg_recurring_init, bool arg_recurring_used, const char * arg_currency, long arg_total_amount, const char * arg_invoice_slug);
tlo_t * tl_messageActionPhoneCall(bool arg_video, long arg_call_id, PhoneCallDiscardReason arg_reason, int arg_duration);
tlo_t * tl_messageActionScreenshotTaken();
tlo_t * tl_messageActionCustomAction(const char * arg_message);
tlo_t * tl_messageActionBotAllowed(bool arg_attach_menu, bool arg_from_request, const char * arg_domain, BotApp arg_app);
tlo_t * tl_messageActionSecureValuesSentMe(SecureValue *arg_values, int len_arg_values, SecureCredentialsEncrypted arg_credentials);
tlo_t * tl_messageActionSecureValuesSent(SecureValueType *arg_types, int len_arg_types);
tlo_t * tl_messageActionContactSignUp();
tlo_t * tl_messageActionGeoProximityReached(Peer arg_from_id, Peer arg_to_id, int arg_distance);
tlo_t * tl_messageActionGroupCall(InputGroupCall arg_call, int arg_duration);
tlo_t * tl_messageActionInviteToGroupCall(InputGroupCall arg_call, long *arg_users, int len_arg_users);
tlo_t * tl_messageActionSetMessagesTTL(int arg_period, long arg_auto_setting_from);
tlo_t * tl_messageActionGroupCallScheduled(InputGroupCall arg_call, int arg_schedule_date);
tlo_t * tl_messageActionSetChatTheme(const char * arg_emoticon);
tlo_t * tl_messageActionChatJoinedByRequest();
tlo_t * tl_messageActionWebViewDataSentMe(const char * arg_text, const char * arg_data);
tlo_t * tl_messageActionWebViewDataSent(const char * arg_text);
tlo_t * tl_messageActionGiftPremium(const char * arg_currency, long arg_amount, int arg_months, const char * arg_crypto_currency, long arg_crypto_amount);
tlo_t * tl_messageActionTopicCreate(const char * arg_title, int arg_icon_color, long arg_icon_emoji_id);
tlo_t * tl_messageActionTopicEdit(const char * arg_title, long arg_icon_emoji_id, Bool arg_closed, Bool arg_hidden);
tlo_t * tl_messageActionSuggestProfilePhoto(Photo arg_photo);
tlo_t * tl_messageActionRequestedPeer(int arg_button_id, Peer *arg_peers, int len_arg_peers);
tlo_t * tl_messageActionSetChatWallPaper(bool arg_same, bool arg_for_both, WallPaper arg_wallpaper);
tlo_t * tl_messageActionGiftCode(bool arg_via_giveaway, bool arg_unclaimed, Peer arg_boost_peer, int arg_months, const char * arg_slug, const char * arg_currency, long arg_amount, const char * arg_crypto_currency, long arg_crypto_amount);
tlo_t * tl_messageActionGiveawayLaunch(long arg_stars);
tlo_t * tl_messageActionGiveawayResults(bool arg_stars, int arg_winners_count, int arg_unclaimed_count);
tlo_t * tl_messageActionBoostApply(int arg_boosts);
tlo_t * tl_messageActionRequestedPeerSentMe(int arg_button_id, RequestedPeer *arg_peers, int len_arg_peers);
tlo_t * tl_messageActionPaymentRefunded(Peer arg_peer, const char * arg_currency, long arg_total_amount, unsigned char * arg_payload, int len_arg_payload, PaymentCharge arg_charge);
tlo_t * tl_messageActionGiftStars(const char * arg_currency, long arg_amount, long arg_stars, const char * arg_crypto_currency, long arg_crypto_amount, const char * arg_transaction_id);
tlo_t * tl_messageActionPrizeStars(bool arg_unclaimed, long arg_stars, const char * arg_transaction_id, Peer arg_boost_peer, int arg_giveaway_msg_id);
tlo_t * tl_messageActionStarGift(bool arg_name_hidden, bool arg_saved, bool arg_converted, StarGift arg_gift, TextWithEntities arg_message, long arg_convert_stars);
tlo_t * tl_dialog(bool arg_pinned, bool arg_unread_mark, bool arg_view_forum_as_messages, Peer arg_peer, int arg_top_message, int arg_read_inbox_max_id, int arg_read_outbox_max_id, int arg_unread_count, int arg_unread_mentions_count, int arg_unread_reactions_count, PeerNotifySettings arg_notify_settings, int arg_pts, DraftMessage arg_draft, int arg_folder_id, int arg_ttl_period);
tlo_t * tl_dialogFolder(bool arg_pinned, Folder arg_folder, Peer arg_peer, int arg_top_message, int arg_unread_muted_peers_count, int arg_unread_unmuted_peers_count, int arg_unread_muted_messages_count, int arg_unread_unmuted_messages_count);
tlo_t * tl_photoEmpty(long arg_id);
tlo_t * tl_photo(bool arg_has_stickers, long arg_id, long arg_access_hash, unsigned char * arg_file_reference, int len_arg_file_reference, int arg_date, PhotoSize *arg_sizes, int len_arg_sizes, VideoSize *arg_video_sizes, int len_arg_video_sizes, int arg_dc_id);
tlo_t * tl_photoSizeEmpty(const char * arg_type);
tlo_t * tl_photoSize(const char * arg_type, int arg_w, int arg_h, int arg_size);
tlo_t * tl_photoCachedSize(const char * arg_type, int arg_w, int arg_h, unsigned char * arg_bytes, int len_arg_bytes);
tlo_t * tl_photoStrippedSize(const char * arg_type, unsigned char * arg_bytes, int len_arg_bytes);
tlo_t * tl_photoSizeProgressive(const char * arg_type, int arg_w, int arg_h, int *arg_sizes, int len_arg_sizes);
tlo_t * tl_photoPathSize(const char * arg_type, unsigned char * arg_bytes, int len_arg_bytes);
tlo_t * tl_geoPointEmpty();
tlo_t * tl_geoPoint(double arg_long, double arg_lat, long arg_access_hash, int arg_accuracy_radius);
tlo_t * tl_auth_sentCode(auth_SentCodeType arg_type, const char * arg_phone_code_hash, auth_CodeType arg_next_type, int arg_timeout);
tlo_t * tl_auth_sentCodeSuccess(auth_Authorization arg_authorization);
tlo_t * tl_auth_authorization(bool arg_setup_password_required, int arg_otherwise_relogin_days, int arg_tmp_sessions, unsigned char * arg_future_auth_token, int len_arg_future_auth_token, User arg_user);
tlo_t * tl_auth_authorizationSignUpRequired(help_TermsOfService arg_terms_of_service);
tlo_t * tl_auth_exportedAuthorization(long arg_id, unsigned char * arg_bytes, int len_arg_bytes);
tlo_t * tl_inputNotifyPeer(InputPeer arg_peer);
tlo_t * tl_inputNotifyUsers();
tlo_t * tl_inputNotifyChats();
tlo_t * tl_inputNotifyBroadcasts();
tlo_t * tl_inputNotifyForumTopic(InputPeer arg_peer, int arg_top_msg_id);
tlo_t * tl_inputPeerNotifySettings(Bool arg_show_previews, Bool arg_silent, int arg_mute_until, NotificationSound arg_sound, Bool arg_stories_muted, Bool arg_stories_hide_sender, NotificationSound arg_stories_sound);
tlo_t * tl_peerNotifySettings(Bool arg_show_previews, Bool arg_silent, int arg_mute_until, NotificationSound arg_ios_sound, NotificationSound arg_android_sound, NotificationSound arg_other_sound, Bool arg_stories_muted, Bool arg_stories_hide_sender, NotificationSound arg_stories_ios_sound, NotificationSound arg_stories_android_sound, NotificationSound arg_stories_other_sound);
tlo_t * tl_peerSettings(bool arg_report_spam, bool arg_add_contact, bool arg_block_contact, bool arg_share_contact, bool arg_need_contacts_exception, bool arg_report_geo, bool arg_autoarchived, bool arg_invite_members, bool arg_request_chat_broadcast, bool arg_business_bot_paused, bool arg_business_bot_can_reply, int arg_geo_distance, const char * arg_request_chat_title, int arg_request_chat_date, long arg_business_bot_id, const char * arg_business_bot_manage_url);
tlo_t * tl_wallPaper(long arg_id, bool arg_creator, bool arg_default, bool arg_pattern, bool arg_dark, long arg_access_hash, const char * arg_slug, Document arg_document, WallPaperSettings arg_settings);
tlo_t * tl_wallPaperNoFile(long arg_id, bool arg_default, bool arg_dark, WallPaperSettings arg_settings);
tlo_t * tl_inputReportReasonSpam();
tlo_t * tl_inputReportReasonViolence();
tlo_t * tl_inputReportReasonPornography();
tlo_t * tl_inputReportReasonChildAbuse();
tlo_t * tl_inputReportReasonOther();
tlo_t * tl_inputReportReasonCopyright();
tlo_t * tl_inputReportReasonGeoIrrelevant();
tlo_t * tl_inputReportReasonFake();
tlo_t * tl_inputReportReasonIllegalDrugs();
tlo_t * tl_inputReportReasonPersonalDetails();
tlo_t * tl_userFull(bool arg_blocked, bool arg_phone_calls_available, bool arg_phone_calls_private, bool arg_can_pin_message, bool arg_has_scheduled, bool arg_video_calls_available, bool arg_voice_messages_forbidden, bool arg_translations_disabled, bool arg_stories_pinned_available, bool arg_blocked_my_stories_from, bool arg_wallpaper_overridden, bool arg_contact_require_premium, bool arg_read_dates_private, bool arg_sponsored_enabled, long arg_id, const char * arg_about, PeerSettings arg_settings, Photo arg_personal_photo, Photo arg_profile_photo, Photo arg_fallback_photo, PeerNotifySettings arg_notify_settings, BotInfo arg_bot_info, int arg_pinned_msg_id, int arg_common_chats_count, int arg_folder_id, int arg_ttl_period, const char * arg_theme_emoticon, const char * arg_private_forward_name, ChatAdminRights arg_bot_group_admin_rights, ChatAdminRights arg_bot_broadcast_admin_rights, PremiumGiftOption *arg_premium_gifts, int len_arg_premium_gifts, WallPaper arg_wallpaper, PeerStories arg_stories, BusinessWorkHours arg_business_work_hours, BusinessLocation arg_business_location, BusinessGreetingMessage arg_business_greeting_message, BusinessAwayMessage arg_business_away_message, BusinessIntro arg_business_intro, Birthday arg_birthday, long arg_personal_channel_id, int arg_personal_channel_message, int arg_stargifts_count);
tlo_t * tl_contact(long arg_user_id, Bool arg_mutual);
tlo_t * tl_importedContact(long arg_user_id, long arg_client_id);
tlo_t * tl_contactStatus(long arg_user_id, UserStatus arg_status);
tlo_t * tl_contacts_contactsNotModified();
tlo_t * tl_contacts_contacts(Contact *arg_contacts, int len_arg_contacts, int arg_saved_count, User *arg_users, int len_arg_users);
tlo_t * tl_contacts_importedContacts(ImportedContact *arg_imported, int len_arg_imported, PopularContact *arg_popular_invites, int len_arg_popular_invites, long *arg_retry_contacts, int len_arg_retry_contacts, User *arg_users, int len_arg_users);
tlo_t * tl_contacts_blocked(PeerBlocked *arg_blocked, int len_arg_blocked, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_contacts_blockedSlice(int arg_count, PeerBlocked *arg_blocked, int len_arg_blocked, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_messages_dialogs(Dialog *arg_dialogs, int len_arg_dialogs, Message *arg_messages, int len_arg_messages, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_messages_dialogsSlice(int arg_count, Dialog *arg_dialogs, int len_arg_dialogs, Message *arg_messages, int len_arg_messages, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_messages_dialogsNotModified(int arg_count);
tlo_t * tl_messages_messages(Message *arg_messages, int len_arg_messages, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_messages_messagesSlice(bool arg_inexact, int arg_count, int arg_next_rate, int arg_offset_id_offset, Message *arg_messages, int len_arg_messages, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_messages_channelMessages(bool arg_inexact, int arg_pts, int arg_count, int arg_offset_id_offset, Message *arg_messages, int len_arg_messages, ForumTopic *arg_topics, int len_arg_topics, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_messages_messagesNotModified(int arg_count);
tlo_t * tl_messages_chats(Chat *arg_chats, int len_arg_chats);
tlo_t * tl_messages_chatsSlice(int arg_count, Chat *arg_chats, int len_arg_chats);
tlo_t * tl_messages_chatFull(ChatFull arg_full_chat, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_messages_affectedHistory(int arg_pts, int arg_pts_count, int arg_offset);
tlo_t * tl_inputMessagesFilterEmpty();
tlo_t * tl_inputMessagesFilterPhotos();
tlo_t * tl_inputMessagesFilterVideo();
tlo_t * tl_inputMessagesFilterPhotoVideo();
tlo_t * tl_inputMessagesFilterDocument();
tlo_t * tl_inputMessagesFilterUrl();
tlo_t * tl_inputMessagesFilterGif();
tlo_t * tl_inputMessagesFilterVoice();
tlo_t * tl_inputMessagesFilterMusic();
tlo_t * tl_inputMessagesFilterChatPhotos();
tlo_t * tl_inputMessagesFilterPhoneCalls(bool arg_missed);
tlo_t * tl_inputMessagesFilterRoundVoice();
tlo_t * tl_inputMessagesFilterRoundVideo();
tlo_t * tl_inputMessagesFilterMyMentions();
tlo_t * tl_inputMessagesFilterGeo();
tlo_t * tl_inputMessagesFilterContacts();
tlo_t * tl_inputMessagesFilterPinned();
tlo_t * tl_updateNewMessage(Message arg_message, int arg_pts, int arg_pts_count);
tlo_t * tl_updateMessageID(int arg_id, long arg_random_id);
tlo_t * tl_updateDeleteMessages(int *arg_messages, int len_arg_messages, int arg_pts, int arg_pts_count);
tlo_t * tl_updateUserTyping(long arg_user_id, SendMessageAction arg_action);
tlo_t * tl_updateChatUserTyping(long arg_chat_id, Peer arg_from_id, SendMessageAction arg_action);
tlo_t * tl_updateChatParticipants(ChatParticipants arg_participants);
tlo_t * tl_updateUserStatus(long arg_user_id, UserStatus arg_status);
tlo_t * tl_updateUserName(long arg_user_id, const char * arg_first_name, const char * arg_last_name, Username *arg_usernames, int len_arg_usernames);
tlo_t * tl_updateNewAuthorization(bool arg_unconfirmed, long arg_hash, int arg_date, const char * arg_device, const char * arg_location);
tlo_t * tl_updateNewEncryptedMessage(EncryptedMessage arg_message, int arg_qts);
tlo_t * tl_updateEncryptedChatTyping(int arg_chat_id);
tlo_t * tl_updateEncryption(EncryptedChat arg_chat, int arg_date);
tlo_t * tl_updateEncryptedMessagesRead(int arg_chat_id, int arg_max_date, int arg_date);
tlo_t * tl_updateChatParticipantAdd(long arg_chat_id, long arg_user_id, long arg_inviter_id, int arg_date, int arg_version);
tlo_t * tl_updateChatParticipantDelete(long arg_chat_id, long arg_user_id, int arg_version);
tlo_t * tl_updateDcOptions(DcOption *arg_dc_options, int len_arg_dc_options);
tlo_t * tl_updateNotifySettings(NotifyPeer arg_peer, PeerNotifySettings arg_notify_settings);
tlo_t * tl_updateServiceNotification(bool arg_popup, bool arg_invert_media, int arg_inbox_date, const char * arg_type, const char * arg_message, MessageMedia arg_media, MessageEntity *arg_entities, int len_arg_entities);
tlo_t * tl_updatePrivacy(PrivacyKey arg_key, PrivacyRule *arg_rules, int len_arg_rules);
tlo_t * tl_updateUserPhone(long arg_user_id, const char * arg_phone);
tlo_t * tl_updateReadHistoryInbox(int arg_folder_id, Peer arg_peer, int arg_max_id, int arg_still_unread_count, int arg_pts, int arg_pts_count);
tlo_t * tl_updateReadHistoryOutbox(Peer arg_peer, int arg_max_id, int arg_pts, int arg_pts_count);
tlo_t * tl_updateWebPage(WebPage arg_webpage, int arg_pts, int arg_pts_count);
tlo_t * tl_updateReadMessagesContents(int *arg_messages, int len_arg_messages, int arg_pts, int arg_pts_count, int arg_date);
tlo_t * tl_updateChannelTooLong(long arg_channel_id, int arg_pts);
tlo_t * tl_updateChannel(long arg_channel_id);
tlo_t * tl_updateNewChannelMessage(Message arg_message, int arg_pts, int arg_pts_count);
tlo_t * tl_updateReadChannelInbox(int arg_folder_id, long arg_channel_id, int arg_max_id, int arg_still_unread_count, int arg_pts);
tlo_t * tl_updateDeleteChannelMessages(long arg_channel_id, int *arg_messages, int len_arg_messages, int arg_pts, int arg_pts_count);
tlo_t * tl_updateChannelMessageViews(long arg_channel_id, int arg_id, int arg_views);
tlo_t * tl_updateChatParticipantAdmin(long arg_chat_id, long arg_user_id, Bool arg_is_admin, int arg_version);
tlo_t * tl_updateNewStickerSet(messages_StickerSet arg_stickerset);
tlo_t * tl_updateStickerSetsOrder(bool arg_masks, bool arg_emojis, long *arg_order, int len_arg_order);
tlo_t * tl_updateStickerSets(bool arg_masks, bool arg_emojis);
tlo_t * tl_updateSavedGifs();
tlo_t * tl_updateBotInlineQuery(long arg_query_id, long arg_user_id, const char * arg_query, GeoPoint arg_geo, InlineQueryPeerType arg_peer_type, const char * arg_offset);
tlo_t * tl_updateBotInlineSend(long arg_user_id, const char * arg_query, GeoPoint arg_geo, const char * arg_id, InputBotInlineMessageID arg_msg_id);
tlo_t * tl_updateEditChannelMessage(Message arg_message, int arg_pts, int arg_pts_count);
tlo_t * tl_updateBotCallbackQuery(long arg_query_id, long arg_user_id, Peer arg_peer, int arg_msg_id, long arg_chat_instance, unsigned char * arg_data, int len_arg_data, const char * arg_game_short_name);
tlo_t * tl_updateEditMessage(Message arg_message, int arg_pts, int arg_pts_count);
tlo_t * tl_updateInlineBotCallbackQuery(long arg_query_id, long arg_user_id, InputBotInlineMessageID arg_msg_id, long arg_chat_instance, unsigned char * arg_data, int len_arg_data, const char * arg_game_short_name);
tlo_t * tl_updateReadChannelOutbox(long arg_channel_id, int arg_max_id);
tlo_t * tl_updateDraftMessage(Peer arg_peer, int arg_top_msg_id, DraftMessage arg_draft);
tlo_t * tl_updateReadFeaturedStickers();
tlo_t * tl_updateRecentStickers();
tlo_t * tl_updateConfig();
tlo_t * tl_updatePtsChanged();
tlo_t * tl_updateChannelWebPage(long arg_channel_id, WebPage arg_webpage, int arg_pts, int arg_pts_count);
tlo_t * tl_updateDialogPinned(bool arg_pinned, int arg_folder_id, DialogPeer arg_peer);
tlo_t * tl_updatePinnedDialogs(int arg_folder_id, DialogPeer *arg_order, int len_arg_order);
tlo_t * tl_updateBotWebhookJSON(DataJSON arg_data);
tlo_t * tl_updateBotWebhookJSONQuery(long arg_query_id, DataJSON arg_data, int arg_timeout);
tlo_t * tl_updateBotShippingQuery(long arg_query_id, long arg_user_id, unsigned char * arg_payload, int len_arg_payload, PostAddress arg_shipping_address);
tlo_t * tl_updateBotPrecheckoutQuery(long arg_query_id, long arg_user_id, unsigned char * arg_payload, int len_arg_payload, PaymentRequestedInfo arg_info, const char * arg_shipping_option_id, const char * arg_currency, long arg_total_amount);
tlo_t * tl_updatePhoneCall(PhoneCall arg_phone_call);
tlo_t * tl_updateLangPackTooLong(const char * arg_lang_code);
tlo_t * tl_updateLangPack(LangPackDifference arg_difference);
tlo_t * tl_updateFavedStickers();
tlo_t * tl_updateChannelReadMessagesContents(long arg_channel_id, int arg_top_msg_id, int *arg_messages, int len_arg_messages);
tlo_t * tl_updateContactsReset();
tlo_t * tl_updateChannelAvailableMessages(long arg_channel_id, int arg_available_min_id);
tlo_t * tl_updateDialogUnreadMark(bool arg_unread, DialogPeer arg_peer);
tlo_t * tl_updateMessagePoll(long arg_poll_id, Poll arg_poll, PollResults arg_results);
tlo_t * tl_updateChatDefaultBannedRights(Peer arg_peer, ChatBannedRights arg_default_banned_rights, int arg_version);
tlo_t * tl_updateFolderPeers(FolderPeer *arg_folder_peers, int len_arg_folder_peers, int arg_pts, int arg_pts_count);
tlo_t * tl_updatePeerSettings(Peer arg_peer, PeerSettings arg_settings);
tlo_t * tl_updatePeerLocated(PeerLocated *arg_peers, int len_arg_peers);
tlo_t * tl_updateNewScheduledMessage(Message arg_message);
tlo_t * tl_updateDeleteScheduledMessages(Peer arg_peer, int *arg_messages, int len_arg_messages);
tlo_t * tl_updateTheme(Theme arg_theme);
tlo_t * tl_updateGeoLiveViewed(Peer arg_peer, int arg_msg_id);
tlo_t * tl_updateLoginToken();
tlo_t * tl_updateMessagePollVote(long arg_poll_id, Peer arg_peer, unsigned char * *arg_options, int len_arg_options, int arg_qts);
tlo_t * tl_updateDialogFilter(int arg_id, DialogFilter arg_filter);
tlo_t * tl_updateDialogFilterOrder(int *arg_order, int len_arg_order);
tlo_t * tl_updateDialogFilters();
tlo_t * tl_updatePhoneCallSignalingData(long arg_phone_call_id, unsigned char * arg_data, int len_arg_data);
tlo_t * tl_updateChannelMessageForwards(long arg_channel_id, int arg_id, int arg_forwards);
tlo_t * tl_updateReadChannelDiscussionInbox(long arg_channel_id, int arg_top_msg_id, int arg_read_max_id, long arg_broadcast_id, int arg_broadcast_post);
tlo_t * tl_updateReadChannelDiscussionOutbox(long arg_channel_id, int arg_top_msg_id, int arg_read_max_id);
tlo_t * tl_updatePeerBlocked(bool arg_blocked, bool arg_blocked_my_stories_from, Peer arg_peer_id);
tlo_t * tl_updateChannelUserTyping(long arg_channel_id, int arg_top_msg_id, Peer arg_from_id, SendMessageAction arg_action);
tlo_t * tl_updatePinnedMessages(bool arg_pinned, Peer arg_peer, int *arg_messages, int len_arg_messages, int arg_pts, int arg_pts_count);
tlo_t * tl_updatePinnedChannelMessages(bool arg_pinned, long arg_channel_id, int *arg_messages, int len_arg_messages, int arg_pts, int arg_pts_count);
tlo_t * tl_updateChat(long arg_chat_id);
tlo_t * tl_updateGroupCallParticipants(InputGroupCall arg_call, GroupCallParticipant *arg_participants, int len_arg_participants, int arg_version);
tlo_t * tl_updateGroupCall(long arg_chat_id, GroupCall arg_call);
tlo_t * tl_updatePeerHistoryTTL(Peer arg_peer, int arg_ttl_period);
tlo_t * tl_updateChatParticipant(long arg_chat_id, int arg_date, long arg_actor_id, long arg_user_id, ChatParticipant arg_prev_participant, ChatParticipant arg_new_participant, ExportedChatInvite arg_invite, int arg_qts);
tlo_t * tl_updateChannelParticipant(bool arg_via_chatlist, long arg_channel_id, int arg_date, long arg_actor_id, long arg_user_id, ChannelParticipant arg_prev_participant, ChannelParticipant arg_new_participant, ExportedChatInvite arg_invite, int arg_qts);
tlo_t * tl_updateBotStopped(long arg_user_id, int arg_date, Bool arg_stopped, int arg_qts);
tlo_t * tl_updateGroupCallConnection(bool arg_presentation, DataJSON arg_params);
tlo_t * tl_updateBotCommands(Peer arg_peer, long arg_bot_id, BotCommand *arg_commands, int len_arg_commands);
tlo_t * tl_updatePendingJoinRequests(Peer arg_peer, int arg_requests_pending, long *arg_recent_requesters, int len_arg_recent_requesters);
tlo_t * tl_updateBotChatInviteRequester(Peer arg_peer, int arg_date, long arg_user_id, const char * arg_about, ExportedChatInvite arg_invite, int arg_qts);
tlo_t * tl_updateMessageReactions(Peer arg_peer, int arg_msg_id, int arg_top_msg_id, MessageReactions arg_reactions);
tlo_t * tl_updateAttachMenuBots();
tlo_t * tl_updateWebViewResultSent(long arg_query_id);
tlo_t * tl_updateBotMenuButton(long arg_bot_id, BotMenuButton arg_button);
tlo_t * tl_updateSavedRingtones();
tlo_t * tl_updateTranscribedAudio(bool arg_pending, Peer arg_peer, int arg_msg_id, long arg_transcription_id, const char * arg_text);
tlo_t * tl_updateReadFeaturedEmojiStickers();
tlo_t * tl_updateUserEmojiStatus(long arg_user_id, EmojiStatus arg_emoji_status);
tlo_t * tl_updateRecentEmojiStatuses();
tlo_t * tl_updateRecentReactions();
tlo_t * tl_updateMoveStickerSetToTop(bool arg_masks, bool arg_emojis, long arg_stickerset);
tlo_t * tl_updateMessageExtendedMedia(Peer arg_peer, int arg_msg_id, MessageExtendedMedia *arg_extended_media, int len_arg_extended_media);
tlo_t * tl_updateChannelPinnedTopic(bool arg_pinned, long arg_channel_id, int arg_topic_id);
tlo_t * tl_updateChannelPinnedTopics(long arg_channel_id, int *arg_order, int len_arg_order);
tlo_t * tl_updateUser(long arg_user_id);
tlo_t * tl_updateAutoSaveSettings();
tlo_t * tl_updateStory(Peer arg_peer, StoryItem arg_story);
tlo_t * tl_updateReadStories(Peer arg_peer, int arg_max_id);
tlo_t * tl_updateStoryID(int arg_id, long arg_random_id);
tlo_t * tl_updateStoriesStealthMode(StoriesStealthMode arg_stealth_mode);
tlo_t * tl_updateSentStoryReaction(Peer arg_peer, int arg_story_id, Reaction arg_reaction);
tlo_t * tl_updateBotChatBoost(Peer arg_peer, Boost arg_boost, int arg_qts);
tlo_t * tl_updateChannelViewForumAsMessages(long arg_channel_id, Bool arg_enabled);
tlo_t * tl_updatePeerWallpaper(bool arg_wallpaper_overridden, Peer arg_peer, WallPaper arg_wallpaper);
tlo_t * tl_updateBotMessageReaction(Peer arg_peer, int arg_msg_id, int arg_date, Peer arg_actor, Reaction *arg_old_reactions, int len_arg_old_reactions, Reaction *arg_new_reactions, int len_arg_new_reactions, int arg_qts);
tlo_t * tl_updateBotMessageReactions(Peer arg_peer, int arg_msg_id, int arg_date, ReactionCount *arg_reactions, int len_arg_reactions, int arg_qts);
tlo_t * tl_updateSavedDialogPinned(bool arg_pinned, DialogPeer arg_peer);
tlo_t * tl_updatePinnedSavedDialogs(DialogPeer *arg_order, int len_arg_order);
tlo_t * tl_updateSavedReactionTags();
tlo_t * tl_updateSmsJob(const char * arg_job_id);
tlo_t * tl_updateQuickReplies(QuickReply *arg_quick_replies, int len_arg_quick_replies);
tlo_t * tl_updateNewQuickReply(QuickReply arg_quick_reply);
tlo_t * tl_updateDeleteQuickReply(int arg_shortcut_id);
tlo_t * tl_updateQuickReplyMessage(Message arg_message);
tlo_t * tl_updateDeleteQuickReplyMessages(int arg_shortcut_id, int *arg_messages, int len_arg_messages);
tlo_t * tl_updateBotBusinessConnect(BotBusinessConnection arg_connection, int arg_qts);
tlo_t * tl_updateBotNewBusinessMessage(const char * arg_connection_id, Message arg_message, Message arg_reply_to_message, int arg_qts);
tlo_t * tl_updateBotEditBusinessMessage(const char * arg_connection_id, Message arg_message, Message arg_reply_to_message, int arg_qts);
tlo_t * tl_updateBotDeleteBusinessMessage(const char * arg_connection_id, Peer arg_peer, int *arg_messages, int len_arg_messages, int arg_qts);
tlo_t * tl_updateNewStoryReaction(int arg_story_id, Peer arg_peer, Reaction arg_reaction);
tlo_t * tl_updateBroadcastRevenueTransactions(Peer arg_peer, BroadcastRevenueBalances arg_balances);
tlo_t * tl_updateStarsBalance(long arg_balance);
tlo_t * tl_updateBusinessBotCallbackQuery(long arg_query_id, long arg_user_id, const char * arg_connection_id, Message arg_message, Message arg_reply_to_message, long arg_chat_instance, unsigned char * arg_data, int len_arg_data);
tlo_t * tl_updateStarsRevenueStatus(Peer arg_peer, StarsRevenueStatus arg_status);
tlo_t * tl_updateBotPurchasedPaidMedia(long arg_user_id, const char * arg_payload, int arg_qts);
tlo_t * tl_updatePaidReactionPrivacy(Bool arg_private);
tlo_t * tl_updates_state(int arg_pts, int arg_qts, int arg_date, int arg_seq, int arg_unread_count);
tlo_t * tl_updates_differenceEmpty(int arg_date, int arg_seq);
tlo_t * tl_updates_difference(Message *arg_new_messages, int len_arg_new_messages, EncryptedMessage *arg_new_encrypted_messages, int len_arg_new_encrypted_messages, Update *arg_other_updates, int len_arg_other_updates, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users, updates_State arg_state);
tlo_t * tl_updates_differenceSlice(Message *arg_new_messages, int len_arg_new_messages, EncryptedMessage *arg_new_encrypted_messages, int len_arg_new_encrypted_messages, Update *arg_other_updates, int len_arg_other_updates, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users, updates_State arg_intermediate_state);
tlo_t * tl_updates_differenceTooLong(int arg_pts);
tlo_t * tl_updatesTooLong();
tlo_t * tl_updateShortMessage(bool arg_out, bool arg_mentioned, bool arg_media_unread, bool arg_silent, int arg_id, long arg_user_id, const char * arg_message, int arg_pts, int arg_pts_count, int arg_date, MessageFwdHeader arg_fwd_from, long arg_via_bot_id, MessageReplyHeader arg_reply_to, MessageEntity *arg_entities, int len_arg_entities, int arg_ttl_period);
tlo_t * tl_updateShortChatMessage(bool arg_out, bool arg_mentioned, bool arg_media_unread, bool arg_silent, int arg_id, long arg_from_id, long arg_chat_id, const char * arg_message, int arg_pts, int arg_pts_count, int arg_date, MessageFwdHeader arg_fwd_from, long arg_via_bot_id, MessageReplyHeader arg_reply_to, MessageEntity *arg_entities, int len_arg_entities, int arg_ttl_period);
tlo_t * tl_updateShort(Update arg_update, int arg_date);
tlo_t * tl_updatesCombined(Update *arg_updates, int len_arg_updates, User *arg_users, int len_arg_users, Chat *arg_chats, int len_arg_chats, int arg_date, int arg_seq_start, int arg_seq);
tlo_t * tl_updates(Update *arg_updates, int len_arg_updates, User *arg_users, int len_arg_users, Chat *arg_chats, int len_arg_chats, int arg_date, int arg_seq);
tlo_t * tl_updateShortSentMessage(bool arg_out, int arg_id, int arg_pts, int arg_pts_count, int arg_date, MessageMedia arg_media, MessageEntity *arg_entities, int len_arg_entities, int arg_ttl_period);
tlo_t * tl_photos_photos(Photo *arg_photos, int len_arg_photos, User *arg_users, int len_arg_users);
tlo_t * tl_photos_photosSlice(int arg_count, Photo *arg_photos, int len_arg_photos, User *arg_users, int len_arg_users);
tlo_t * tl_photos_photo(Photo arg_photo, User *arg_users, int len_arg_users);
tlo_t * tl_upload_file(storage_FileType arg_type, int arg_mtime, unsigned char * arg_bytes, int len_arg_bytes);
tlo_t * tl_upload_fileCdnRedirect(int arg_dc_id, unsigned char * arg_file_token, int len_arg_file_token, unsigned char * arg_encryption_key, int len_arg_encryption_key, unsigned char * arg_encryption_iv, int len_arg_encryption_iv, FileHash *arg_file_hashes, int len_arg_file_hashes);
tlo_t * tl_dcOption(bool arg_ipv6, bool arg_media_only, bool arg_tcpo_only, bool arg_cdn, bool arg_static, bool arg_this_port_only, int arg_id, const char * arg_ip_address, int arg_port, unsigned char * arg_secret, int len_arg_secret);
tlo_t * tl_config(bool arg_default_p2p_contacts, bool arg_preload_featured_stickers, bool arg_revoke_pm_inbox, bool arg_blocked_mode, bool arg_force_try_ipv6, int arg_date, int arg_expires, Bool arg_test_mode, int arg_this_dc, DcOption *arg_dc_options, int len_arg_dc_options, const char * arg_dc_txt_domain_name, int arg_chat_size_max, int arg_megagroup_size_max, int arg_forwarded_count_max, int arg_online_update_period_ms, int arg_offline_blur_timeout_ms, int arg_offline_idle_timeout_ms, int arg_online_cloud_timeout_ms, int arg_notify_cloud_delay_ms, int arg_notify_default_delay_ms, int arg_push_chat_period_ms, int arg_push_chat_limit, int arg_edit_time_limit, int arg_revoke_time_limit, int arg_revoke_pm_time_limit, int arg_rating_e_decay, int arg_stickers_recent_limit, int arg_channels_read_media_period, int arg_tmp_sessions, int arg_call_receive_timeout_ms, int arg_call_ring_timeout_ms, int arg_call_connect_timeout_ms, int arg_call_packet_timeout_ms, const char * arg_me_url_prefix, const char * arg_autoupdate_url_prefix, const char * arg_gif_search_username, const char * arg_venue_search_username, const char * arg_img_search_username, const char * arg_static_maps_provider, int arg_caption_length_max, int arg_message_length_max, int arg_webfile_dc_id, const char * arg_suggested_lang_code, int arg_lang_pack_version, int arg_base_lang_pack_version, Reaction arg_reactions_default, const char * arg_autologin_token);
tlo_t * tl_nearestDc(const char * arg_country, int arg_this_dc, int arg_nearest_dc);
tlo_t * tl_help_appUpdate(bool arg_can_not_skip, int arg_id, const char * arg_version, const char * arg_text, MessageEntity *arg_entities, int len_arg_entities, Document arg_document, const char * arg_url, Document arg_sticker);
tlo_t * tl_help_noAppUpdate();
tlo_t * tl_help_inviteText(const char * arg_message);
tlo_t * tl_encryptedChatEmpty(int arg_id);
tlo_t * tl_encryptedChatWaiting(int arg_id, long arg_access_hash, int arg_date, long arg_admin_id, long arg_participant_id);
tlo_t * tl_encryptedChatRequested(int arg_folder_id, int arg_id, long arg_access_hash, int arg_date, long arg_admin_id, long arg_participant_id, unsigned char * arg_g_a, int len_arg_g_a);
tlo_t * tl_encryptedChat(int arg_id, long arg_access_hash, int arg_date, long arg_admin_id, long arg_participant_id, unsigned char * arg_g_a_or_b, int len_arg_g_a_or_b, long arg_key_fingerprint);
tlo_t * tl_encryptedChatDiscarded(bool arg_history_deleted, int arg_id);
tlo_t * tl_inputEncryptedChat(int arg_chat_id, long arg_access_hash);
tlo_t * tl_encryptedFileEmpty();
tlo_t * tl_encryptedFile(long arg_id, long arg_access_hash, long arg_size, int arg_dc_id, int arg_key_fingerprint);
tlo_t * tl_inputEncryptedFileEmpty();
tlo_t * tl_inputEncryptedFileUploaded(long arg_id, int arg_parts, const char * arg_md5_checksum, int arg_key_fingerprint);
tlo_t * tl_inputEncryptedFile(long arg_id, long arg_access_hash);
tlo_t * tl_inputEncryptedFileBigUploaded(long arg_id, int arg_parts, int arg_key_fingerprint);
tlo_t * tl_encryptedMessage(long arg_random_id, int arg_chat_id, int arg_date, unsigned char * arg_bytes, int len_arg_bytes, EncryptedFile arg_file);
tlo_t * tl_encryptedMessageService(long arg_random_id, int arg_chat_id, int arg_date, unsigned char * arg_bytes, int len_arg_bytes);
tlo_t * tl_messages_dhConfigNotModified(unsigned char * arg_random, int len_arg_random);
tlo_t * tl_messages_dhConfig(int arg_g, unsigned char * arg_p, int len_arg_p, int arg_version, unsigned char * arg_random, int len_arg_random);
tlo_t * tl_messages_sentEncryptedMessage(int arg_date);
tlo_t * tl_messages_sentEncryptedFile(int arg_date, EncryptedFile arg_file);
tlo_t * tl_inputDocumentEmpty();
tlo_t * tl_inputDocument(long arg_id, long arg_access_hash, unsigned char * arg_file_reference, int len_arg_file_reference);
tlo_t * tl_documentEmpty(long arg_id);
tlo_t * tl_document(long arg_id, long arg_access_hash, unsigned char * arg_file_reference, int len_arg_file_reference, int arg_date, const char * arg_mime_type, long arg_size, PhotoSize *arg_thumbs, int len_arg_thumbs, VideoSize *arg_video_thumbs, int len_arg_video_thumbs, int arg_dc_id, DocumentAttribute *arg_attributes, int len_arg_attributes);
tlo_t * tl_help_support(const char * arg_phone_number, User arg_user);
tlo_t * tl_notifyPeer(Peer arg_peer);
tlo_t * tl_notifyUsers();
tlo_t * tl_notifyChats();
tlo_t * tl_notifyBroadcasts();
tlo_t * tl_notifyForumTopic(Peer arg_peer, int arg_top_msg_id);
tlo_t * tl_sendMessageTypingAction();
tlo_t * tl_sendMessageCancelAction();
tlo_t * tl_sendMessageRecordVideoAction();
tlo_t * tl_sendMessageUploadVideoAction(int arg_progress);
tlo_t * tl_sendMessageRecordAudioAction();
tlo_t * tl_sendMessageUploadAudioAction(int arg_progress);
tlo_t * tl_sendMessageUploadPhotoAction(int arg_progress);
tlo_t * tl_sendMessageUploadDocumentAction(int arg_progress);
tlo_t * tl_sendMessageGeoLocationAction();
tlo_t * tl_sendMessageChooseContactAction();
tlo_t * tl_sendMessageGamePlayAction();
tlo_t * tl_sendMessageRecordRoundAction();
tlo_t * tl_sendMessageUploadRoundAction(int arg_progress);
tlo_t * tl_speakingInGroupCallAction();
tlo_t * tl_sendMessageHistoryImportAction(int arg_progress);
tlo_t * tl_sendMessageChooseStickerAction();
tlo_t * tl_sendMessageEmojiInteraction(const char * arg_emoticon, int arg_msg_id, DataJSON arg_interaction);
tlo_t * tl_sendMessageEmojiInteractionSeen(const char * arg_emoticon);
tlo_t * tl_contacts_found(Peer *arg_my_results, int len_arg_my_results, Peer *arg_results, int len_arg_results, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_inputPrivacyKeyStatusTimestamp();
tlo_t * tl_inputPrivacyKeyChatInvite();
tlo_t * tl_inputPrivacyKeyPhoneCall();
tlo_t * tl_inputPrivacyKeyPhoneP2P();
tlo_t * tl_inputPrivacyKeyForwards();
tlo_t * tl_inputPrivacyKeyProfilePhoto();
tlo_t * tl_inputPrivacyKeyPhoneNumber();
tlo_t * tl_inputPrivacyKeyAddedByPhone();
tlo_t * tl_inputPrivacyKeyVoiceMessages();
tlo_t * tl_inputPrivacyKeyAbout();
tlo_t * tl_inputPrivacyKeyBirthday();
tlo_t * tl_privacyKeyStatusTimestamp();
tlo_t * tl_privacyKeyChatInvite();
tlo_t * tl_privacyKeyPhoneCall();
tlo_t * tl_privacyKeyPhoneP2P();
tlo_t * tl_privacyKeyForwards();
tlo_t * tl_privacyKeyProfilePhoto();
tlo_t * tl_privacyKeyPhoneNumber();
tlo_t * tl_privacyKeyAddedByPhone();
tlo_t * tl_privacyKeyVoiceMessages();
tlo_t * tl_privacyKeyAbout();
tlo_t * tl_privacyKeyBirthday();
tlo_t * tl_inputPrivacyValueAllowContacts();
tlo_t * tl_inputPrivacyValueAllowAll();
tlo_t * tl_inputPrivacyValueAllowUsers(InputUser *arg_users, int len_arg_users);
tlo_t * tl_inputPrivacyValueDisallowContacts();
tlo_t * tl_inputPrivacyValueDisallowAll();
tlo_t * tl_inputPrivacyValueDisallowUsers(InputUser *arg_users, int len_arg_users);
tlo_t * tl_inputPrivacyValueAllowChatParticipants(long *arg_chats, int len_arg_chats);
tlo_t * tl_inputPrivacyValueDisallowChatParticipants(long *arg_chats, int len_arg_chats);
tlo_t * tl_inputPrivacyValueAllowCloseFriends();
tlo_t * tl_inputPrivacyValueAllowPremium();
tlo_t * tl_privacyValueAllowContacts();
tlo_t * tl_privacyValueAllowAll();
tlo_t * tl_privacyValueAllowUsers(long *arg_users, int len_arg_users);
tlo_t * tl_privacyValueDisallowContacts();
tlo_t * tl_privacyValueDisallowAll();
tlo_t * tl_privacyValueDisallowUsers(long *arg_users, int len_arg_users);
tlo_t * tl_privacyValueAllowChatParticipants(long *arg_chats, int len_arg_chats);
tlo_t * tl_privacyValueDisallowChatParticipants(long *arg_chats, int len_arg_chats);
tlo_t * tl_privacyValueAllowCloseFriends();
tlo_t * tl_privacyValueAllowPremium();
tlo_t * tl_account_privacyRules(PrivacyRule *arg_rules, int len_arg_rules, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_accountDaysTTL(int arg_days);
tlo_t * tl_documentAttributeImageSize(int arg_w, int arg_h);
tlo_t * tl_documentAttributeAnimated();
tlo_t * tl_documentAttributeSticker(bool arg_mask, const char * arg_alt, InputStickerSet arg_stickerset, MaskCoords arg_mask_coords);
tlo_t * tl_documentAttributeVideo(bool arg_round_message, bool arg_supports_streaming, bool arg_nosound, double arg_duration, int arg_w, int arg_h, int arg_preload_prefix_size, double arg_video_start_ts, const char * arg_video_codec);
tlo_t * tl_documentAttributeAudio(bool arg_voice, int arg_duration, const char * arg_title, const char * arg_performer, unsigned char * arg_waveform, int len_arg_waveform);
tlo_t * tl_documentAttributeFilename(const char * arg_file_name);
tlo_t * tl_documentAttributeHasStickers();
tlo_t * tl_documentAttributeCustomEmoji(bool arg_free, bool arg_text_color, const char * arg_alt, InputStickerSet arg_stickerset);
tlo_t * tl_messages_stickersNotModified();
tlo_t * tl_messages_stickers(long arg_hash, Document *arg_stickers, int len_arg_stickers);
tlo_t * tl_stickerPack(const char * arg_emoticon, long *arg_documents, int len_arg_documents);
tlo_t * tl_messages_allStickersNotModified();
tlo_t * tl_messages_allStickers(long arg_hash, StickerSet *arg_sets, int len_arg_sets);
tlo_t * tl_messages_affectedMessages(int arg_pts, int arg_pts_count);
tlo_t * tl_webPageEmpty(long arg_id, const char * arg_url);
tlo_t * tl_webPagePending(long arg_id, const char * arg_url, int arg_date);
tlo_t * tl_webPage(bool arg_has_large_media, long arg_id, const char * arg_url, const char * arg_display_url, int arg_hash, const char * arg_type, const char * arg_site_name, const char * arg_title, const char * arg_description, Photo arg_photo, const char * arg_embed_url, const char * arg_embed_type, int arg_embed_width, int arg_embed_height, int arg_duration, const char * arg_author, Document arg_document, Page arg_cached_page, WebPageAttribute *arg_attributes, int len_arg_attributes);
tlo_t * tl_webPageNotModified(int arg_cached_page_views);
tlo_t * tl_authorization(bool arg_current, bool arg_official_app, bool arg_password_pending, bool arg_encrypted_requests_disabled, bool arg_call_requests_disabled, bool arg_unconfirmed, long arg_hash, const char * arg_device_model, const char * arg_platform, const char * arg_system_version, int arg_api_id, const char * arg_app_name, const char * arg_app_version, int arg_date_created, int arg_date_active, const char * arg_ip, const char * arg_country, const char * arg_region);
tlo_t * tl_account_authorizations(int arg_authorization_ttl_days, Authorization *arg_authorizations, int len_arg_authorizations);
tlo_t * tl_account_password(bool arg_has_recovery, bool arg_has_secure_values, bool arg_has_password, PasswordKdfAlgo arg_current_algo, unsigned char * arg_srp_B, int len_arg_srp_B, long arg_srp_id, const char * arg_hint, const char * arg_email_unconfirmed_pattern, PasswordKdfAlgo arg_new_algo, SecurePasswordKdfAlgo arg_new_secure_algo, unsigned char * arg_secure_random, int len_arg_secure_random, int arg_pending_reset_date, const char * arg_login_email_pattern);
tlo_t * tl_account_passwordSettings(const char * arg_email, SecureSecretSettings arg_secure_settings);
tlo_t * tl_account_passwordInputSettings(PasswordKdfAlgo arg_new_algo, unsigned char * arg_new_password_hash, int len_arg_new_password_hash, const char * arg_hint, const char * arg_email, SecureSecretSettings arg_new_secure_settings);
tlo_t * tl_auth_passwordRecovery(const char * arg_email_pattern);
tlo_t * tl_receivedNotifyMessage(int arg_id, int arg_flags);
tlo_t * tl_chatInviteExported(bool arg_revoked, bool arg_permanent, bool arg_request_needed, const char * arg_link, long arg_admin_id, int arg_date, int arg_start_date, int arg_expire_date, int arg_usage_limit, int arg_usage, int arg_requested, int arg_subscription_expired, const char * arg_title, StarsSubscriptionPricing arg_subscription_pricing);
tlo_t * tl_chatInvitePublicJoinRequests();
tlo_t * tl_chatInviteAlready(Chat arg_chat);
tlo_t * tl_chatInvite(bool arg_channel, bool arg_broadcast, bool arg_public, bool arg_megagroup, bool arg_request_needed, bool arg_verified, bool arg_scam, bool arg_fake, bool arg_can_refulfill_subscription, const char * arg_title, const char * arg_about, Photo arg_photo, int arg_participants_count, User *arg_participants, int len_arg_participants, int arg_color, StarsSubscriptionPricing arg_subscription_pricing, long arg_subscription_form_id);
tlo_t * tl_chatInvitePeek(Chat arg_chat, int arg_expires);
tlo_t * tl_inputStickerSetEmpty();
tlo_t * tl_inputStickerSetID(long arg_id, long arg_access_hash);
tlo_t * tl_inputStickerSetShortName(const char * arg_short_name);
tlo_t * tl_inputStickerSetAnimatedEmoji();
tlo_t * tl_inputStickerSetDice(const char * arg_emoticon);
tlo_t * tl_inputStickerSetAnimatedEmojiAnimations();
tlo_t * tl_inputStickerSetPremiumGifts();
tlo_t * tl_inputStickerSetEmojiGenericAnimations();
tlo_t * tl_inputStickerSetEmojiDefaultStatuses();
tlo_t * tl_inputStickerSetEmojiDefaultTopicIcons();
tlo_t * tl_inputStickerSetEmojiChannelDefaultStatuses();
tlo_t * tl_stickerSet(bool arg_archived, bool arg_official, bool arg_masks, bool arg_emojis, bool arg_text_color, bool arg_channel_emoji_status, bool arg_creator, int arg_installed_date, long arg_id, long arg_access_hash, const char * arg_title, const char * arg_short_name, PhotoSize *arg_thumbs, int len_arg_thumbs, int arg_thumb_dc_id, int arg_thumb_version, long arg_thumb_document_id, int arg_count, int arg_hash);
tlo_t * tl_messages_stickerSet(StickerSet arg_set, StickerPack *arg_packs, int len_arg_packs, StickerKeyword *arg_keywords, int len_arg_keywords, Document *arg_documents, int len_arg_documents);
tlo_t * tl_messages_stickerSetNotModified();
tlo_t * tl_botCommand(const char * arg_command, const char * arg_description);
tlo_t * tl_botInfo(bool arg_has_preview_medias, long arg_user_id, const char * arg_description, Photo arg_description_photo, Document arg_description_document, BotCommand *arg_commands, int len_arg_commands, BotMenuButton arg_menu_button, const char * arg_privacy_policy_url);
tlo_t * tl_keyboardButton(const char * arg_text);
tlo_t * tl_keyboardButtonUrl(const char * arg_text, const char * arg_url);
tlo_t * tl_keyboardButtonCallback(bool arg_requires_password, const char * arg_text, unsigned char * arg_data, int len_arg_data);
tlo_t * tl_keyboardButtonRequestPhone(const char * arg_text);
tlo_t * tl_keyboardButtonRequestGeoLocation(const char * arg_text);
tlo_t * tl_keyboardButtonSwitchInline(bool arg_same_peer, const char * arg_text, const char * arg_query, InlineQueryPeerType *arg_peer_types, int len_arg_peer_types);
tlo_t * tl_keyboardButtonGame(const char * arg_text);
tlo_t * tl_keyboardButtonBuy(const char * arg_text);
tlo_t * tl_keyboardButtonUrlAuth(const char * arg_text, const char * arg_fwd_text, const char * arg_url, int arg_button_id);
tlo_t * tl_inputKeyboardButtonUrlAuth(bool arg_request_write_access, const char * arg_text, const char * arg_fwd_text, const char * arg_url, InputUser arg_bot);
tlo_t * tl_keyboardButtonRequestPoll(Bool arg_quiz, const char * arg_text);
tlo_t * tl_inputKeyboardButtonUserProfile(const char * arg_text, InputUser arg_user_id);
tlo_t * tl_keyboardButtonUserProfile(const char * arg_text, long arg_user_id);
tlo_t * tl_keyboardButtonWebView(const char * arg_text, const char * arg_url);
tlo_t * tl_keyboardButtonSimpleWebView(const char * arg_text, const char * arg_url);
tlo_t * tl_keyboardButtonRequestPeer(const char * arg_text, int arg_button_id, RequestPeerType arg_peer_type, int arg_max_quantity);
tlo_t * tl_inputKeyboardButtonRequestPeer(bool arg_name_requested, bool arg_username_requested, bool arg_photo_requested, const char * arg_text, int arg_button_id, RequestPeerType arg_peer_type, int arg_max_quantity);
tlo_t * tl_keyboardButtonCopy(const char * arg_text, const char * arg_copy_text);
tlo_t * tl_keyboardButtonRow(KeyboardButton *arg_buttons, int len_arg_buttons);
tlo_t * tl_replyKeyboardHide(bool arg_selective);
tlo_t * tl_replyKeyboardForceReply(bool arg_single_use, bool arg_selective, const char * arg_placeholder);
tlo_t * tl_replyKeyboardMarkup(bool arg_resize, bool arg_single_use, bool arg_selective, bool arg_persistent, KeyboardButtonRow *arg_rows, int len_arg_rows, const char * arg_placeholder);
tlo_t * tl_replyInlineMarkup(KeyboardButtonRow *arg_rows, int len_arg_rows);
tlo_t * tl_messageEntityUnknown(int arg_offset, int arg_length);
tlo_t * tl_messageEntityMention(int arg_offset, int arg_length);
tlo_t * tl_messageEntityHashtag(int arg_offset, int arg_length);
tlo_t * tl_messageEntityBotCommand(int arg_offset, int arg_length);
tlo_t * tl_messageEntityUrl(int arg_offset, int arg_length);
tlo_t * tl_messageEntityEmail(int arg_offset, int arg_length);
tlo_t * tl_messageEntityBold(int arg_offset, int arg_length);
tlo_t * tl_messageEntityItalic(int arg_offset, int arg_length);
tlo_t * tl_messageEntityCode(int arg_offset, int arg_length);
tlo_t * tl_messageEntityPre(int arg_offset, int arg_length, const char * arg_language);
tlo_t * tl_messageEntityTextUrl(int arg_offset, int arg_length, const char * arg_url);
tlo_t * tl_messageEntityMentionName(int arg_offset, int arg_length, long arg_user_id);
tlo_t * tl_inputMessageEntityMentionName(int arg_offset, int arg_length, InputUser arg_user_id);
tlo_t * tl_messageEntityPhone(int arg_offset, int arg_length);
tlo_t * tl_messageEntityCashtag(int arg_offset, int arg_length);
tlo_t * tl_messageEntityUnderline(int arg_offset, int arg_length);
tlo_t * tl_messageEntityStrike(int arg_offset, int arg_length);
tlo_t * tl_messageEntityBankCard(int arg_offset, int arg_length);
tlo_t * tl_messageEntitySpoiler(int arg_offset, int arg_length);
tlo_t * tl_messageEntityCustomEmoji(int arg_offset, int arg_length, long arg_document_id);
tlo_t * tl_messageEntityBlockquote(bool arg_collapsed, int arg_offset, int arg_length);
tlo_t * tl_inputChannelEmpty();
tlo_t * tl_inputChannel(long arg_channel_id, long arg_access_hash);
tlo_t * tl_inputChannelFromMessage(InputPeer arg_peer, int arg_msg_id, long arg_channel_id);
tlo_t * tl_contacts_resolvedPeer(Peer arg_peer, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_messageRange(int arg_min_id, int arg_max_id);
tlo_t * tl_updates_channelDifferenceEmpty(bool arg_final, int arg_pts, int arg_timeout);
tlo_t * tl_updates_channelDifferenceTooLong(bool arg_final, int arg_timeout, Dialog arg_dialog, Message *arg_messages, int len_arg_messages, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_updates_channelDifference(bool arg_final, int arg_pts, int arg_timeout, Message *arg_new_messages, int len_arg_new_messages, Update *arg_other_updates, int len_arg_other_updates, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_channelMessagesFilterEmpty();
tlo_t * tl_channelMessagesFilter(bool arg_exclude_new_messages, MessageRange *arg_ranges, int len_arg_ranges);
tlo_t * tl_channelParticipant(long arg_user_id, int arg_date, int arg_subscription_until_date);
tlo_t * tl_channelParticipantSelf(bool arg_via_request, long arg_user_id, long arg_inviter_id, int arg_date, int arg_subscription_until_date);
tlo_t * tl_channelParticipantCreator(long arg_user_id, ChatAdminRights arg_admin_rights, const char * arg_rank);
tlo_t * tl_channelParticipantAdmin(bool arg_can_edit, bool arg_self, long arg_user_id, long arg_inviter_id, long arg_promoted_by, int arg_date, ChatAdminRights arg_admin_rights, const char * arg_rank);
tlo_t * tl_channelParticipantBanned(bool arg_left, Peer arg_peer, long arg_kicked_by, int arg_date, ChatBannedRights arg_banned_rights);
tlo_t * tl_channelParticipantLeft(Peer arg_peer);
tlo_t * tl_channelParticipantsRecent();
tlo_t * tl_channelParticipantsAdmins();
tlo_t * tl_channelParticipantsKicked(const char * arg_q);
tlo_t * tl_channelParticipantsBots();
tlo_t * tl_channelParticipantsBanned(const char * arg_q);
tlo_t * tl_channelParticipantsSearch(const char * arg_q);
tlo_t * tl_channelParticipantsContacts(const char * arg_q);
tlo_t * tl_channelParticipantsMentions(const char * arg_q, int arg_top_msg_id);
tlo_t * tl_channels_channelParticipants(int arg_count, ChannelParticipant *arg_participants, int len_arg_participants, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_channels_channelParticipantsNotModified();
tlo_t * tl_channels_channelParticipant(ChannelParticipant arg_participant, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_help_termsOfService(bool arg_popup, DataJSON arg_id, const char * arg_text, MessageEntity *arg_entities, int len_arg_entities, int arg_min_age_confirm);
tlo_t * tl_messages_savedGifsNotModified();
tlo_t * tl_messages_savedGifs(long arg_hash, Document *arg_gifs, int len_arg_gifs);
tlo_t * tl_inputBotInlineMessageMediaAuto(bool arg_invert_media, const char * arg_message, MessageEntity *arg_entities, int len_arg_entities, ReplyMarkup arg_reply_markup);
tlo_t * tl_inputBotInlineMessageText(bool arg_no_webpage, bool arg_invert_media, const char * arg_message, MessageEntity *arg_entities, int len_arg_entities, ReplyMarkup arg_reply_markup);
tlo_t * tl_inputBotInlineMessageMediaGeo(InputGeoPoint arg_geo_point, int arg_heading, int arg_period, int arg_proximity_notification_radius, ReplyMarkup arg_reply_markup);
tlo_t * tl_inputBotInlineMessageMediaVenue(InputGeoPoint arg_geo_point, const char * arg_title, const char * arg_address, const char * arg_provider, const char * arg_venue_id, const char * arg_venue_type, ReplyMarkup arg_reply_markup);
tlo_t * tl_inputBotInlineMessageMediaContact(const char * arg_phone_number, const char * arg_first_name, const char * arg_last_name, const char * arg_vcard, ReplyMarkup arg_reply_markup);
tlo_t * tl_inputBotInlineMessageGame(ReplyMarkup arg_reply_markup);
tlo_t * tl_inputBotInlineMessageMediaInvoice(const char * arg_title, const char * arg_description, InputWebDocument arg_photo, Invoice arg_invoice, unsigned char * arg_payload, int len_arg_payload, const char * arg_provider, DataJSON arg_provider_data, ReplyMarkup arg_reply_markup);
tlo_t * tl_inputBotInlineMessageMediaWebPage(bool arg_invert_media, bool arg_force_large_media, bool arg_force_small_media, bool arg_optional, const char * arg_message, MessageEntity *arg_entities, int len_arg_entities, const char * arg_url, ReplyMarkup arg_reply_markup);
tlo_t * tl_inputBotInlineResult(const char * arg_id, const char * arg_type, const char * arg_title, const char * arg_description, const char * arg_url, InputWebDocument arg_thumb, InputWebDocument arg_content, InputBotInlineMessage arg_send_message);
tlo_t * tl_inputBotInlineResultPhoto(const char * arg_id, const char * arg_type, InputPhoto arg_photo, InputBotInlineMessage arg_send_message);
tlo_t * tl_inputBotInlineResultDocument(const char * arg_id, const char * arg_type, const char * arg_title, const char * arg_description, InputDocument arg_document, InputBotInlineMessage arg_send_message);
tlo_t * tl_inputBotInlineResultGame(const char * arg_id, const char * arg_short_name, InputBotInlineMessage arg_send_message);
tlo_t * tl_botInlineMessageMediaAuto(bool arg_invert_media, const char * arg_message, MessageEntity *arg_entities, int len_arg_entities, ReplyMarkup arg_reply_markup);
tlo_t * tl_botInlineMessageText(bool arg_no_webpage, bool arg_invert_media, const char * arg_message, MessageEntity *arg_entities, int len_arg_entities, ReplyMarkup arg_reply_markup);
tlo_t * tl_botInlineMessageMediaGeo(GeoPoint arg_geo, int arg_heading, int arg_period, int arg_proximity_notification_radius, ReplyMarkup arg_reply_markup);
tlo_t * tl_botInlineMessageMediaVenue(GeoPoint arg_geo, const char * arg_title, const char * arg_address, const char * arg_provider, const char * arg_venue_id, const char * arg_venue_type, ReplyMarkup arg_reply_markup);
tlo_t * tl_botInlineMessageMediaContact(const char * arg_phone_number, const char * arg_first_name, const char * arg_last_name, const char * arg_vcard, ReplyMarkup arg_reply_markup);
tlo_t * tl_botInlineMessageMediaInvoice(bool arg_shipping_address_requested, bool arg_test, const char * arg_title, const char * arg_description, WebDocument arg_photo, const char * arg_currency, long arg_total_amount, ReplyMarkup arg_reply_markup);
tlo_t * tl_botInlineMessageMediaWebPage(bool arg_invert_media, bool arg_force_large_media, bool arg_force_small_media, bool arg_manual, bool arg_safe, const char * arg_message, MessageEntity *arg_entities, int len_arg_entities, const char * arg_url, ReplyMarkup arg_reply_markup);
tlo_t * tl_botInlineResult(const char * arg_id, const char * arg_type, const char * arg_title, const char * arg_description, const char * arg_url, WebDocument arg_thumb, WebDocument arg_content, BotInlineMessage arg_send_message);
tlo_t * tl_botInlineMediaResult(const char * arg_id, const char * arg_type, Photo arg_photo, Document arg_document, const char * arg_title, const char * arg_description, BotInlineMessage arg_send_message);
tlo_t * tl_messages_botResults(bool arg_gallery, long arg_query_id, const char * arg_next_offset, InlineBotSwitchPM arg_switch_pm, InlineBotWebView arg_switch_webview, BotInlineResult *arg_results, int len_arg_results, int arg_cache_time, User *arg_users, int len_arg_users);
tlo_t * tl_exportedMessageLink(const char * arg_link, const char * arg_html);
tlo_t * tl_messageFwdHeader(bool arg_imported, bool arg_saved_out, Peer arg_from_id, const char * arg_from_name, int arg_date, int arg_channel_post, const char * arg_post_author, Peer arg_saved_from_peer, int arg_saved_from_msg_id, Peer arg_saved_from_id, const char * arg_saved_from_name, int arg_saved_date, const char * arg_psa_type);
tlo_t * tl_auth_codeTypeSms();
tlo_t * tl_auth_codeTypeCall();
tlo_t * tl_auth_codeTypeFlashCall();
tlo_t * tl_auth_codeTypeMissedCall();
tlo_t * tl_auth_codeTypeFragmentSms();
tlo_t * tl_auth_sentCodeTypeApp(int arg_length);
tlo_t * tl_auth_sentCodeTypeSms(int arg_length);
tlo_t * tl_auth_sentCodeTypeCall(int arg_length);
tlo_t * tl_auth_sentCodeTypeFlashCall(const char * arg_pattern);
tlo_t * tl_auth_sentCodeTypeMissedCall(const char * arg_prefix, int arg_length);
tlo_t * tl_auth_sentCodeTypeEmailCode(bool arg_apple_signin_allowed, bool arg_google_signin_allowed, const char * arg_email_pattern, int arg_length, int arg_reset_available_period, int arg_reset_pending_date);
tlo_t * tl_auth_sentCodeTypeSetUpEmailRequired(bool arg_apple_signin_allowed, bool arg_google_signin_allowed);
tlo_t * tl_auth_sentCodeTypeFragmentSms(const char * arg_url, int arg_length);
tlo_t * tl_auth_sentCodeTypeFirebaseSms(unsigned char * arg_nonce, int len_arg_nonce, long arg_play_integrity_project_id, unsigned char * arg_play_integrity_nonce, int len_arg_play_integrity_nonce, const char * arg_receipt, int arg_push_timeout, int arg_length);
tlo_t * tl_auth_sentCodeTypeSmsWord(const char * arg_beginning);
tlo_t * tl_auth_sentCodeTypeSmsPhrase(const char * arg_beginning);
tlo_t * tl_messages_botCallbackAnswer(bool arg_alert, bool arg_has_url, bool arg_native_ui, const char * arg_message, const char * arg_url, int arg_cache_time);
tlo_t * tl_messages_messageEditData(bool arg_caption);
tlo_t * tl_inputBotInlineMessageID(int arg_dc_id, long arg_id, long arg_access_hash);
tlo_t * tl_inputBotInlineMessageID64(int arg_dc_id, long arg_owner_id, int arg_id, long arg_access_hash);
tlo_t * tl_inlineBotSwitchPM(const char * arg_text, const char * arg_start_param);
tlo_t * tl_messages_peerDialogs(Dialog *arg_dialogs, int len_arg_dialogs, Message *arg_messages, int len_arg_messages, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users, updates_State arg_state);
tlo_t * tl_topPeer(Peer arg_peer, double arg_rating);
tlo_t * tl_topPeerCategoryBotsPM();
tlo_t * tl_topPeerCategoryBotsInline();
tlo_t * tl_topPeerCategoryCorrespondents();
tlo_t * tl_topPeerCategoryGroups();
tlo_t * tl_topPeerCategoryChannels();
tlo_t * tl_topPeerCategoryPhoneCalls();
tlo_t * tl_topPeerCategoryForwardUsers();
tlo_t * tl_topPeerCategoryForwardChats();
tlo_t * tl_topPeerCategoryBotsApp();
tlo_t * tl_topPeerCategoryPeers(TopPeerCategory arg_category, int arg_count, TopPeer *arg_peers, int len_arg_peers);
tlo_t * tl_contacts_topPeersNotModified();
tlo_t * tl_contacts_topPeers(TopPeerCategoryPeers *arg_categories, int len_arg_categories, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_contacts_topPeersDisabled();
tlo_t * tl_draftMessageEmpty(int arg_date);
tlo_t * tl_draftMessage(bool arg_no_webpage, bool arg_invert_media, InputReplyTo arg_reply_to, const char * arg_message, MessageEntity *arg_entities, int len_arg_entities, InputMedia arg_media, int arg_date, long arg_effect);
tlo_t * tl_messages_featuredStickersNotModified(int arg_count);
tlo_t * tl_messages_featuredStickers(bool arg_premium, long arg_hash, int arg_count, StickerSetCovered *arg_sets, int len_arg_sets, long *arg_unread, int len_arg_unread);
tlo_t * tl_messages_recentStickersNotModified();
tlo_t * tl_messages_recentStickers(long arg_hash, StickerPack *arg_packs, int len_arg_packs, Document *arg_stickers, int len_arg_stickers, int *arg_dates, int len_arg_dates);
tlo_t * tl_messages_archivedStickers(int arg_count, StickerSetCovered *arg_sets, int len_arg_sets);
tlo_t * tl_messages_stickerSetInstallResultSuccess();
tlo_t * tl_messages_stickerSetInstallResultArchive(StickerSetCovered *arg_sets, int len_arg_sets);
tlo_t * tl_stickerSetCovered(StickerSet arg_set, Document arg_cover);
tlo_t * tl_stickerSetMultiCovered(StickerSet arg_set, Document *arg_covers, int len_arg_covers);
tlo_t * tl_stickerSetFullCovered(StickerSet arg_set, StickerPack *arg_packs, int len_arg_packs, StickerKeyword *arg_keywords, int len_arg_keywords, Document *arg_documents, int len_arg_documents);
tlo_t * tl_stickerSetNoCovered(StickerSet arg_set);
tlo_t * tl_maskCoords(int arg_n, double arg_x, double arg_y, double arg_zoom);
tlo_t * tl_inputStickeredMediaPhoto(InputPhoto arg_id);
tlo_t * tl_inputStickeredMediaDocument(InputDocument arg_id);
tlo_t * tl_game(long arg_id, long arg_access_hash, const char * arg_short_name, const char * arg_title, const char * arg_description, Photo arg_photo, Document arg_document);
tlo_t * tl_inputGameID(long arg_id, long arg_access_hash);
tlo_t * tl_inputGameShortName(InputUser arg_bot_id, const char * arg_short_name);
tlo_t * tl_highScore(int arg_pos, long arg_user_id, int arg_score);
tlo_t * tl_messages_highScores(HighScore *arg_scores, int len_arg_scores, User *arg_users, int len_arg_users);
tlo_t * tl_textEmpty();
tlo_t * tl_textPlain(const char * arg_text);
tlo_t * tl_textBold(RichText arg_text);
tlo_t * tl_textItalic(RichText arg_text);
tlo_t * tl_textUnderline(RichText arg_text);
tlo_t * tl_textStrike(RichText arg_text);
tlo_t * tl_textFixed(RichText arg_text);
tlo_t * tl_textUrl(RichText arg_text, const char * arg_url, long arg_webpage_id);
tlo_t * tl_textEmail(RichText arg_text, const char * arg_email);
tlo_t * tl_textConcat(RichText *arg_texts, int len_arg_texts);
tlo_t * tl_textSubscript(RichText arg_text);
tlo_t * tl_textSuperscript(RichText arg_text);
tlo_t * tl_textMarked(RichText arg_text);
tlo_t * tl_textPhone(RichText arg_text, const char * arg_phone);
tlo_t * tl_textImage(long arg_document_id, int arg_w, int arg_h);
tlo_t * tl_textAnchor(RichText arg_text, const char * arg_name);
tlo_t * tl_pageBlockUnsupported();
tlo_t * tl_pageBlockTitle(RichText arg_text);
tlo_t * tl_pageBlockSubtitle(RichText arg_text);
tlo_t * tl_pageBlockAuthorDate(RichText arg_author, int arg_published_date);
tlo_t * tl_pageBlockHeader(RichText arg_text);
tlo_t * tl_pageBlockSubheader(RichText arg_text);
tlo_t * tl_pageBlockParagraph(RichText arg_text);
tlo_t * tl_pageBlockPreformatted(RichText arg_text, const char * arg_language);
tlo_t * tl_pageBlockFooter(RichText arg_text);
tlo_t * tl_pageBlockDivider();
tlo_t * tl_pageBlockAnchor(const char * arg_name);
tlo_t * tl_pageBlockList(PageListItem *arg_items, int len_arg_items);
tlo_t * tl_pageBlockBlockquote(RichText arg_text, RichText arg_caption);
tlo_t * tl_pageBlockPullquote(RichText arg_text, RichText arg_caption);
tlo_t * tl_pageBlockPhoto(long arg_photo_id, PageCaption arg_caption, const char * arg_url, long arg_webpage_id);
tlo_t * tl_pageBlockVideo(bool arg_autoplay, bool arg_loop, long arg_video_id, PageCaption arg_caption);
tlo_t * tl_pageBlockCover(PageBlock arg_cover);
tlo_t * tl_pageBlockEmbed(bool arg_full_width, bool arg_allow_scrolling, const char * arg_url, const char * arg_html, long arg_poster_photo_id, int arg_w, int arg_h, PageCaption arg_caption);
tlo_t * tl_pageBlockEmbedPost(const char * arg_url, long arg_webpage_id, long arg_author_photo_id, const char * arg_author, int arg_date, PageBlock *arg_blocks, int len_arg_blocks, PageCaption arg_caption);
tlo_t * tl_pageBlockCollage(PageBlock *arg_items, int len_arg_items, PageCaption arg_caption);
tlo_t * tl_pageBlockSlideshow(PageBlock *arg_items, int len_arg_items, PageCaption arg_caption);
tlo_t * tl_pageBlockChannel(Chat arg_channel);
tlo_t * tl_pageBlockAudio(long arg_audio_id, PageCaption arg_caption);
tlo_t * tl_pageBlockKicker(RichText arg_text);
tlo_t * tl_pageBlockTable(bool arg_bordered, bool arg_striped, RichText arg_title, PageTableRow *arg_rows, int len_arg_rows);
tlo_t * tl_pageBlockOrderedList(PageListOrderedItem *arg_items, int len_arg_items);
tlo_t * tl_pageBlockDetails(bool arg_open, PageBlock *arg_blocks, int len_arg_blocks, RichText arg_title);
tlo_t * tl_pageBlockRelatedArticles(RichText arg_title, PageRelatedArticle *arg_articles, int len_arg_articles);
tlo_t * tl_pageBlockMap(GeoPoint arg_geo, int arg_zoom, int arg_w, int arg_h, PageCaption arg_caption);
tlo_t * tl_phoneCallDiscardReasonMissed();
tlo_t * tl_phoneCallDiscardReasonDisconnect();
tlo_t * tl_phoneCallDiscardReasonHangup();
tlo_t * tl_phoneCallDiscardReasonBusy();
tlo_t * tl_dataJSON(const char * arg_data);
tlo_t * tl_labeledPrice(const char * arg_label, long arg_amount);
tlo_t * tl_invoice(bool arg_test, bool arg_name_requested, bool arg_phone_requested, bool arg_email_requested, bool arg_shipping_address_requested, bool arg_flexible, bool arg_phone_to_provider, bool arg_email_to_provider, bool arg_recurring, const char * arg_currency, LabeledPrice *arg_prices, int len_arg_prices, long arg_max_tip_amount, long *arg_suggested_tip_amounts, int len_arg_suggested_tip_amounts, const char * arg_terms_url);
tlo_t * tl_paymentCharge(const char * arg_id, const char * arg_provider_charge_id);
tlo_t * tl_postAddress(const char * arg_street_line1, const char * arg_street_line2, const char * arg_city, const char * arg_state, const char * arg_country_iso2, const char * arg_post_code);
tlo_t * tl_paymentRequestedInfo(const char * arg_name, const char * arg_phone, const char * arg_email, PostAddress arg_shipping_address);
tlo_t * tl_paymentSavedCredentialsCard(const char * arg_id, const char * arg_title);
tlo_t * tl_webDocument(const char * arg_url, long arg_access_hash, int arg_size, const char * arg_mime_type, DocumentAttribute *arg_attributes, int len_arg_attributes);
tlo_t * tl_webDocumentNoProxy(const char * arg_url, int arg_size, const char * arg_mime_type, DocumentAttribute *arg_attributes, int len_arg_attributes);
tlo_t * tl_inputWebDocument(const char * arg_url, int arg_size, const char * arg_mime_type, DocumentAttribute *arg_attributes, int len_arg_attributes);
tlo_t * tl_inputWebFileLocation(const char * arg_url, long arg_access_hash);
tlo_t * tl_inputWebFileGeoPointLocation(InputGeoPoint arg_geo_point, long arg_access_hash, int arg_w, int arg_h, int arg_zoom, int arg_scale);
tlo_t * tl_inputWebFileAudioAlbumThumbLocation(bool arg_small, InputDocument arg_document, const char * arg_title, const char * arg_performer);
tlo_t * tl_upload_webFile(int arg_size, const char * arg_mime_type, storage_FileType arg_file_type, int arg_mtime, unsigned char * arg_bytes, int len_arg_bytes);
tlo_t * tl_payments_paymentForm(bool arg_can_save_credentials, bool arg_password_missing, long arg_form_id, long arg_bot_id, const char * arg_title, const char * arg_description, WebDocument arg_photo, Invoice arg_invoice, long arg_provider_id, const char * arg_url, const char * arg_native_provider, DataJSON arg_native_params, PaymentFormMethod *arg_additional_methods, int len_arg_additional_methods, PaymentRequestedInfo arg_saved_info, PaymentSavedCredentials *arg_saved_credentials, int len_arg_saved_credentials, User *arg_users, int len_arg_users);
tlo_t * tl_payments_paymentFormStars(long arg_form_id, long arg_bot_id, const char * arg_title, const char * arg_description, WebDocument arg_photo, Invoice arg_invoice, User *arg_users, int len_arg_users);
tlo_t * tl_payments_paymentFormStarGift(long arg_form_id, Invoice arg_invoice);
tlo_t * tl_payments_validatedRequestedInfo(const char * arg_id, ShippingOption *arg_shipping_options, int len_arg_shipping_options);
tlo_t * tl_payments_paymentResult(Updates arg_updates);
tlo_t * tl_payments_paymentVerificationNeeded(const char * arg_url);
tlo_t * tl_payments_paymentReceipt(int arg_date, long arg_bot_id, long arg_provider_id, const char * arg_title, const char * arg_description, WebDocument arg_photo, Invoice arg_invoice, PaymentRequestedInfo arg_info, ShippingOption arg_shipping, long arg_tip_amount, const char * arg_currency, long arg_total_amount, const char * arg_credentials_title, User *arg_users, int len_arg_users);
tlo_t * tl_payments_paymentReceiptStars(int arg_date, long arg_bot_id, const char * arg_title, const char * arg_description, WebDocument arg_photo, Invoice arg_invoice, const char * arg_currency, long arg_total_amount, const char * arg_transaction_id, User *arg_users, int len_arg_users);
tlo_t * tl_payments_savedInfo(bool arg_has_saved_credentials, PaymentRequestedInfo arg_saved_info);
tlo_t * tl_inputPaymentCredentialsSaved(const char * arg_id, unsigned char * arg_tmp_password, int len_arg_tmp_password);
tlo_t * tl_inputPaymentCredentials(bool arg_save, DataJSON arg_data);
tlo_t * tl_inputPaymentCredentialsApplePay(DataJSON arg_payment_data);
tlo_t * tl_inputPaymentCredentialsGooglePay(DataJSON arg_payment_token);
tlo_t * tl_account_tmpPassword(unsigned char * arg_tmp_password, int len_arg_tmp_password, int arg_valid_until);
tlo_t * tl_shippingOption(const char * arg_id, const char * arg_title, LabeledPrice *arg_prices, int len_arg_prices);
tlo_t * tl_inputStickerSetItem(InputDocument arg_document, const char * arg_emoji, MaskCoords arg_mask_coords, const char * arg_keywords);
tlo_t * tl_inputPhoneCall(long arg_id, long arg_access_hash);
tlo_t * tl_phoneCallEmpty(long arg_id);
tlo_t * tl_phoneCallWaiting(bool arg_video, long arg_id, long arg_access_hash, int arg_date, long arg_admin_id, long arg_participant_id, PhoneCallProtocol arg_protocol, int arg_receive_date);
tlo_t * tl_phoneCallRequested(bool arg_video, long arg_id, long arg_access_hash, int arg_date, long arg_admin_id, long arg_participant_id, unsigned char * arg_g_a_hash, int len_arg_g_a_hash, PhoneCallProtocol arg_protocol);
tlo_t * tl_phoneCallAccepted(bool arg_video, long arg_id, long arg_access_hash, int arg_date, long arg_admin_id, long arg_participant_id, unsigned char * arg_g_b, int len_arg_g_b, PhoneCallProtocol arg_protocol);
tlo_t * tl_phoneCall(bool arg_p2p_allowed, bool arg_video, long arg_id, long arg_access_hash, int arg_date, long arg_admin_id, long arg_participant_id, unsigned char * arg_g_a_or_b, int len_arg_g_a_or_b, long arg_key_fingerprint, PhoneCallProtocol arg_protocol, PhoneConnection *arg_connections, int len_arg_connections, int arg_start_date, DataJSON arg_custom_parameters);
tlo_t * tl_phoneCallDiscarded(bool arg_need_rating, bool arg_need_debug, bool arg_video, long arg_id, PhoneCallDiscardReason arg_reason, int arg_duration);
tlo_t * tl_phoneConnection(bool arg_tcp, long arg_id, const char * arg_ip, const char * arg_ipv6, int arg_port, unsigned char * arg_peer_tag, int len_arg_peer_tag);
tlo_t * tl_phoneConnectionWebrtc(bool arg_turn, bool arg_stun, long arg_id, const char * arg_ip, const char * arg_ipv6, int arg_port, const char * arg_username, const char * arg_password);
tlo_t * tl_phoneCallProtocol(bool arg_udp_p2p, bool arg_udp_reflector, int arg_min_layer, int arg_max_layer, const char * *arg_library_versions, int len_arg_library_versions);
tlo_t * tl_phone_phoneCall(PhoneCall arg_phone_call, User *arg_users, int len_arg_users);
tlo_t * tl_upload_cdnFileReuploadNeeded(unsigned char * arg_request_token, int len_arg_request_token);
tlo_t * tl_upload_cdnFile(unsigned char * arg_bytes, int len_arg_bytes);
tlo_t * tl_cdnPublicKey(int arg_dc_id, const char * arg_public_key);
tlo_t * tl_cdnConfig(CdnPublicKey *arg_public_keys, int len_arg_public_keys);
tlo_t * tl_langPackString(const char * arg_key, const char * arg_value);
tlo_t * tl_langPackStringPluralized(const char * arg_key, const char * arg_zero_value, const char * arg_one_value, const char * arg_two_value, const char * arg_few_value, const char * arg_many_value, const char * arg_other_value);
tlo_t * tl_langPackStringDeleted(const char * arg_key);
tlo_t * tl_langPackDifference(const char * arg_lang_code, int arg_from_version, int arg_version, LangPackString *arg_strings, int len_arg_strings);
tlo_t * tl_langPackLanguage(bool arg_official, bool arg_rtl, bool arg_beta, const char * arg_name, const char * arg_native_name, const char * arg_lang_code, const char * arg_base_lang_code, const char * arg_plural_code, int arg_strings_count, int arg_translated_count, const char * arg_translations_url);
tlo_t * tl_channelAdminLogEventActionChangeTitle(const char * arg_prev_value, const char * arg_new_value);
tlo_t * tl_channelAdminLogEventActionChangeAbout(const char * arg_prev_value, const char * arg_new_value);
tlo_t * tl_channelAdminLogEventActionChangeUsername(const char * arg_prev_value, const char * arg_new_value);
tlo_t * tl_channelAdminLogEventActionChangePhoto(Photo arg_prev_photo, Photo arg_new_photo);
tlo_t * tl_channelAdminLogEventActionToggleInvites(Bool arg_new_value);
tlo_t * tl_channelAdminLogEventActionToggleSignatures(Bool arg_new_value);
tlo_t * tl_channelAdminLogEventActionUpdatePinned(Message arg_message);
tlo_t * tl_channelAdminLogEventActionEditMessage(Message arg_prev_message, Message arg_new_message);
tlo_t * tl_channelAdminLogEventActionDeleteMessage(Message arg_message);
tlo_t * tl_channelAdminLogEventActionParticipantJoin();
tlo_t * tl_channelAdminLogEventActionParticipantLeave();
tlo_t * tl_channelAdminLogEventActionParticipantInvite(ChannelParticipant arg_participant);
tlo_t * tl_channelAdminLogEventActionParticipantToggleBan(ChannelParticipant arg_prev_participant, ChannelParticipant arg_new_participant);
tlo_t * tl_channelAdminLogEventActionParticipantToggleAdmin(ChannelParticipant arg_prev_participant, ChannelParticipant arg_new_participant);
tlo_t * tl_channelAdminLogEventActionChangeStickerSet(InputStickerSet arg_prev_stickerset, InputStickerSet arg_new_stickerset);
tlo_t * tl_channelAdminLogEventActionTogglePreHistoryHidden(Bool arg_new_value);
tlo_t * tl_channelAdminLogEventActionDefaultBannedRights(ChatBannedRights arg_prev_banned_rights, ChatBannedRights arg_new_banned_rights);
tlo_t * tl_channelAdminLogEventActionStopPoll(Message arg_message);
tlo_t * tl_channelAdminLogEventActionChangeLinkedChat(long arg_prev_value, long arg_new_value);
tlo_t * tl_channelAdminLogEventActionChangeLocation(ChannelLocation arg_prev_value, ChannelLocation arg_new_value);
tlo_t * tl_channelAdminLogEventActionToggleSlowMode(int arg_prev_value, int arg_new_value);
tlo_t * tl_channelAdminLogEventActionStartGroupCall(InputGroupCall arg_call);
tlo_t * tl_channelAdminLogEventActionDiscardGroupCall(InputGroupCall arg_call);
tlo_t * tl_channelAdminLogEventActionParticipantMute(GroupCallParticipant arg_participant);
tlo_t * tl_channelAdminLogEventActionParticipantUnmute(GroupCallParticipant arg_participant);
tlo_t * tl_channelAdminLogEventActionToggleGroupCallSetting(Bool arg_join_muted);
tlo_t * tl_channelAdminLogEventActionParticipantJoinByInvite(bool arg_via_chatlist, ExportedChatInvite arg_invite);
tlo_t * tl_channelAdminLogEventActionExportedInviteDelete(ExportedChatInvite arg_invite);
tlo_t * tl_channelAdminLogEventActionExportedInviteRevoke(ExportedChatInvite arg_invite);
tlo_t * tl_channelAdminLogEventActionExportedInviteEdit(ExportedChatInvite arg_prev_invite, ExportedChatInvite arg_new_invite);
tlo_t * tl_channelAdminLogEventActionParticipantVolume(GroupCallParticipant arg_participant);
tlo_t * tl_channelAdminLogEventActionChangeHistoryTTL(int arg_prev_value, int arg_new_value);
tlo_t * tl_channelAdminLogEventActionParticipantJoinByRequest(ExportedChatInvite arg_invite, long arg_approved_by);
tlo_t * tl_channelAdminLogEventActionToggleNoForwards(Bool arg_new_value);
tlo_t * tl_channelAdminLogEventActionSendMessage(Message arg_message);
tlo_t * tl_channelAdminLogEventActionChangeAvailableReactions(ChatReactions arg_prev_value, ChatReactions arg_new_value);
tlo_t * tl_channelAdminLogEventActionChangeUsernames(const char * *arg_prev_value, int len_arg_prev_value, const char * *arg_new_value, int len_arg_new_value);
tlo_t * tl_channelAdminLogEventActionToggleForum(Bool arg_new_value);
tlo_t * tl_channelAdminLogEventActionCreateTopic(ForumTopic arg_topic);
tlo_t * tl_channelAdminLogEventActionEditTopic(ForumTopic arg_prev_topic, ForumTopic arg_new_topic);
tlo_t * tl_channelAdminLogEventActionDeleteTopic(ForumTopic arg_topic);
tlo_t * tl_channelAdminLogEventActionPinTopic(ForumTopic arg_prev_topic, ForumTopic arg_new_topic);
tlo_t * tl_channelAdminLogEventActionToggleAntiSpam(Bool arg_new_value);
tlo_t * tl_channelAdminLogEventActionChangePeerColor(PeerColor arg_prev_value, PeerColor arg_new_value);
tlo_t * tl_channelAdminLogEventActionChangeProfilePeerColor(PeerColor arg_prev_value, PeerColor arg_new_value);
tlo_t * tl_channelAdminLogEventActionChangeWallpaper(WallPaper arg_prev_value, WallPaper arg_new_value);
tlo_t * tl_channelAdminLogEventActionChangeEmojiStatus(EmojiStatus arg_prev_value, EmojiStatus arg_new_value);
tlo_t * tl_channelAdminLogEventActionChangeEmojiStickerSet(InputStickerSet arg_prev_stickerset, InputStickerSet arg_new_stickerset);
tlo_t * tl_channelAdminLogEventActionToggleSignatureProfiles(Bool arg_new_value);
tlo_t * tl_channelAdminLogEventActionParticipantSubExtend(ChannelParticipant arg_prev_participant, ChannelParticipant arg_new_participant);
tlo_t * tl_channelAdminLogEvent(long arg_id, int arg_date, long arg_user_id, ChannelAdminLogEventAction arg_action);
tlo_t * tl_channels_adminLogResults(ChannelAdminLogEvent *arg_events, int len_arg_events, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_channelAdminLogEventsFilter(bool arg_join, bool arg_leave, bool arg_invite, bool arg_ban, bool arg_unban, bool arg_kick, bool arg_unkick, bool arg_promote, bool arg_demote, bool arg_info, bool arg_settings, bool arg_pinned, bool arg_edit, bool arg_delete, bool arg_group_call, bool arg_invites, bool arg_send, bool arg_forums, bool arg_sub_extend);
tlo_t * tl_popularContact(long arg_client_id, int arg_importers);
tlo_t * tl_messages_favedStickersNotModified();
tlo_t * tl_messages_favedStickers(long arg_hash, StickerPack *arg_packs, int len_arg_packs, Document *arg_stickers, int len_arg_stickers);
tlo_t * tl_recentMeUrlUnknown(const char * arg_url);
tlo_t * tl_recentMeUrlUser(const char * arg_url, long arg_user_id);
tlo_t * tl_recentMeUrlChat(const char * arg_url, long arg_chat_id);
tlo_t * tl_recentMeUrlChatInvite(const char * arg_url, ChatInvite arg_chat_invite);
tlo_t * tl_recentMeUrlStickerSet(const char * arg_url, StickerSetCovered arg_set);
tlo_t * tl_help_recentMeUrls(RecentMeUrl *arg_urls, int len_arg_urls, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_inputSingleMedia(InputMedia arg_media, long arg_random_id, const char * arg_message, MessageEntity *arg_entities, int len_arg_entities);
tlo_t * tl_webAuthorization(long arg_hash, long arg_bot_id, const char * arg_domain, const char * arg_browser, const char * arg_platform, int arg_date_created, int arg_date_active, const char * arg_ip, const char * arg_region);
tlo_t * tl_account_webAuthorizations(WebAuthorization *arg_authorizations, int len_arg_authorizations, User *arg_users, int len_arg_users);
tlo_t * tl_inputMessageID(int arg_id);
tlo_t * tl_inputMessageReplyTo(int arg_id);
tlo_t * tl_inputMessagePinned();
tlo_t * tl_inputMessageCallbackQuery(int arg_id, long arg_query_id);
tlo_t * tl_inputDialogPeer(InputPeer arg_peer);
tlo_t * tl_inputDialogPeerFolder(int arg_folder_id);
tlo_t * tl_dialogPeer(Peer arg_peer);
tlo_t * tl_dialogPeerFolder(int arg_folder_id);
tlo_t * tl_messages_foundStickerSetsNotModified();
tlo_t * tl_messages_foundStickerSets(long arg_hash, StickerSetCovered *arg_sets, int len_arg_sets);
tlo_t * tl_fileHash(long arg_offset, int arg_limit, unsigned char * arg_hash, int len_arg_hash);
tlo_t * tl_inputClientProxy(const char * arg_address, int arg_port);
tlo_t * tl_help_termsOfServiceUpdateEmpty(int arg_expires);
tlo_t * tl_help_termsOfServiceUpdate(int arg_expires, help_TermsOfService arg_terms_of_service);
tlo_t * tl_inputSecureFileUploaded(long arg_id, int arg_parts, const char * arg_md5_checksum, unsigned char * arg_file_hash, int len_arg_file_hash, unsigned char * arg_secret, int len_arg_secret);
tlo_t * tl_inputSecureFile(long arg_id, long arg_access_hash);
tlo_t * tl_secureFileEmpty();
tlo_t * tl_secureFile(long arg_id, long arg_access_hash, long arg_size, int arg_dc_id, int arg_date, unsigned char * arg_file_hash, int len_arg_file_hash, unsigned char * arg_secret, int len_arg_secret);
tlo_t * tl_secureData(unsigned char * arg_data, int len_arg_data, unsigned char * arg_data_hash, int len_arg_data_hash, unsigned char * arg_secret, int len_arg_secret);
tlo_t * tl_securePlainPhone(const char * arg_phone);
tlo_t * tl_securePlainEmail(const char * arg_email);
tlo_t * tl_secureValueTypePersonalDetails();
tlo_t * tl_secureValueTypePassport();
tlo_t * tl_secureValueTypeDriverLicense();
tlo_t * tl_secureValueTypeIdentityCard();
tlo_t * tl_secureValueTypeInternalPassport();
tlo_t * tl_secureValueTypeAddress();
tlo_t * tl_secureValueTypeUtilityBill();
tlo_t * tl_secureValueTypeBankStatement();
tlo_t * tl_secureValueTypeRentalAgreement();
tlo_t * tl_secureValueTypePassportRegistration();
tlo_t * tl_secureValueTypeTemporaryRegistration();
tlo_t * tl_secureValueTypePhone();
tlo_t * tl_secureValueTypeEmail();
tlo_t * tl_secureValue(SecureValueType arg_type, SecureData arg_data, SecureFile arg_front_side, SecureFile arg_reverse_side, SecureFile arg_selfie, SecureFile *arg_translation, int len_arg_translation, SecureFile *arg_files, int len_arg_files, SecurePlainData arg_plain_data, unsigned char * arg_hash, int len_arg_hash);
tlo_t * tl_inputSecureValue(SecureValueType arg_type, SecureData arg_data, InputSecureFile arg_front_side, InputSecureFile arg_reverse_side, InputSecureFile arg_selfie, InputSecureFile *arg_translation, int len_arg_translation, InputSecureFile *arg_files, int len_arg_files, SecurePlainData arg_plain_data);
tlo_t * tl_secureValueHash(SecureValueType arg_type, unsigned char * arg_hash, int len_arg_hash);
tlo_t * tl_secureValueErrorData(SecureValueType arg_type, unsigned char * arg_data_hash, int len_arg_data_hash, const char * arg_field, const char * arg_text);
tlo_t * tl_secureValueErrorFrontSide(SecureValueType arg_type, unsigned char * arg_file_hash, int len_arg_file_hash, const char * arg_text);
tlo_t * tl_secureValueErrorReverseSide(SecureValueType arg_type, unsigned char * arg_file_hash, int len_arg_file_hash, const char * arg_text);
tlo_t * tl_secureValueErrorSelfie(SecureValueType arg_type, unsigned char * arg_file_hash, int len_arg_file_hash, const char * arg_text);
tlo_t * tl_secureValueErrorFile(SecureValueType arg_type, unsigned char * arg_file_hash, int len_arg_file_hash, const char * arg_text);
tlo_t * tl_secureValueErrorFiles(SecureValueType arg_type, unsigned char * *arg_file_hash, int len_arg_file_hash, const char * arg_text);
tlo_t * tl_secureValueError(SecureValueType arg_type, unsigned char * arg_hash, int len_arg_hash, const char * arg_text);
tlo_t * tl_secureValueErrorTranslationFile(SecureValueType arg_type, unsigned char * arg_file_hash, int len_arg_file_hash, const char * arg_text);
tlo_t * tl_secureValueErrorTranslationFiles(SecureValueType arg_type, unsigned char * *arg_file_hash, int len_arg_file_hash, const char * arg_text);
tlo_t * tl_secureCredentialsEncrypted(unsigned char * arg_data, int len_arg_data, unsigned char * arg_hash, int len_arg_hash, unsigned char * arg_secret, int len_arg_secret);
tlo_t * tl_account_authorizationForm(SecureRequiredType *arg_required_types, int len_arg_required_types, SecureValue *arg_values, int len_arg_values, SecureValueError *arg_errors, int len_arg_errors, User *arg_users, int len_arg_users, const char * arg_privacy_policy_url);
tlo_t * tl_account_sentEmailCode(const char * arg_email_pattern, int arg_length);
tlo_t * tl_help_deepLinkInfoEmpty();
tlo_t * tl_help_deepLinkInfo(bool arg_update_app, const char * arg_message, MessageEntity *arg_entities, int len_arg_entities);
tlo_t * tl_savedPhoneContact(const char * arg_phone, const char * arg_first_name, const char * arg_last_name, int arg_date);
tlo_t * tl_account_takeout(long arg_id);
tlo_t * tl_passwordKdfAlgoUnknown();
tlo_t * tl_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow(unsigned char * arg_salt1, int len_arg_salt1, unsigned char * arg_salt2, int len_arg_salt2, int arg_g, unsigned char * arg_p, int len_arg_p);
tlo_t * tl_securePasswordKdfAlgoUnknown();
tlo_t * tl_securePasswordKdfAlgoPBKDF2HMACSHA512iter100000(unsigned char * arg_salt, int len_arg_salt);
tlo_t * tl_securePasswordKdfAlgoSHA512(unsigned char * arg_salt, int len_arg_salt);
tlo_t * tl_secureSecretSettings(SecurePasswordKdfAlgo arg_secure_algo, unsigned char * arg_secure_secret, int len_arg_secure_secret, long arg_secure_secret_id);
tlo_t * tl_inputCheckPasswordEmpty();
tlo_t * tl_inputCheckPasswordSRP(long arg_srp_id, unsigned char * arg_A, int len_arg_A, unsigned char * arg_M1, int len_arg_M1);
tlo_t * tl_secureRequiredType(bool arg_native_names, bool arg_selfie_required, bool arg_translation_required, SecureValueType arg_type);
tlo_t * tl_secureRequiredTypeOneOf(SecureRequiredType *arg_types, int len_arg_types);
tlo_t * tl_help_passportConfigNotModified();
tlo_t * tl_help_passportConfig(int arg_hash, DataJSON arg_countries_langs);
tlo_t * tl_inputAppEvent(double arg_time, const char * arg_type, long arg_peer, JSONValue arg_data);
tlo_t * tl_jsonObjectValue(const char * arg_key, JSONValue arg_value);
tlo_t * tl_jsonNull();
tlo_t * tl_jsonBool(Bool arg_value);
tlo_t * tl_jsonNumber(double arg_value);
tlo_t * tl_jsonString(const char * arg_value);
tlo_t * tl_jsonArray(JSONValue *arg_value, int len_arg_value);
tlo_t * tl_jsonObject(JSONObjectValue *arg_value, int len_arg_value);
tlo_t * tl_pageTableCell(bool arg_header, bool arg_align_center, bool arg_align_right, bool arg_valign_middle, bool arg_valign_bottom, RichText arg_text, int arg_colspan, int arg_rowspan);
tlo_t * tl_pageTableRow(PageTableCell *arg_cells, int len_arg_cells);
tlo_t * tl_pageCaption(RichText arg_text, RichText arg_credit);
tlo_t * tl_pageListItemText(RichText arg_text);
tlo_t * tl_pageListItemBlocks(PageBlock *arg_blocks, int len_arg_blocks);
tlo_t * tl_pageListOrderedItemText(const char * arg_num, RichText arg_text);
tlo_t * tl_pageListOrderedItemBlocks(const char * arg_num, PageBlock *arg_blocks, int len_arg_blocks);
tlo_t * tl_pageRelatedArticle(const char * arg_url, long arg_webpage_id, const char * arg_title, const char * arg_description, long arg_photo_id, const char * arg_author, int arg_published_date);
tlo_t * tl_page(bool arg_part, bool arg_rtl, bool arg_v2, const char * arg_url, PageBlock *arg_blocks, int len_arg_blocks, Photo *arg_photos, int len_arg_photos, Document *arg_documents, int len_arg_documents, int arg_views);
tlo_t * tl_help_supportName(const char * arg_name);
tlo_t * tl_help_userInfoEmpty();
tlo_t * tl_help_userInfo(const char * arg_message, MessageEntity *arg_entities, int len_arg_entities, const char * arg_author, int arg_date);
tlo_t * tl_pollAnswer(TextWithEntities arg_text, unsigned char * arg_option, int len_arg_option);
tlo_t * tl_poll(long arg_id, bool arg_closed, bool arg_public_voters, bool arg_multiple_choice, bool arg_quiz, TextWithEntities arg_question, PollAnswer *arg_answers, int len_arg_answers, int arg_close_period, int arg_close_date);
tlo_t * tl_pollAnswerVoters(bool arg_chosen, bool arg_correct, unsigned char * arg_option, int len_arg_option, int arg_voters);
tlo_t * tl_pollResults(bool arg_min, PollAnswerVoters *arg_results, int len_arg_results, int arg_total_voters, Peer *arg_recent_voters, int len_arg_recent_voters, const char * arg_solution, MessageEntity *arg_solution_entities, int len_arg_solution_entities);
tlo_t * tl_chatOnlines(int arg_onlines);
tlo_t * tl_statsURL(const char * arg_url);
tlo_t * tl_chatAdminRights(bool arg_change_info, bool arg_post_messages, bool arg_edit_messages, bool arg_delete_messages, bool arg_ban_users, bool arg_invite_users, bool arg_pin_messages, bool arg_add_admins, bool arg_anonymous, bool arg_manage_call, bool arg_other, bool arg_manage_topics, bool arg_post_stories, bool arg_edit_stories, bool arg_delete_stories);
tlo_t * tl_chatBannedRights(bool arg_view_messages, bool arg_send_messages, bool arg_send_media, bool arg_send_stickers, bool arg_send_gifs, bool arg_send_games, bool arg_send_inline, bool arg_embed_links, bool arg_send_polls, bool arg_change_info, bool arg_invite_users, bool arg_pin_messages, bool arg_manage_topics, bool arg_send_photos, bool arg_send_videos, bool arg_send_roundvideos, bool arg_send_audios, bool arg_send_voices, bool arg_send_docs, bool arg_send_plain, int arg_until_date);
tlo_t * tl_inputWallPaper(long arg_id, long arg_access_hash);
tlo_t * tl_inputWallPaperSlug(const char * arg_slug);
tlo_t * tl_inputWallPaperNoFile(long arg_id);
tlo_t * tl_account_wallPapersNotModified();
tlo_t * tl_account_wallPapers(long arg_hash, WallPaper *arg_wallpapers, int len_arg_wallpapers);
tlo_t * tl_codeSettings(bool arg_allow_flashcall, bool arg_current_number, bool arg_allow_app_hash, bool arg_allow_missed_call, bool arg_allow_firebase, bool arg_unknown_number, unsigned char * *arg_logout_tokens, int len_arg_logout_tokens, const char * arg_token, Bool arg_app_sandbox);
tlo_t * tl_wallPaperSettings(bool arg_blur, bool arg_motion, int arg_background_color, int arg_second_background_color, int arg_third_background_color, int arg_fourth_background_color, int arg_intensity, int arg_rotation, const char * arg_emoticon);
tlo_t * tl_autoDownloadSettings(bool arg_disabled, bool arg_video_preload_large, bool arg_audio_preload_next, bool arg_phonecalls_less_data, bool arg_stories_preload, int arg_photo_size_max, long arg_video_size_max, long arg_file_size_max, int arg_video_upload_maxbitrate, int arg_small_queue_active_operations_max, int arg_large_queue_active_operations_max);
tlo_t * tl_account_autoDownloadSettings(AutoDownloadSettings arg_low, AutoDownloadSettings arg_medium, AutoDownloadSettings arg_high);
tlo_t * tl_emojiKeyword(const char * arg_keyword, const char * *arg_emoticons, int len_arg_emoticons);
tlo_t * tl_emojiKeywordDeleted(const char * arg_keyword, const char * *arg_emoticons, int len_arg_emoticons);
tlo_t * tl_emojiKeywordsDifference(const char * arg_lang_code, int arg_from_version, int arg_version, EmojiKeyword *arg_keywords, int len_arg_keywords);
tlo_t * tl_emojiURL(const char * arg_url);
tlo_t * tl_emojiLanguage(const char * arg_lang_code);
tlo_t * tl_folder(bool arg_autofill_new_broadcasts, bool arg_autofill_public_groups, bool arg_autofill_new_correspondents, int arg_id, const char * arg_title, ChatPhoto arg_photo);
tlo_t * tl_inputFolderPeer(InputPeer arg_peer, int arg_folder_id);
tlo_t * tl_folderPeer(Peer arg_peer, int arg_folder_id);
tlo_t * tl_messages_searchCounter(bool arg_inexact, MessagesFilter arg_filter, int arg_count);
tlo_t * tl_urlAuthResultRequest(bool arg_request_write_access, User arg_bot, const char * arg_domain);
tlo_t * tl_urlAuthResultAccepted(const char * arg_url);
tlo_t * tl_urlAuthResultDefault();
tlo_t * tl_channelLocationEmpty();
tlo_t * tl_channelLocation(GeoPoint arg_geo_point, const char * arg_address);
tlo_t * tl_peerLocated(Peer arg_peer, int arg_expires, int arg_distance);
tlo_t * tl_peerSelfLocated(int arg_expires);
tlo_t * tl_restrictionReason(const char * arg_platform, const char * arg_reason, const char * arg_text);
tlo_t * tl_inputTheme(long arg_id, long arg_access_hash);
tlo_t * tl_inputThemeSlug(const char * arg_slug);
tlo_t * tl_theme(bool arg_creator, bool arg_default, bool arg_for_chat, long arg_id, long arg_access_hash, const char * arg_slug, const char * arg_title, Document arg_document, ThemeSettings *arg_settings, int len_arg_settings, const char * arg_emoticon, int arg_installs_count);
tlo_t * tl_account_themesNotModified();
tlo_t * tl_account_themes(long arg_hash, Theme *arg_themes, int len_arg_themes);
tlo_t * tl_auth_loginToken(int arg_expires, unsigned char * arg_token, int len_arg_token);
tlo_t * tl_auth_loginTokenMigrateTo(int arg_dc_id, unsigned char * arg_token, int len_arg_token);
tlo_t * tl_auth_loginTokenSuccess(auth_Authorization arg_authorization);
tlo_t * tl_account_contentSettings(bool arg_sensitive_enabled, bool arg_sensitive_can_change);
tlo_t * tl_messages_inactiveChats(int *arg_dates, int len_arg_dates, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_baseThemeClassic();
tlo_t * tl_baseThemeDay();
tlo_t * tl_baseThemeNight();
tlo_t * tl_baseThemeTinted();
tlo_t * tl_baseThemeArctic();
tlo_t * tl_inputThemeSettings(bool arg_message_colors_animated, BaseTheme arg_base_theme, int arg_accent_color, int arg_outbox_accent_color, int *arg_message_colors, int len_arg_message_colors, InputWallPaper arg_wallpaper, WallPaperSettings arg_wallpaper_settings);
tlo_t * tl_themeSettings(bool arg_message_colors_animated, BaseTheme arg_base_theme, int arg_accent_color, int arg_outbox_accent_color, int *arg_message_colors, int len_arg_message_colors, WallPaper arg_wallpaper);
tlo_t * tl_webPageAttributeTheme(Document *arg_documents, int len_arg_documents, ThemeSettings arg_settings);
tlo_t * tl_webPageAttributeStory(Peer arg_peer, int arg_id, StoryItem arg_story);
tlo_t * tl_webPageAttributeStickerSet(bool arg_emojis, bool arg_text_color, Document *arg_stickers, int len_arg_stickers);
tlo_t * tl_messages_votesList(int arg_count, MessagePeerVote *arg_votes, int len_arg_votes, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users, const char * arg_next_offset);
tlo_t * tl_bankCardOpenUrl(const char * arg_url, const char * arg_name);
tlo_t * tl_payments_bankCardData(const char * arg_title, BankCardOpenUrl *arg_open_urls, int len_arg_open_urls);
tlo_t * tl_dialogFilter(bool arg_contacts, bool arg_non_contacts, bool arg_groups, bool arg_broadcasts, bool arg_bots, bool arg_exclude_muted, bool arg_exclude_read, bool arg_exclude_archived, int arg_id, const char * arg_title, const char * arg_emoticon, int arg_color, InputPeer *arg_pinned_peers, int len_arg_pinned_peers, InputPeer *arg_include_peers, int len_arg_include_peers, InputPeer *arg_exclude_peers, int len_arg_exclude_peers);
tlo_t * tl_dialogFilterDefault();
tlo_t * tl_dialogFilterChatlist(bool arg_has_my_invites, int arg_id, const char * arg_title, const char * arg_emoticon, int arg_color, InputPeer *arg_pinned_peers, int len_arg_pinned_peers, InputPeer *arg_include_peers, int len_arg_include_peers);
tlo_t * tl_dialogFilterSuggested(DialogFilter arg_filter, const char * arg_description);
tlo_t * tl_statsDateRangeDays(int arg_min_date, int arg_max_date);
tlo_t * tl_statsAbsValueAndPrev(double arg_current, double arg_previous);
tlo_t * tl_statsPercentValue(double arg_part, double arg_total);
tlo_t * tl_statsGraphAsync(const char * arg_token);
tlo_t * tl_statsGraphError(const char * arg_error);
tlo_t * tl_statsGraph(DataJSON arg_json, const char * arg_zoom_token);
tlo_t * tl_stats_broadcastStats(StatsDateRangeDays arg_period, StatsAbsValueAndPrev arg_followers, StatsAbsValueAndPrev arg_views_per_post, StatsAbsValueAndPrev arg_shares_per_post, StatsAbsValueAndPrev arg_reactions_per_post, StatsAbsValueAndPrev arg_views_per_story, StatsAbsValueAndPrev arg_shares_per_story, StatsAbsValueAndPrev arg_reactions_per_story, StatsPercentValue arg_enabled_notifications, StatsGraph arg_growth_graph, StatsGraph arg_followers_graph, StatsGraph arg_mute_graph, StatsGraph arg_top_hours_graph, StatsGraph arg_interactions_graph, StatsGraph arg_iv_interactions_graph, StatsGraph arg_views_by_source_graph, StatsGraph arg_new_followers_by_source_graph, StatsGraph arg_languages_graph, StatsGraph arg_reactions_by_emotion_graph, StatsGraph arg_story_interactions_graph, StatsGraph arg_story_reactions_by_emotion_graph, PostInteractionCounters *arg_recent_posts_interactions, int len_arg_recent_posts_interactions);
tlo_t * tl_help_promoDataEmpty(int arg_expires);
tlo_t * tl_help_promoData(bool arg_proxy, int arg_expires, Peer arg_peer, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users, const char * arg_psa_type, const char * arg_psa_message);
tlo_t * tl_videoSize(const char * arg_type, int arg_w, int arg_h, int arg_size, double arg_video_start_ts);
tlo_t * tl_videoSizeEmojiMarkup(long arg_emoji_id, int *arg_background_colors, int len_arg_background_colors);
tlo_t * tl_videoSizeStickerMarkup(InputStickerSet arg_stickerset, long arg_sticker_id, int *arg_background_colors, int len_arg_background_colors);
tlo_t * tl_statsGroupTopPoster(long arg_user_id, int arg_messages, int arg_avg_chars);
tlo_t * tl_statsGroupTopAdmin(long arg_user_id, int arg_deleted, int arg_kicked, int arg_banned);
tlo_t * tl_statsGroupTopInviter(long arg_user_id, int arg_invitations);
tlo_t * tl_stats_megagroupStats(StatsDateRangeDays arg_period, StatsAbsValueAndPrev arg_members, StatsAbsValueAndPrev arg_messages, StatsAbsValueAndPrev arg_viewers, StatsAbsValueAndPrev arg_posters, StatsGraph arg_growth_graph, StatsGraph arg_members_graph, StatsGraph arg_new_members_by_source_graph, StatsGraph arg_languages_graph, StatsGraph arg_messages_graph, StatsGraph arg_actions_graph, StatsGraph arg_top_hours_graph, StatsGraph arg_weekdays_graph, StatsGroupTopPoster *arg_top_posters, int len_arg_top_posters, StatsGroupTopAdmin *arg_top_admins, int len_arg_top_admins, StatsGroupTopInviter *arg_top_inviters, int len_arg_top_inviters, User *arg_users, int len_arg_users);
tlo_t * tl_globalPrivacySettings(bool arg_archive_and_mute_new_noncontact_peers, bool arg_keep_archived_unmuted, bool arg_keep_archived_folders, bool arg_hide_read_marks, bool arg_new_noncontact_peers_require_premium);
tlo_t * tl_help_countryCode(const char * arg_country_code, const char * *arg_prefixes, int len_arg_prefixes, const char * *arg_patterns, int len_arg_patterns);
tlo_t * tl_help_country(bool arg_hidden, const char * arg_iso2, const char * arg_default_name, const char * arg_name, help_CountryCode *arg_country_codes, int len_arg_country_codes);
tlo_t * tl_help_countriesListNotModified();
tlo_t * tl_help_countriesList(help_Country *arg_countries, int len_arg_countries, int arg_hash);
tlo_t * tl_messageViews(int arg_views, int arg_forwards, MessageReplies arg_replies);
tlo_t * tl_messages_messageViews(MessageViews *arg_views, int len_arg_views, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_messages_discussionMessage(Message *arg_messages, int len_arg_messages, int arg_max_id, int arg_read_inbox_max_id, int arg_read_outbox_max_id, int arg_unread_count, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_messageReplyHeader(bool arg_reply_to_scheduled, bool arg_forum_topic, bool arg_quote, int arg_reply_to_msg_id, Peer arg_reply_to_peer_id, MessageFwdHeader arg_reply_from, MessageMedia arg_reply_media, int arg_reply_to_top_id, const char * arg_quote_text, MessageEntity *arg_quote_entities, int len_arg_quote_entities, int arg_quote_offset);
tlo_t * tl_messageReplyStoryHeader(Peer arg_peer, int arg_story_id);
tlo_t * tl_messageReplies(bool arg_comments, int arg_replies, int arg_replies_pts, Peer *arg_recent_repliers, int len_arg_recent_repliers, long arg_channel_id, int arg_max_id, int arg_read_max_id);
tlo_t * tl_peerBlocked(Peer arg_peer_id, int arg_date);
tlo_t * tl_stats_messageStats(StatsGraph arg_views_graph, StatsGraph arg_reactions_by_emotion_graph);
tlo_t * tl_groupCallDiscarded(long arg_id, long arg_access_hash, int arg_duration);
tlo_t * tl_groupCall(bool arg_join_muted, bool arg_can_change_join_muted, bool arg_join_date_asc, bool arg_schedule_start_subscribed, bool arg_can_start_video, bool arg_record_video_active, bool arg_rtmp_stream, bool arg_listeners_hidden, long arg_id, long arg_access_hash, int arg_participants_count, const char * arg_title, int arg_stream_dc_id, int arg_record_start_date, int arg_schedule_date, int arg_unmuted_video_count, int arg_unmuted_video_limit, int arg_version);
tlo_t * tl_inputGroupCall(long arg_id, long arg_access_hash);
tlo_t * tl_groupCallParticipant(bool arg_muted, bool arg_left, bool arg_can_self_unmute, bool arg_just_joined, bool arg_versioned, bool arg_min, bool arg_muted_by_you, bool arg_volume_by_admin, bool arg_self, bool arg_video_joined, Peer arg_peer, int arg_date, int arg_active_date, int arg_source, int arg_volume, const char * arg_about, long arg_raise_hand_rating, GroupCallParticipantVideo arg_video, GroupCallParticipantVideo arg_presentation);
tlo_t * tl_phone_groupCall(GroupCall arg_call, GroupCallParticipant *arg_participants, int len_arg_participants, const char * arg_participants_next_offset, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_phone_groupParticipants(int arg_count, GroupCallParticipant *arg_participants, int len_arg_participants, const char * arg_next_offset, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users, int arg_version);
tlo_t * tl_inlineQueryPeerTypeSameBotPM();
tlo_t * tl_inlineQueryPeerTypePM();
tlo_t * tl_inlineQueryPeerTypeChat();
tlo_t * tl_inlineQueryPeerTypeMegagroup();
tlo_t * tl_inlineQueryPeerTypeBroadcast();
tlo_t * tl_inlineQueryPeerTypeBotPM();
tlo_t * tl_messages_historyImport(long arg_id);
tlo_t * tl_messages_historyImportParsed(bool arg_pm, bool arg_group, const char * arg_title);
tlo_t * tl_messages_affectedFoundMessages(int arg_pts, int arg_pts_count, int arg_offset, int *arg_messages, int len_arg_messages);
tlo_t * tl_chatInviteImporter(bool arg_requested, bool arg_via_chatlist, long arg_user_id, int arg_date, const char * arg_about, long arg_approved_by);
tlo_t * tl_messages_exportedChatInvites(int arg_count, ExportedChatInvite *arg_invites, int len_arg_invites, User *arg_users, int len_arg_users);
tlo_t * tl_messages_exportedChatInvite(ExportedChatInvite arg_invite, User *arg_users, int len_arg_users);
tlo_t * tl_messages_exportedChatInviteReplaced(ExportedChatInvite arg_invite, ExportedChatInvite arg_new_invite, User *arg_users, int len_arg_users);
tlo_t * tl_messages_chatInviteImporters(int arg_count, ChatInviteImporter *arg_importers, int len_arg_importers, User *arg_users, int len_arg_users);
tlo_t * tl_chatAdminWithInvites(long arg_admin_id, int arg_invites_count, int arg_revoked_invites_count);
tlo_t * tl_messages_chatAdminsWithInvites(ChatAdminWithInvites *arg_admins, int len_arg_admins, User *arg_users, int len_arg_users);
tlo_t * tl_messages_checkedHistoryImportPeer(const char * arg_confirm_text);
tlo_t * tl_phone_joinAsPeers(Peer *arg_peers, int len_arg_peers, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_phone_exportedGroupCallInvite(const char * arg_link);
tlo_t * tl_groupCallParticipantVideoSourceGroup(const char * arg_semantics, int *arg_sources, int len_arg_sources);
tlo_t * tl_groupCallParticipantVideo(bool arg_paused, const char * arg_endpoint, GroupCallParticipantVideoSourceGroup *arg_source_groups, int len_arg_source_groups, int arg_audio_source);
tlo_t * tl_stickers_suggestedShortName(const char * arg_short_name);
tlo_t * tl_botCommandScopeDefault();
tlo_t * tl_botCommandScopeUsers();
tlo_t * tl_botCommandScopeChats();
tlo_t * tl_botCommandScopeChatAdmins();
tlo_t * tl_botCommandScopePeer(InputPeer arg_peer);
tlo_t * tl_botCommandScopePeerAdmins(InputPeer arg_peer);
tlo_t * tl_botCommandScopePeerUser(InputPeer arg_peer, InputUser arg_user_id);
tlo_t * tl_account_resetPasswordFailedWait(int arg_retry_date);
tlo_t * tl_account_resetPasswordRequestedWait(int arg_until_date);
tlo_t * tl_account_resetPasswordOk();
tlo_t * tl_sponsoredMessage(bool arg_recommended, bool arg_can_report, unsigned char * arg_random_id, int len_arg_random_id, const char * arg_url, const char * arg_title, const char * arg_message, MessageEntity *arg_entities, int len_arg_entities, Photo arg_photo, MessageMedia arg_media, PeerColor arg_color, const char * arg_button_text, const char * arg_sponsor_info, const char * arg_additional_info);
tlo_t * tl_messages_sponsoredMessages(int arg_posts_between, SponsoredMessage *arg_messages, int len_arg_messages, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_messages_sponsoredMessagesEmpty();
tlo_t * tl_searchResultsCalendarPeriod(int arg_date, int arg_min_msg_id, int arg_max_msg_id, int arg_count);
tlo_t * tl_messages_searchResultsCalendar(bool arg_inexact, int arg_count, int arg_min_date, int arg_min_msg_id, int arg_offset_id_offset, SearchResultsCalendarPeriod *arg_periods, int len_arg_periods, Message *arg_messages, int len_arg_messages, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_searchResultPosition(int arg_msg_id, int arg_date, int arg_offset);
tlo_t * tl_messages_searchResultsPositions(int arg_count, SearchResultsPosition *arg_positions, int len_arg_positions);
tlo_t * tl_channels_sendAsPeers(SendAsPeer *arg_peers, int len_arg_peers, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_users_userFull(UserFull arg_full_user, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_messages_peerSettings(PeerSettings arg_settings, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_auth_loggedOut(unsigned char * arg_future_auth_token, int len_arg_future_auth_token);
tlo_t * tl_reactionCount(int arg_chosen_order, Reaction arg_reaction, int arg_count);
tlo_t * tl_messageReactions(bool arg_min, bool arg_can_see_list, bool arg_reactions_as_tags, ReactionCount *arg_results, int len_arg_results, MessagePeerReaction *arg_recent_reactions, int len_arg_recent_reactions, MessageReactor *arg_top_reactors, int len_arg_top_reactors);
tlo_t * tl_messages_messageReactionsList(int arg_count, MessagePeerReaction *arg_reactions, int len_arg_reactions, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users, const char * arg_next_offset);
tlo_t * tl_availableReaction(bool arg_inactive, bool arg_premium, const char * arg_reaction, const char * arg_title, Document arg_static_icon, Document arg_appear_animation, Document arg_select_animation, Document arg_activate_animation, Document arg_effect_animation, Document arg_around_animation, Document arg_center_icon);
tlo_t * tl_messages_availableReactionsNotModified();
tlo_t * tl_messages_availableReactions(int arg_hash, AvailableReaction *arg_reactions, int len_arg_reactions);
tlo_t * tl_messagePeerReaction(bool arg_big, bool arg_unread, bool arg_my, Peer arg_peer_id, int arg_date, Reaction arg_reaction);
tlo_t * tl_groupCallStreamChannel(int arg_channel, int arg_scale, long arg_last_timestamp_ms);
tlo_t * tl_phone_groupCallStreamChannels(GroupCallStreamChannel *arg_channels, int len_arg_channels);
tlo_t * tl_phone_groupCallStreamRtmpUrl(const char * arg_url, const char * arg_key);
tlo_t * tl_attachMenuBotIconColor(const char * arg_name, int arg_color);
tlo_t * tl_attachMenuBotIcon(const char * arg_name, Document arg_icon, AttachMenuBotIconColor *arg_colors, int len_arg_colors);
tlo_t * tl_attachMenuBot(bool arg_inactive, bool arg_has_settings, bool arg_request_write_access, bool arg_show_in_attach_menu, bool arg_show_in_side_menu, bool arg_side_menu_disclaimer_needed, long arg_bot_id, const char * arg_short_name, AttachMenuPeerType *arg_peer_types, int len_arg_peer_types, AttachMenuBotIcon *arg_icons, int len_arg_icons);
tlo_t * tl_attachMenuBotsNotModified();
tlo_t * tl_attachMenuBots(long arg_hash, AttachMenuBot *arg_bots, int len_arg_bots, User *arg_users, int len_arg_users);
tlo_t * tl_attachMenuBotsBot(AttachMenuBot arg_bot, User *arg_users, int len_arg_users);
tlo_t * tl_webViewResultUrl(bool arg_fullsize, long arg_query_id, const char * arg_url);
tlo_t * tl_webViewMessageSent(InputBotInlineMessageID arg_msg_id);
tlo_t * tl_botMenuButtonDefault();
tlo_t * tl_botMenuButtonCommands();
tlo_t * tl_botMenuButton(const char * arg_text, const char * arg_url);
tlo_t * tl_account_savedRingtonesNotModified();
tlo_t * tl_account_savedRingtones(long arg_hash, Document *arg_ringtones, int len_arg_ringtones);
tlo_t * tl_notificationSoundDefault();
tlo_t * tl_notificationSoundNone();
tlo_t * tl_notificationSoundLocal(const char * arg_title, const char * arg_data);
tlo_t * tl_notificationSoundRingtone(long arg_id);
tlo_t * tl_account_savedRingtone();
tlo_t * tl_account_savedRingtoneConverted(Document arg_document);
tlo_t * tl_attachMenuPeerTypeSameBotPM();
tlo_t * tl_attachMenuPeerTypeBotPM();
tlo_t * tl_attachMenuPeerTypePM();
tlo_t * tl_attachMenuPeerTypeChat();
tlo_t * tl_attachMenuPeerTypeBroadcast();
tlo_t * tl_inputInvoiceMessage(InputPeer arg_peer, int arg_msg_id);
tlo_t * tl_inputInvoiceSlug(const char * arg_slug);
tlo_t * tl_inputInvoicePremiumGiftCode(InputStorePaymentPurpose arg_purpose, PremiumGiftCodeOption arg_option);
tlo_t * tl_inputInvoiceStars(InputStorePaymentPurpose arg_purpose);
tlo_t * tl_inputInvoiceChatInviteSubscription(const char * arg_hash);
tlo_t * tl_inputInvoiceStarGift(bool arg_hide_name, InputUser arg_user_id, long arg_gift_id, TextWithEntities arg_message);
tlo_t * tl_payments_exportedInvoice(const char * arg_url);
tlo_t * tl_messages_transcribedAudio(bool arg_pending, long arg_transcription_id, const char * arg_text, int arg_trial_remains_num, int arg_trial_remains_until_date);
tlo_t * tl_help_premiumPromo(const char * arg_status_text, MessageEntity *arg_status_entities, int len_arg_status_entities, const char * *arg_video_sections, int len_arg_video_sections, Document *arg_videos, int len_arg_videos, PremiumSubscriptionOption *arg_period_options, int len_arg_period_options, User *arg_users, int len_arg_users);
tlo_t * tl_inputStorePaymentPremiumSubscription(bool arg_restore, bool arg_upgrade);
tlo_t * tl_inputStorePaymentGiftPremium(InputUser arg_user_id, const char * arg_currency, long arg_amount);
tlo_t * tl_inputStorePaymentPremiumGiftCode(InputUser *arg_users, int len_arg_users, InputPeer arg_boost_peer, const char * arg_currency, long arg_amount);
tlo_t * tl_inputStorePaymentPremiumGiveaway(bool arg_only_new_subscribers, bool arg_winners_are_visible, InputPeer arg_boost_peer, InputPeer *arg_additional_peers, int len_arg_additional_peers, const char * *arg_countries_iso2, int len_arg_countries_iso2, const char * arg_prize_description, long arg_random_id, int arg_until_date, const char * arg_currency, long arg_amount);
tlo_t * tl_inputStorePaymentStarsTopup(long arg_stars, const char * arg_currency, long arg_amount);
tlo_t * tl_inputStorePaymentStarsGift(InputUser arg_user_id, long arg_stars, const char * arg_currency, long arg_amount);
tlo_t * tl_inputStorePaymentStarsGiveaway(bool arg_only_new_subscribers, bool arg_winners_are_visible, long arg_stars, InputPeer arg_boost_peer, InputPeer *arg_additional_peers, int len_arg_additional_peers, const char * *arg_countries_iso2, int len_arg_countries_iso2, const char * arg_prize_description, long arg_random_id, int arg_until_date, const char * arg_currency, long arg_amount, int arg_users);
tlo_t * tl_premiumGiftOption(int arg_months, const char * arg_currency, long arg_amount, const char * arg_bot_url, const char * arg_store_product);
tlo_t * tl_paymentFormMethod(const char * arg_url, const char * arg_title);
tlo_t * tl_emojiStatusEmpty();
tlo_t * tl_emojiStatus(long arg_document_id);
tlo_t * tl_emojiStatusUntil(long arg_document_id, int arg_until);
tlo_t * tl_account_emojiStatusesNotModified();
tlo_t * tl_account_emojiStatuses(long arg_hash, EmojiStatus *arg_statuses, int len_arg_statuses);
tlo_t * tl_reactionEmpty();
tlo_t * tl_reactionEmoji(const char * arg_emoticon);
tlo_t * tl_reactionCustomEmoji(long arg_document_id);
tlo_t * tl_reactionPaid();
tlo_t * tl_chatReactionsNone();
tlo_t * tl_chatReactionsAll(bool arg_allow_custom);
tlo_t * tl_chatReactionsSome(Reaction *arg_reactions, int len_arg_reactions);
tlo_t * tl_messages_reactionsNotModified();
tlo_t * tl_messages_reactions(long arg_hash, Reaction *arg_reactions, int len_arg_reactions);
tlo_t * tl_emailVerifyPurposeLoginSetup(const char * arg_phone_number, const char * arg_phone_code_hash);
tlo_t * tl_emailVerifyPurposeLoginChange();
tlo_t * tl_emailVerifyPurposePassport();
tlo_t * tl_emailVerificationCode(const char * arg_code);
tlo_t * tl_emailVerificationGoogle(const char * arg_token);
tlo_t * tl_emailVerificationApple(const char * arg_token);
tlo_t * tl_account_emailVerified(const char * arg_email);
tlo_t * tl_account_emailVerifiedLogin(const char * arg_email, auth_SentCode arg_sent_code);
tlo_t * tl_premiumSubscriptionOption(bool arg_current, bool arg_can_purchase_upgrade, const char * arg_transaction, int arg_months, const char * arg_currency, long arg_amount, const char * arg_bot_url, const char * arg_store_product);
tlo_t * tl_sendAsPeer(bool arg_premium_required, Peer arg_peer);
tlo_t * tl_messageExtendedMediaPreview(int arg_w, int arg_h, PhotoSize arg_thumb, int arg_video_duration);
tlo_t * tl_messageExtendedMedia(MessageMedia arg_media);
tlo_t * tl_stickerKeyword(long arg_document_id, const char * *arg_keyword, int len_arg_keyword);
tlo_t * tl_username(bool arg_editable, bool arg_active, const char * arg_username);
tlo_t * tl_forumTopicDeleted(int arg_id);
tlo_t * tl_forumTopic(bool arg_my, bool arg_closed, bool arg_pinned, bool arg_short, bool arg_hidden, int arg_id, int arg_date, const char * arg_title, int arg_icon_color, long arg_icon_emoji_id, int arg_top_message, int arg_read_inbox_max_id, int arg_read_outbox_max_id, int arg_unread_count, int arg_unread_mentions_count, int arg_unread_reactions_count, Peer arg_from_id, PeerNotifySettings arg_notify_settings, DraftMessage arg_draft);
tlo_t * tl_messages_forumTopics(bool arg_order_by_create_date, int arg_count, ForumTopic *arg_topics, int len_arg_topics, Message *arg_messages, int len_arg_messages, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users, int arg_pts);
tlo_t * tl_defaultHistoryTTL(int arg_period);
tlo_t * tl_exportedContactToken(const char * arg_url, int arg_expires);
tlo_t * tl_requestPeerTypeUser(Bool arg_bot, Bool arg_premium);
tlo_t * tl_requestPeerTypeChat(bool arg_creator, bool arg_bot_participant, Bool arg_has_username, Bool arg_forum, ChatAdminRights arg_user_admin_rights, ChatAdminRights arg_bot_admin_rights);
tlo_t * tl_requestPeerTypeBroadcast(bool arg_creator, Bool arg_has_username, ChatAdminRights arg_user_admin_rights, ChatAdminRights arg_bot_admin_rights);
tlo_t * tl_emojiListNotModified();
tlo_t * tl_emojiList(long arg_hash, long *arg_document_id, int len_arg_document_id);
tlo_t * tl_emojiGroup(const char * arg_title, long arg_icon_emoji_id, const char * *arg_emoticons, int len_arg_emoticons);
tlo_t * tl_emojiGroupGreeting(const char * arg_title, long arg_icon_emoji_id, const char * *arg_emoticons, int len_arg_emoticons);
tlo_t * tl_emojiGroupPremium(const char * arg_title, long arg_icon_emoji_id);
tlo_t * tl_messages_emojiGroupsNotModified();
tlo_t * tl_messages_emojiGroups(int arg_hash, EmojiGroup *arg_groups, int len_arg_groups);
tlo_t * tl_textWithEntities(const char * arg_text, MessageEntity *arg_entities, int len_arg_entities);
tlo_t * tl_messages_translateResult(TextWithEntities *arg_result, int len_arg_result);
tlo_t * tl_autoSaveSettings(bool arg_photos, bool arg_videos, long arg_video_max_size);
tlo_t * tl_autoSaveException(Peer arg_peer, AutoSaveSettings arg_settings);
tlo_t * tl_account_autoSaveSettings(AutoSaveSettings arg_users_settings, AutoSaveSettings arg_chats_settings, AutoSaveSettings arg_broadcasts_settings, AutoSaveException *arg_exceptions, int len_arg_exceptions, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_help_appConfigNotModified();
tlo_t * tl_help_appConfig(int arg_hash, JSONValue arg_config);
tlo_t * tl_inputBotAppID(long arg_id, long arg_access_hash);
tlo_t * tl_inputBotAppShortName(InputUser arg_bot_id, const char * arg_short_name);
tlo_t * tl_botAppNotModified();
tlo_t * tl_botApp(long arg_id, long arg_access_hash, const char * arg_short_name, const char * arg_title, const char * arg_description, Photo arg_photo, Document arg_document, long arg_hash);
tlo_t * tl_messages_botApp(bool arg_inactive, bool arg_request_write_access, bool arg_has_settings, BotApp arg_app);
tlo_t * tl_inlineBotWebView(const char * arg_text, const char * arg_url);
tlo_t * tl_readParticipantDate(long arg_user_id, int arg_date);
tlo_t * tl_inputChatlistDialogFilter(int arg_filter_id);
tlo_t * tl_exportedChatlistInvite(const char * arg_title, const char * arg_url, Peer *arg_peers, int len_arg_peers);
tlo_t * tl_chatlists_exportedChatlistInvite(DialogFilter arg_filter, ExportedChatlistInvite arg_invite);
tlo_t * tl_chatlists_exportedInvites(ExportedChatlistInvite *arg_invites, int len_arg_invites, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_chatlists_chatlistInviteAlready(int arg_filter_id, Peer *arg_missing_peers, int len_arg_missing_peers, Peer *arg_already_peers, int len_arg_already_peers, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_chatlists_chatlistInvite(const char * arg_title, const char * arg_emoticon, Peer *arg_peers, int len_arg_peers, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_chatlists_chatlistUpdates(Peer *arg_missing_peers, int len_arg_missing_peers, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_bots_botInfo(const char * arg_name, const char * arg_about, const char * arg_description);
tlo_t * tl_messagePeerVote(Peer arg_peer, unsigned char * arg_option, int len_arg_option, int arg_date);
tlo_t * tl_messagePeerVoteInputOption(Peer arg_peer, int arg_date);
tlo_t * tl_messagePeerVoteMultiple(Peer arg_peer, unsigned char * *arg_options, int len_arg_options, int arg_date);
tlo_t * tl_storyViews(bool arg_has_viewers, int arg_views_count, int arg_forwards_count, ReactionCount *arg_reactions, int len_arg_reactions, int arg_reactions_count, long *arg_recent_viewers, int len_arg_recent_viewers);
tlo_t * tl_storyItemDeleted(int arg_id);
tlo_t * tl_storyItemSkipped(bool arg_close_friends, int arg_id, int arg_date, int arg_expire_date);
tlo_t * tl_storyItem(bool arg_pinned, bool arg_public, bool arg_close_friends, bool arg_min, bool arg_noforwards, bool arg_edited, bool arg_contacts, bool arg_selected_contacts, bool arg_out, int arg_id, int arg_date, Peer arg_from_id, StoryFwdHeader arg_fwd_from, int arg_expire_date, const char * arg_caption, MessageEntity *arg_entities, int len_arg_entities, MessageMedia arg_media, MediaArea *arg_media_areas, int len_arg_media_areas, PrivacyRule *arg_privacy, int len_arg_privacy, StoryViews arg_views, Reaction arg_sent_reaction);
tlo_t * tl_stories_allStoriesNotModified(const char * arg_state, StoriesStealthMode arg_stealth_mode);
tlo_t * tl_stories_allStories(bool arg_has_more, int arg_count, const char * arg_state, PeerStories *arg_peer_stories, int len_arg_peer_stories, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users, StoriesStealthMode arg_stealth_mode);
tlo_t * tl_stories_stories(int arg_count, StoryItem *arg_stories, int len_arg_stories, int *arg_pinned_to_top, int len_arg_pinned_to_top, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_storyView(bool arg_blocked, bool arg_blocked_my_stories_from, long arg_user_id, int arg_date, Reaction arg_reaction);
tlo_t * tl_storyViewPublicForward(bool arg_blocked, bool arg_blocked_my_stories_from, Message arg_message);
tlo_t * tl_storyViewPublicRepost(bool arg_blocked, bool arg_blocked_my_stories_from, Peer arg_peer_id, StoryItem arg_story);
tlo_t * tl_stories_storyViewsList(int arg_count, int arg_views_count, int arg_forwards_count, int arg_reactions_count, StoryView *arg_views, int len_arg_views, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users, const char * arg_next_offset);
tlo_t * tl_stories_storyViews(StoryViews *arg_views, int len_arg_views, User *arg_users, int len_arg_users);
tlo_t * tl_inputReplyToMessage(int arg_reply_to_msg_id, int arg_top_msg_id, InputPeer arg_reply_to_peer_id, const char * arg_quote_text, MessageEntity *arg_quote_entities, int len_arg_quote_entities, int arg_quote_offset);
tlo_t * tl_inputReplyToStory(InputPeer arg_peer, int arg_story_id);
tlo_t * tl_exportedStoryLink(const char * arg_link);
tlo_t * tl_storiesStealthMode(int arg_active_until_date, int arg_cooldown_until_date);
tlo_t * tl_mediaAreaCoordinates(double arg_x, double arg_y, double arg_w, double arg_h, double arg_rotation, double arg_radius);
tlo_t * tl_mediaAreaVenue(MediaAreaCoordinates arg_coordinates, GeoPoint arg_geo, const char * arg_title, const char * arg_address, const char * arg_provider, const char * arg_venue_id, const char * arg_venue_type);
tlo_t * tl_inputMediaAreaVenue(MediaAreaCoordinates arg_coordinates, long arg_query_id, const char * arg_result_id);
tlo_t * tl_mediaAreaGeoPoint(MediaAreaCoordinates arg_coordinates, GeoPoint arg_geo, GeoPointAddress arg_address);
tlo_t * tl_mediaAreaSuggestedReaction(bool arg_dark, bool arg_flipped, MediaAreaCoordinates arg_coordinates, Reaction arg_reaction);
tlo_t * tl_mediaAreaChannelPost(MediaAreaCoordinates arg_coordinates, long arg_channel_id, int arg_msg_id);
tlo_t * tl_inputMediaAreaChannelPost(MediaAreaCoordinates arg_coordinates, InputChannel arg_channel, int arg_msg_id);
tlo_t * tl_mediaAreaUrl(MediaAreaCoordinates arg_coordinates, const char * arg_url);
tlo_t * tl_mediaAreaWeather(MediaAreaCoordinates arg_coordinates, const char * arg_emoji, double arg_temperature_c, int arg_color);
tlo_t * tl_peerStories(Peer arg_peer, int arg_max_read_id, StoryItem *arg_stories, int len_arg_stories);
tlo_t * tl_stories_peerStories(PeerStories arg_stories, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_messages_webPage(WebPage arg_webpage, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_premiumGiftCodeOption(int arg_users, int arg_months, const char * arg_store_product, int arg_store_quantity, const char * arg_currency, long arg_amount);
tlo_t * tl_payments_checkedGiftCode(bool arg_via_giveaway, Peer arg_from_id, int arg_giveaway_msg_id, long arg_to_id, int arg_date, int arg_months, int arg_used_date, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_payments_giveawayInfo(bool arg_participating, bool arg_preparing_results, int arg_start_date, int arg_joined_too_early_date, long arg_admin_disallowed_chat_id, const char * arg_disallowed_country);
tlo_t * tl_payments_giveawayInfoResults(bool arg_winner, bool arg_refunded, int arg_start_date, const char * arg_gift_code_slug, long arg_stars_prize, int arg_finish_date, int arg_winners_count, int arg_activated_count);
tlo_t * tl_prepaidGiveaway(long arg_id, int arg_months, int arg_quantity, int arg_date);
tlo_t * tl_prepaidStarsGiveaway(long arg_id, long arg_stars, int arg_quantity, int arg_boosts, int arg_date);
tlo_t * tl_boost(bool arg_gift, bool arg_giveaway, bool arg_unclaimed, const char * arg_id, long arg_user_id, int arg_giveaway_msg_id, int arg_date, int arg_expires, const char * arg_used_gift_slug, int arg_multiplier, long arg_stars);
tlo_t * tl_premium_boostsList(int arg_count, Boost *arg_boosts, int len_arg_boosts, const char * arg_next_offset, User *arg_users, int len_arg_users);
tlo_t * tl_myBoost(int arg_slot, Peer arg_peer, int arg_date, int arg_expires, int arg_cooldown_until_date);
tlo_t * tl_premium_myBoosts(MyBoost *arg_my_boosts, int len_arg_my_boosts, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_premium_boostsStatus(bool arg_my_boost, int arg_level, int arg_current_level_boosts, int arg_boosts, int arg_gift_boosts, int arg_next_level_boosts, StatsPercentValue arg_premium_audience, const char * arg_boost_url, PrepaidGiveaway *arg_prepaid_giveaways, int len_arg_prepaid_giveaways, int *arg_my_boost_slots, int len_arg_my_boost_slots);
tlo_t * tl_storyFwdHeader(bool arg_modified, Peer arg_from, const char * arg_from_name, int arg_story_id);
tlo_t * tl_postInteractionCountersMessage(int arg_msg_id, int arg_views, int arg_forwards, int arg_reactions);
tlo_t * tl_postInteractionCountersStory(int arg_story_id, int arg_views, int arg_forwards, int arg_reactions);
tlo_t * tl_stats_storyStats(StatsGraph arg_views_graph, StatsGraph arg_reactions_by_emotion_graph);
tlo_t * tl_publicForwardMessage(Message arg_message);
tlo_t * tl_publicForwardStory(Peer arg_peer, StoryItem arg_story);
tlo_t * tl_stats_publicForwards(int arg_count, PublicForward *arg_forwards, int len_arg_forwards, const char * arg_next_offset, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_peerColor(int arg_color, long arg_background_emoji_id);
tlo_t * tl_help_peerColorSet(int *arg_colors, int len_arg_colors);
tlo_t * tl_help_peerColorProfileSet(int *arg_palette_colors, int len_arg_palette_colors, int *arg_bg_colors, int len_arg_bg_colors, int *arg_story_colors, int len_arg_story_colors);
tlo_t * tl_help_peerColorOption(bool arg_hidden, int arg_color_id, help_PeerColorSet arg_colors, help_PeerColorSet arg_dark_colors, int arg_channel_min_level, int arg_group_min_level);
tlo_t * tl_help_peerColorsNotModified();
tlo_t * tl_help_peerColors(int arg_hash, help_PeerColorOption *arg_colors, int len_arg_colors);
tlo_t * tl_storyReaction(Peer arg_peer_id, int arg_date, Reaction arg_reaction);
tlo_t * tl_storyReactionPublicForward(Message arg_message);
tlo_t * tl_storyReactionPublicRepost(Peer arg_peer_id, StoryItem arg_story);
tlo_t * tl_stories_storyReactionsList(int arg_count, StoryReaction *arg_reactions, int len_arg_reactions, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users, const char * arg_next_offset);
tlo_t * tl_savedDialog(bool arg_pinned, Peer arg_peer, int arg_top_message);
tlo_t * tl_messages_savedDialogs(SavedDialog *arg_dialogs, int len_arg_dialogs, Message *arg_messages, int len_arg_messages, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_messages_savedDialogsSlice(int arg_count, SavedDialog *arg_dialogs, int len_arg_dialogs, Message *arg_messages, int len_arg_messages, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_messages_savedDialogsNotModified(int arg_count);
tlo_t * tl_savedReactionTag(Reaction arg_reaction, const char * arg_title, int arg_count);
tlo_t * tl_messages_savedReactionTagsNotModified();
tlo_t * tl_messages_savedReactionTags(SavedReactionTag *arg_tags, int len_arg_tags, long arg_hash);
tlo_t * tl_outboxReadDate(int arg_date);
tlo_t * tl_smsjobs_eligibleToJoin(const char * arg_terms_url, int arg_monthly_sent_sms);
tlo_t * tl_smsjobs_status(bool arg_allow_international, int arg_recent_sent, int arg_recent_since, int arg_recent_remains, int arg_total_sent, int arg_total_since, const char * arg_last_gift_slug, const char * arg_terms_url);
tlo_t * tl_smsJob(const char * arg_job_id, const char * arg_phone_number, const char * arg_text);
tlo_t * tl_businessWeeklyOpen(int arg_start_minute, int arg_end_minute);
tlo_t * tl_businessWorkHours(bool arg_open_now, const char * arg_timezone_id, BusinessWeeklyOpen *arg_weekly_open, int len_arg_weekly_open);
tlo_t * tl_businessLocation(GeoPoint arg_geo_point, const char * arg_address);
tlo_t * tl_inputBusinessRecipients(bool arg_existing_chats, bool arg_new_chats, bool arg_contacts, bool arg_non_contacts, bool arg_exclude_selected, InputUser *arg_users, int len_arg_users);
tlo_t * tl_businessRecipients(bool arg_existing_chats, bool arg_new_chats, bool arg_contacts, bool arg_non_contacts, bool arg_exclude_selected, long *arg_users, int len_arg_users);
tlo_t * tl_businessAwayMessageScheduleAlways();
tlo_t * tl_businessAwayMessageScheduleOutsideWorkHours();
tlo_t * tl_businessAwayMessageScheduleCustom(int arg_start_date, int arg_end_date);
tlo_t * tl_inputBusinessGreetingMessage(int arg_shortcut_id, InputBusinessRecipients arg_recipients, int arg_no_activity_days);
tlo_t * tl_businessGreetingMessage(int arg_shortcut_id, BusinessRecipients arg_recipients, int arg_no_activity_days);
tlo_t * tl_inputBusinessAwayMessage(bool arg_offline_only, int arg_shortcut_id, BusinessAwayMessageSchedule arg_schedule, InputBusinessRecipients arg_recipients);
tlo_t * tl_businessAwayMessage(bool arg_offline_only, int arg_shortcut_id, BusinessAwayMessageSchedule arg_schedule, BusinessRecipients arg_recipients);
tlo_t * tl_timezone(const char * arg_id, const char * arg_name, int arg_utc_offset);
tlo_t * tl_help_timezonesListNotModified();
tlo_t * tl_help_timezonesList(Timezone *arg_timezones, int len_arg_timezones, int arg_hash);
tlo_t * tl_quickReply(int arg_shortcut_id, const char * arg_shortcut, int arg_top_message, int arg_count);
tlo_t * tl_inputQuickReplyShortcut(const char * arg_shortcut);
tlo_t * tl_inputQuickReplyShortcutId(int arg_shortcut_id);
tlo_t * tl_messages_quickReplies(QuickReply *arg_quick_replies, int len_arg_quick_replies, Message *arg_messages, int len_arg_messages, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_messages_quickRepliesNotModified();
tlo_t * tl_connectedBot(bool arg_can_reply, long arg_bot_id, BusinessBotRecipients arg_recipients);
tlo_t * tl_account_connectedBots(ConnectedBot *arg_connected_bots, int len_arg_connected_bots, User *arg_users, int len_arg_users);
tlo_t * tl_messages_dialogFilters(bool arg_tags_enabled, DialogFilter *arg_filters, int len_arg_filters);
tlo_t * tl_birthday(int arg_day, int arg_month, int arg_year);
tlo_t * tl_botBusinessConnection(bool arg_can_reply, bool arg_disabled, const char * arg_connection_id, long arg_user_id, int arg_dc_id, int arg_date);
tlo_t * tl_inputBusinessIntro(const char * arg_title, const char * arg_description, InputDocument arg_sticker);
tlo_t * tl_businessIntro(const char * arg_title, const char * arg_description, Document arg_sticker);
tlo_t * tl_messages_myStickers(int arg_count, StickerSetCovered *arg_sets, int len_arg_sets);
tlo_t * tl_inputCollectibleUsername(const char * arg_username);
tlo_t * tl_inputCollectiblePhone(const char * arg_phone);
tlo_t * tl_fragment_collectibleInfo(int arg_purchase_date, const char * arg_currency, long arg_amount, const char * arg_crypto_currency, long arg_crypto_amount, const char * arg_url);
tlo_t * tl_inputBusinessBotRecipients(bool arg_existing_chats, bool arg_new_chats, bool arg_contacts, bool arg_non_contacts, bool arg_exclude_selected, InputUser *arg_users, int len_arg_users, InputUser *arg_exclude_users, int len_arg_exclude_users);
tlo_t * tl_businessBotRecipients(bool arg_existing_chats, bool arg_new_chats, bool arg_contacts, bool arg_non_contacts, bool arg_exclude_selected, long *arg_users, int len_arg_users, long *arg_exclude_users, int len_arg_exclude_users);
tlo_t * tl_contactBirthday(long arg_contact_id, Birthday arg_birthday);
tlo_t * tl_contacts_contactBirthdays(ContactBirthday *arg_contacts, int len_arg_contacts, User *arg_users, int len_arg_users);
tlo_t * tl_missingInvitee(bool arg_premium_would_allow_invite, bool arg_premium_required_for_pm, long arg_user_id);
tlo_t * tl_messages_invitedUsers(Updates arg_updates, MissingInvitee *arg_missing_invitees, int len_arg_missing_invitees);
tlo_t * tl_inputBusinessChatLink(const char * arg_message, MessageEntity *arg_entities, int len_arg_entities, const char * arg_title);
tlo_t * tl_businessChatLink(const char * arg_link, const char * arg_message, MessageEntity *arg_entities, int len_arg_entities, const char * arg_title, int arg_views);
tlo_t * tl_account_businessChatLinks(BusinessChatLink *arg_links, int len_arg_links, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_account_resolvedBusinessChatLinks(Peer arg_peer, const char * arg_message, MessageEntity *arg_entities, int len_arg_entities, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_requestedPeerUser(long arg_user_id, const char * arg_first_name, const char * arg_last_name, const char * arg_username, Photo arg_photo);
tlo_t * tl_requestedPeerChat(long arg_chat_id, const char * arg_title, Photo arg_photo);
tlo_t * tl_requestedPeerChannel(long arg_channel_id, const char * arg_title, const char * arg_username, Photo arg_photo);
tlo_t * tl_sponsoredMessageReportOption(const char * arg_text, unsigned char * arg_option, int len_arg_option);
tlo_t * tl_channels_sponsoredMessageReportResultChooseOption(const char * arg_title, SponsoredMessageReportOption *arg_options, int len_arg_options);
tlo_t * tl_channels_sponsoredMessageReportResultAdsHidden();
tlo_t * tl_channels_sponsoredMessageReportResultReported();
tlo_t * tl_stats_broadcastRevenueStats(StatsGraph arg_top_hours_graph, StatsGraph arg_revenue_graph, BroadcastRevenueBalances arg_balances, double arg_usd_rate);
tlo_t * tl_stats_broadcastRevenueWithdrawalUrl(const char * arg_url);
tlo_t * tl_broadcastRevenueTransactionProceeds(long arg_amount, int arg_from_date, int arg_to_date);
tlo_t * tl_broadcastRevenueTransactionWithdrawal(bool arg_pending, bool arg_failed, long arg_amount, int arg_date, const char * arg_provider, int arg_transaction_date, const char * arg_transaction_url);
tlo_t * tl_broadcastRevenueTransactionRefund(long arg_amount, int arg_date, const char * arg_provider);
tlo_t * tl_stats_broadcastRevenueTransactions(int arg_count, BroadcastRevenueTransaction *arg_transactions, int len_arg_transactions);
tlo_t * tl_reactionNotificationsFromContacts();
tlo_t * tl_reactionNotificationsFromAll();
tlo_t * tl_reactionsNotifySettings(ReactionNotificationsFrom arg_messages_notify_from, ReactionNotificationsFrom arg_stories_notify_from, NotificationSound arg_sound, Bool arg_show_previews);
tlo_t * tl_broadcastRevenueBalances(bool arg_withdrawal_enabled, long arg_current_balance, long arg_available_balance, long arg_overall_revenue);
tlo_t * tl_availableEffect(bool arg_premium_required, long arg_id, const char * arg_emoticon, long arg_static_icon_id, long arg_effect_sticker_id, long arg_effect_animation_id);
tlo_t * tl_messages_availableEffectsNotModified();
tlo_t * tl_messages_availableEffects(int arg_hash, AvailableEffect *arg_effects, int len_arg_effects, Document *arg_documents, int len_arg_documents);
tlo_t * tl_factCheck(bool arg_need_check, const char * arg_country, TextWithEntities arg_text, long arg_hash);
tlo_t * tl_starsTransactionPeerUnsupported();
tlo_t * tl_starsTransactionPeerAppStore();
tlo_t * tl_starsTransactionPeerPlayMarket();
tlo_t * tl_starsTransactionPeerPremiumBot();
tlo_t * tl_starsTransactionPeerFragment();
tlo_t * tl_starsTransactionPeer(Peer arg_peer);
tlo_t * tl_starsTransactionPeerAds();
tlo_t * tl_starsTopupOption(bool arg_extended, long arg_stars, const char * arg_store_product, const char * arg_currency, long arg_amount);
tlo_t * tl_starsTransaction(bool arg_refund, bool arg_pending, bool arg_failed, bool arg_gift, bool arg_reaction, const char * arg_id, long arg_stars, int arg_date, StarsTransactionPeer arg_peer, const char * arg_title, const char * arg_description, WebDocument arg_photo, int arg_transaction_date, const char * arg_transaction_url, unsigned char * arg_bot_payload, int len_arg_bot_payload, int arg_msg_id, MessageMedia *arg_extended_media, int len_arg_extended_media, int arg_subscription_period, int arg_giveaway_post_id, StarGift arg_stargift);
tlo_t * tl_payments_starsStatus(long arg_balance, StarsSubscription *arg_subscriptions, int len_arg_subscriptions, const char * arg_subscriptions_next_offset, long arg_subscriptions_missing_balance, StarsTransaction *arg_history, int len_arg_history, const char * arg_next_offset, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_foundStory(Peer arg_peer, StoryItem arg_story);
tlo_t * tl_stories_foundStories(int arg_count, FoundStory *arg_stories, int len_arg_stories, const char * arg_next_offset, Chat *arg_chats, int len_arg_chats, User *arg_users, int len_arg_users);
tlo_t * tl_geoPointAddress(const char * arg_country_iso2, const char * arg_state, const char * arg_city, const char * arg_street);
tlo_t * tl_starsRevenueStatus(bool arg_withdrawal_enabled, long arg_current_balance, long arg_available_balance, long arg_overall_revenue, int arg_next_withdrawal_at);
tlo_t * tl_payments_starsRevenueStats(StatsGraph arg_revenue_graph, StarsRevenueStatus arg_status, double arg_usd_rate);
tlo_t * tl_payments_starsRevenueWithdrawalUrl(const char * arg_url);
tlo_t * tl_payments_starsRevenueAdsAccountUrl(const char * arg_url);
tlo_t * tl_inputStarsTransaction(bool arg_refund, const char * arg_id);
tlo_t * tl_starsGiftOption(bool arg_extended, long arg_stars, const char * arg_store_product, const char * arg_currency, long arg_amount);
tlo_t * tl_bots_popularAppBots(const char * arg_next_offset, User *arg_users, int len_arg_users);
tlo_t * tl_botPreviewMedia(int arg_date, MessageMedia arg_media);
tlo_t * tl_bots_previewInfo(BotPreviewMedia *arg_media, int len_arg_media, const char * *arg_lang_codes, int len_arg_lang_codes);
tlo_t * tl_starsSubscriptionPricing(int arg_period, long arg_amount);
tlo_t * tl_starsSubscription(bool arg_canceled, bool arg_can_refulfill, bool arg_missing_balance, const char * arg_id, Peer arg_peer, int arg_until_date, StarsSubscriptionPricing arg_pricing, const char * arg_chat_invite_hash);
tlo_t * tl_messageReactor(bool arg_top, bool arg_my, bool arg_anonymous, Peer arg_peer_id, int arg_count);
tlo_t * tl_starsGiveawayOption(bool arg_extended, bool arg_default, long arg_stars, int arg_yearly_boosts, const char * arg_store_product, const char * arg_currency, long arg_amount, StarsGiveawayWinnersOption *arg_winners, int len_arg_winners);
tlo_t * tl_starsGiveawayWinnersOption(bool arg_default, int arg_users, long arg_per_user_stars);
tlo_t * tl_starGift(bool arg_limited, long arg_id, Document arg_sticker, long arg_stars, int arg_availability_remains, int arg_availability_total, long arg_convert_stars);
tlo_t * tl_payments_starGiftsNotModified();
tlo_t * tl_payments_starGifts(int arg_hash, StarGift *arg_gifts, int len_arg_gifts);
tlo_t * tl_userStarGift(bool arg_name_hidden, bool arg_unsaved, long arg_from_id, int arg_date, StarGift arg_gift, TextWithEntities arg_message, int arg_msg_id, long arg_convert_stars);
tlo_t * tl_payments_userStarGifts(int arg_count, UserStarGift *arg_gifts, int len_arg_gifts, const char * arg_next_offset, User *arg_users, int len_arg_users);
tlo_t * tl_messageReportOption(const char * arg_text, unsigned char * arg_option, int len_arg_option);
tlo_t * tl_reportResultChooseOption(const char * arg_title, MessageReportOption *arg_options, int len_arg_options);
tlo_t * tl_reportResultAddComment(bool arg_optional, unsigned char * arg_option, int len_arg_option);
tlo_t * tl_reportResultReported();
tlo_t * tl_invokeAfterMsg(long arg_msg_id, tlo_t * arg_query);
tlo_t * tl_invokeAfterMsgs(long *arg_msg_ids, int len_arg_msg_ids, tlo_t * arg_query);
tlo_t * tl_initConnection(int arg_api_id, const char * arg_device_model, const char * arg_system_version, const char * arg_app_version, const char * arg_system_lang_code, const char * arg_lang_pack, const char * arg_lang_code, InputClientProxy arg_proxy, JSONValue arg_params, tlo_t * arg_query);
tlo_t * tl_invokeWithLayer(int arg_layer, tlo_t * arg_query);
tlo_t * tl_invokeWithoutUpdates(tlo_t * arg_query);
tlo_t * tl_invokeWithMessagesRange(MessageRange arg_range, tlo_t * arg_query);
tlo_t * tl_invokeWithTakeout(long arg_takeout_id, tlo_t * arg_query);
tlo_t * tl_invokeWithBusinessConnection(const char * arg_connection_id, tlo_t * arg_query);
tlo_t * tl_invokeWithGooglePlayIntegrity(const char * arg_nonce, const char * arg_token, tlo_t * arg_query);
tlo_t * tl_invokeWithApnsSecret(const char * arg_nonce, const char * arg_secret, tlo_t * arg_query);
tlo_t * tl_auth_sendCode(const char * arg_phone_number, int arg_api_id, const char * arg_api_hash, CodeSettings arg_settings);
tlo_t * tl_auth_signUp(bool arg_no_joined_notifications, const char * arg_phone_number, const char * arg_phone_code_hash, const char * arg_first_name, const char * arg_last_name);
tlo_t * tl_auth_signIn(const char * arg_phone_number, const char * arg_phone_code_hash, const char * arg_phone_code, EmailVerification arg_email_verification);
tlo_t * tl_auth_logOut();
tlo_t * tl_auth_resetAuthorizations();
tlo_t * tl_auth_exportAuthorization(int arg_dc_id);
tlo_t * tl_auth_importAuthorization(long arg_id, unsigned char * arg_bytes, int len_arg_bytes);
tlo_t * tl_auth_bindTempAuthKey(long arg_perm_auth_key_id, long arg_nonce, int arg_expires_at, unsigned char * arg_encrypted_message, int len_arg_encrypted_message);
tlo_t * tl_auth_importBotAuthorization(int arg_flags, int arg_api_id, const char * arg_api_hash, const char * arg_bot_auth_token);
tlo_t * tl_auth_checkPassword(InputCheckPasswordSRP arg_password);
tlo_t * tl_auth_requestPasswordRecovery();
tlo_t * tl_auth_recoverPassword(const char * arg_code, account_PasswordInputSettings arg_new_settings);
tlo_t * tl_auth_resendCode(const char * arg_phone_number, const char * arg_phone_code_hash, const char * arg_reason);
tlo_t * tl_auth_cancelCode(const char * arg_phone_number, const char * arg_phone_code_hash);
tlo_t * tl_auth_dropTempAuthKeys(long *arg_except_auth_keys, int len_arg_except_auth_keys);
tlo_t * tl_auth_exportLoginToken(int arg_api_id, const char * arg_api_hash, long *arg_except_ids, int len_arg_except_ids);
tlo_t * tl_auth_importLoginToken(unsigned char * arg_token, int len_arg_token);
tlo_t * tl_auth_acceptLoginToken(unsigned char * arg_token, int len_arg_token);
tlo_t * tl_auth_checkRecoveryPassword(const char * arg_code);
tlo_t * tl_auth_importWebTokenAuthorization(int arg_api_id, const char * arg_api_hash, const char * arg_web_auth_token);
tlo_t * tl_auth_requestFirebaseSms(const char * arg_phone_number, const char * arg_phone_code_hash, const char * arg_safety_net_token, const char * arg_play_integrity_token, const char * arg_ios_push_secret);
tlo_t * tl_auth_resetLoginEmail(const char * arg_phone_number, const char * arg_phone_code_hash);
tlo_t * tl_auth_reportMissingCode(const char * arg_phone_number, const char * arg_phone_code_hash, const char * arg_mnc);
tlo_t * tl_account_registerDevice(bool arg_no_muted, int arg_token_type, const char * arg_token, Bool arg_app_sandbox, unsigned char * arg_secret, int len_arg_secret, long *arg_other_uids, int len_arg_other_uids);
tlo_t * tl_account_unregisterDevice(int arg_token_type, const char * arg_token, long *arg_other_uids, int len_arg_other_uids);
tlo_t * tl_account_updateNotifySettings(InputNotifyPeer arg_peer, InputPeerNotifySettings arg_settings);
tlo_t * tl_account_getNotifySettings(InputNotifyPeer arg_peer);
tlo_t * tl_account_resetNotifySettings();
tlo_t * tl_account_updateProfile(const char * arg_first_name, const char * arg_last_name, const char * arg_about);
tlo_t * tl_account_updateStatus(Bool arg_offline);
tlo_t * tl_account_getWallPapers(long arg_hash);
tlo_t * tl_account_reportPeer(InputPeer arg_peer, ReportReason arg_reason, const char * arg_message);
tlo_t * tl_account_checkUsername(const char * arg_username);
tlo_t * tl_account_updateUsername(const char * arg_username);
tlo_t * tl_account_getPrivacy(InputPrivacyKey arg_key);
tlo_t * tl_account_setPrivacy(InputPrivacyKey arg_key, InputPrivacyRule *arg_rules, int len_arg_rules);
tlo_t * tl_account_deleteAccount(const char * arg_reason, InputCheckPasswordSRP arg_password);
tlo_t * tl_account_getAccountTTL();
tlo_t * tl_account_setAccountTTL(AccountDaysTTL arg_ttl);
tlo_t * tl_account_sendChangePhoneCode(const char * arg_phone_number, CodeSettings arg_settings);
tlo_t * tl_account_changePhone(const char * arg_phone_number, const char * arg_phone_code_hash, const char * arg_phone_code);
tlo_t * tl_account_updateDeviceLocked(int arg_period);
tlo_t * tl_account_getAuthorizations();
tlo_t * tl_account_resetAuthorization(long arg_hash);
tlo_t * tl_account_getPassword();
tlo_t * tl_account_getPasswordSettings(InputCheckPasswordSRP arg_password);
tlo_t * tl_account_updatePasswordSettings(InputCheckPasswordSRP arg_password, account_PasswordInputSettings arg_new_settings);
tlo_t * tl_account_sendConfirmPhoneCode(const char * arg_hash, CodeSettings arg_settings);
tlo_t * tl_account_confirmPhone(const char * arg_phone_code_hash, const char * arg_phone_code);
tlo_t * tl_account_getTmpPassword(InputCheckPasswordSRP arg_password, int arg_period);
tlo_t * tl_account_getWebAuthorizations();
tlo_t * tl_account_resetWebAuthorization(long arg_hash);
tlo_t * tl_account_resetWebAuthorizations();
tlo_t * tl_account_getAllSecureValues();
tlo_t * tl_account_getSecureValue(SecureValueType *arg_types, int len_arg_types);
tlo_t * tl_account_saveSecureValue(InputSecureValue arg_value, long arg_secure_secret_id);
tlo_t * tl_account_deleteSecureValue(SecureValueType *arg_types, int len_arg_types);
tlo_t * tl_account_getAuthorizationForm(long arg_bot_id, const char * arg_scope, const char * arg_public_key);
tlo_t * tl_account_acceptAuthorization(long arg_bot_id, const char * arg_scope, const char * arg_public_key, SecureValueHash *arg_value_hashes, int len_arg_value_hashes, SecureCredentialsEncrypted arg_credentials);
tlo_t * tl_account_sendVerifyPhoneCode(const char * arg_phone_number, CodeSettings arg_settings);
tlo_t * tl_account_verifyPhone(const char * arg_phone_number, const char * arg_phone_code_hash, const char * arg_phone_code);
tlo_t * tl_account_sendVerifyEmailCode(EmailVerifyPurpose arg_purpose, const char * arg_email);
tlo_t * tl_account_verifyEmail(EmailVerifyPurpose arg_purpose, EmailVerification arg_verification);
tlo_t * tl_account_initTakeoutSession(bool arg_contacts, bool arg_message_users, bool arg_message_chats, bool arg_message_megagroups, bool arg_message_channels, bool arg_files, long arg_file_max_size);
tlo_t * tl_account_finishTakeoutSession(bool arg_success);
tlo_t * tl_account_confirmPasswordEmail(const char * arg_code);
tlo_t * tl_account_resendPasswordEmail();
tlo_t * tl_account_cancelPasswordEmail();
tlo_t * tl_account_getContactSignUpNotification();
tlo_t * tl_account_setContactSignUpNotification(Bool arg_silent);
tlo_t * tl_account_getNotifyExceptions(bool arg_compare_sound, bool arg_compare_stories, InputNotifyPeer arg_peer);
tlo_t * tl_account_getWallPaper(InputWallPaper arg_wallpaper);
tlo_t * tl_account_uploadWallPaper(bool arg_for_chat, InputFile arg_file, const char * arg_mime_type, WallPaperSettings arg_settings);
tlo_t * tl_account_saveWallPaper(InputWallPaper arg_wallpaper, Bool arg_unsave, WallPaperSettings arg_settings);
tlo_t * tl_account_installWallPaper(InputWallPaper arg_wallpaper, WallPaperSettings arg_settings);
tlo_t * tl_account_resetWallPapers();
tlo_t * tl_account_getAutoDownloadSettings();
tlo_t * tl_account_saveAutoDownloadSettings(bool arg_low, bool arg_high, AutoDownloadSettings arg_settings);
tlo_t * tl_account_uploadTheme(InputFile arg_file, InputFile arg_thumb, const char * arg_file_name, const char * arg_mime_type);
tlo_t * tl_account_createTheme(const char * arg_slug, const char * arg_title, InputDocument arg_document, InputThemeSettings *arg_settings, int len_arg_settings);
tlo_t * tl_account_updateTheme(const char * arg_format, InputTheme arg_theme, const char * arg_slug, const char * arg_title, InputDocument arg_document, InputThemeSettings *arg_settings, int len_arg_settings);
tlo_t * tl_account_saveTheme(InputTheme arg_theme, Bool arg_unsave);
tlo_t * tl_account_installTheme(bool arg_dark, InputTheme arg_theme, const char * arg_format, BaseTheme arg_base_theme);
tlo_t * tl_account_getTheme(const char * arg_format, InputTheme arg_theme);
tlo_t * tl_account_getThemes(const char * arg_format, long arg_hash);
tlo_t * tl_account_setContentSettings(bool arg_sensitive_enabled);
tlo_t * tl_account_getContentSettings();
tlo_t * tl_account_getMultiWallPapers(InputWallPaper *arg_wallpapers, int len_arg_wallpapers);
tlo_t * tl_account_getGlobalPrivacySettings();
tlo_t * tl_account_setGlobalPrivacySettings(GlobalPrivacySettings arg_settings);
tlo_t * tl_account_reportProfilePhoto(InputPeer arg_peer, InputPhoto arg_photo_id, ReportReason arg_reason, const char * arg_message);
tlo_t * tl_account_resetPassword();
tlo_t * tl_account_declinePasswordReset();
tlo_t * tl_account_getChatThemes(long arg_hash);
tlo_t * tl_account_setAuthorizationTTL(int arg_authorization_ttl_days);
tlo_t * tl_account_changeAuthorizationSettings(bool arg_confirmed, long arg_hash, Bool arg_encrypted_requests_disabled, Bool arg_call_requests_disabled);
tlo_t * tl_account_getSavedRingtones(long arg_hash);
tlo_t * tl_account_saveRingtone(InputDocument arg_id, Bool arg_unsave);
tlo_t * tl_account_uploadRingtone(InputFile arg_file, const char * arg_file_name, const char * arg_mime_type);
tlo_t * tl_account_updateEmojiStatus(EmojiStatus arg_emoji_status);
tlo_t * tl_account_getDefaultEmojiStatuses(long arg_hash);
tlo_t * tl_account_getRecentEmojiStatuses(long arg_hash);
tlo_t * tl_account_clearRecentEmojiStatuses();
tlo_t * tl_account_reorderUsernames(const char * *arg_order, int len_arg_order);
tlo_t * tl_account_toggleUsername(const char * arg_username, Bool arg_active);
tlo_t * tl_account_getDefaultProfilePhotoEmojis(long arg_hash);
tlo_t * tl_account_getDefaultGroupPhotoEmojis(long arg_hash);
tlo_t * tl_account_getAutoSaveSettings();
tlo_t * tl_account_saveAutoSaveSettings(bool arg_users, bool arg_chats, bool arg_broadcasts, InputPeer arg_peer, AutoSaveSettings arg_settings);
tlo_t * tl_account_deleteAutoSaveExceptions();
tlo_t * tl_account_invalidateSignInCodes(const char * *arg_codes, int len_arg_codes);
tlo_t * tl_account_updateColor(bool arg_for_profile, int arg_color, long arg_background_emoji_id);
tlo_t * tl_account_getDefaultBackgroundEmojis(long arg_hash);
tlo_t * tl_account_getChannelDefaultEmojiStatuses(long arg_hash);
tlo_t * tl_account_getChannelRestrictedStatusEmojis(long arg_hash);
tlo_t * tl_account_updateBusinessWorkHours(BusinessWorkHours arg_business_work_hours);
tlo_t * tl_account_updateBusinessLocation(InputGeoPoint arg_geo_point, const char * arg_address);
tlo_t * tl_account_updateBusinessGreetingMessage(InputBusinessGreetingMessage arg_message);
tlo_t * tl_account_updateBusinessAwayMessage(InputBusinessAwayMessage arg_message);
tlo_t * tl_account_updateConnectedBot(bool arg_can_reply, bool arg_deleted, InputUser arg_bot, InputBusinessBotRecipients arg_recipients);
tlo_t * tl_account_getConnectedBots();
tlo_t * tl_account_getBotBusinessConnection(const char * arg_connection_id);
tlo_t * tl_account_updateBusinessIntro(InputBusinessIntro arg_intro);
tlo_t * tl_account_toggleConnectedBotPaused(InputPeer arg_peer, Bool arg_paused);
tlo_t * tl_account_disablePeerConnectedBot(InputPeer arg_peer);
tlo_t * tl_account_updateBirthday(Birthday arg_birthday);
tlo_t * tl_account_createBusinessChatLink(InputBusinessChatLink arg_link);
tlo_t * tl_account_editBusinessChatLink(const char * arg_slug, InputBusinessChatLink arg_link);
tlo_t * tl_account_deleteBusinessChatLink(const char * arg_slug);
tlo_t * tl_account_getBusinessChatLinks();
tlo_t * tl_account_resolveBusinessChatLink(const char * arg_slug);
tlo_t * tl_account_updatePersonalChannel(InputChannel arg_channel);
tlo_t * tl_account_toggleSponsoredMessages(Bool arg_enabled);
tlo_t * tl_account_getReactionsNotifySettings();
tlo_t * tl_account_setReactionsNotifySettings(ReactionsNotifySettings arg_settings);
tlo_t * tl_users_getUsers(InputUser *arg_id, int len_arg_id);
tlo_t * tl_users_getFullUser(InputUser arg_id);
tlo_t * tl_users_setSecureValueErrors(InputUser arg_id, SecureValueError *arg_errors, int len_arg_errors);
tlo_t * tl_users_getIsPremiumRequiredToContact(InputUser *arg_id, int len_arg_id);
tlo_t * tl_contacts_getContactIDs(long arg_hash);
tlo_t * tl_contacts_getStatuses();
tlo_t * tl_contacts_getContacts(long arg_hash);
tlo_t * tl_contacts_importContacts(InputContact *arg_contacts, int len_arg_contacts);
tlo_t * tl_contacts_deleteContacts(InputUser *arg_id, int len_arg_id);
tlo_t * tl_contacts_deleteByPhones(const char * *arg_phones, int len_arg_phones);
tlo_t * tl_contacts_block(bool arg_my_stories_from, InputPeer arg_id);
tlo_t * tl_contacts_unblock(bool arg_my_stories_from, InputPeer arg_id);
tlo_t * tl_contacts_getBlocked(bool arg_my_stories_from, int arg_offset, int arg_limit);
tlo_t * tl_contacts_search(const char * arg_q, int arg_limit);
tlo_t * tl_contacts_resolveUsername(const char * arg_username);
tlo_t * tl_contacts_getTopPeers(bool arg_correspondents, bool arg_bots_pm, bool arg_bots_inline, bool arg_phone_calls, bool arg_forward_users, bool arg_forward_chats, bool arg_groups, bool arg_channels, bool arg_bots_app, int arg_offset, int arg_limit, long arg_hash);
tlo_t * tl_contacts_resetTopPeerRating(TopPeerCategory arg_category, InputPeer arg_peer);
tlo_t * tl_contacts_resetSaved();
tlo_t * tl_contacts_getSaved();
tlo_t * tl_contacts_toggleTopPeers(Bool arg_enabled);
tlo_t * tl_contacts_addContact(bool arg_add_phone_privacy_exception, InputUser arg_id, const char * arg_first_name, const char * arg_last_name, const char * arg_phone);
tlo_t * tl_contacts_acceptContact(InputUser arg_id);
tlo_t * tl_contacts_getLocated(bool arg_background, InputGeoPoint arg_geo_point, int arg_self_expires);
tlo_t * tl_contacts_blockFromReplies(bool arg_delete_message, bool arg_delete_history, bool arg_report_spam, int arg_msg_id);
tlo_t * tl_contacts_resolvePhone(const char * arg_phone);
tlo_t * tl_contacts_exportContactToken();
tlo_t * tl_contacts_importContactToken(const char * arg_token);
tlo_t * tl_contacts_editCloseFriends(long *arg_id, int len_arg_id);
tlo_t * tl_contacts_setBlocked(bool arg_my_stories_from, InputPeer *arg_id, int len_arg_id, int arg_limit);
tlo_t * tl_contacts_getBirthdays();
tlo_t * tl_messages_getMessages(InputMessage *arg_id, int len_arg_id);
tlo_t * tl_messages_getDialogs(bool arg_exclude_pinned, int arg_folder_id, int arg_offset_date, int arg_offset_id, InputPeer arg_offset_peer, int arg_limit, long arg_hash);
tlo_t * tl_messages_getHistory(InputPeer arg_peer, int arg_offset_id, int arg_offset_date, int arg_add_offset, int arg_limit, int arg_max_id, int arg_min_id, long arg_hash);
tlo_t * tl_messages_search(InputPeer arg_peer, const char * arg_q, InputPeer arg_from_id, InputPeer arg_saved_peer_id, Reaction *arg_saved_reaction, int len_arg_saved_reaction, int arg_top_msg_id, MessagesFilter arg_filter, int arg_min_date, int arg_max_date, int arg_offset_id, int arg_add_offset, int arg_limit, int arg_max_id, int arg_min_id, long arg_hash);
tlo_t * tl_messages_readHistory(InputPeer arg_peer, int arg_max_id);
tlo_t * tl_messages_deleteHistory(bool arg_just_clear, bool arg_revoke, InputPeer arg_peer, int arg_max_id, int arg_min_date, int arg_max_date);
tlo_t * tl_messages_deleteMessages(bool arg_revoke, int *arg_id, int len_arg_id);
tlo_t * tl_messages_receivedMessages(int arg_max_id);
tlo_t * tl_messages_setTyping(InputPeer arg_peer, int arg_top_msg_id, SendMessageAction arg_action);
tlo_t * tl_messages_sendMessage(bool arg_no_webpage, bool arg_silent, bool arg_background, bool arg_clear_draft, bool arg_noforwards, bool arg_update_stickersets_order, bool arg_invert_media, InputPeer arg_peer, InputReplyTo arg_reply_to, const char * arg_message, long arg_random_id, ReplyMarkup arg_reply_markup, MessageEntity *arg_entities, int len_arg_entities, int arg_schedule_date, InputPeer arg_send_as, InputQuickReplyShortcut arg_quick_reply_shortcut, long arg_effect);
tlo_t * tl_messages_sendMedia(bool arg_silent, bool arg_background, bool arg_clear_draft, bool arg_noforwards, bool arg_update_stickersets_order, bool arg_invert_media, InputPeer arg_peer, InputReplyTo arg_reply_to, InputMedia arg_media, const char * arg_message, long arg_random_id, ReplyMarkup arg_reply_markup, MessageEntity *arg_entities, int len_arg_entities, int arg_schedule_date, InputPeer arg_send_as, InputQuickReplyShortcut arg_quick_reply_shortcut, long arg_effect);
tlo_t * tl_messages_forwardMessages(bool arg_silent, bool arg_background, bool arg_with_my_score, bool arg_drop_author, bool arg_drop_media_captions, bool arg_noforwards, InputPeer arg_from_peer, int *arg_id, int len_arg_id, long *arg_random_id, int len_arg_random_id, InputPeer arg_to_peer, int arg_top_msg_id, int arg_schedule_date, InputPeer arg_send_as, InputQuickReplyShortcut arg_quick_reply_shortcut);
tlo_t * tl_messages_reportSpam(InputPeer arg_peer);
tlo_t * tl_messages_getPeerSettings(InputPeer arg_peer);
tlo_t * tl_messages_report(InputPeer arg_peer, int *arg_id, int len_arg_id, unsigned char * arg_option, int len_arg_option, const char * arg_message);
tlo_t * tl_messages_getChats(long *arg_id, int len_arg_id);
tlo_t * tl_messages_getFullChat(long arg_chat_id);
tlo_t * tl_messages_editChatTitle(long arg_chat_id, const char * arg_title);
tlo_t * tl_messages_editChatPhoto(long arg_chat_id, InputChatPhoto arg_photo);
tlo_t * tl_messages_addChatUser(long arg_chat_id, InputUser arg_user_id, int arg_fwd_limit);
tlo_t * tl_messages_deleteChatUser(bool arg_revoke_history, long arg_chat_id, InputUser arg_user_id);
tlo_t * tl_messages_createChat(InputUser *arg_users, int len_arg_users, const char * arg_title, int arg_ttl_period);
tlo_t * tl_messages_getDhConfig(int arg_version, int arg_random_length);
tlo_t * tl_messages_requestEncryption(InputUser arg_user_id, int arg_random_id, unsigned char * arg_g_a, int len_arg_g_a);
tlo_t * tl_messages_acceptEncryption(InputEncryptedChat arg_peer, unsigned char * arg_g_b, int len_arg_g_b, long arg_key_fingerprint);
tlo_t * tl_messages_discardEncryption(bool arg_delete_history, int arg_chat_id);
tlo_t * tl_messages_setEncryptedTyping(InputEncryptedChat arg_peer, Bool arg_typing);
tlo_t * tl_messages_readEncryptedHistory(InputEncryptedChat arg_peer, int arg_max_date);
tlo_t * tl_messages_sendEncrypted(bool arg_silent, InputEncryptedChat arg_peer, long arg_random_id, unsigned char * arg_data, int len_arg_data);
tlo_t * tl_messages_sendEncryptedFile(bool arg_silent, InputEncryptedChat arg_peer, long arg_random_id, unsigned char * arg_data, int len_arg_data, InputEncryptedFile arg_file);
tlo_t * tl_messages_sendEncryptedService(InputEncryptedChat arg_peer, long arg_random_id, unsigned char * arg_data, int len_arg_data);
tlo_t * tl_messages_receivedQueue(int arg_max_qts);
tlo_t * tl_messages_reportEncryptedSpam(InputEncryptedChat arg_peer);
tlo_t * tl_messages_readMessageContents(int *arg_id, int len_arg_id);
tlo_t * tl_messages_getStickers(const char * arg_emoticon, long arg_hash);
tlo_t * tl_messages_getAllStickers(long arg_hash);
tlo_t * tl_messages_getWebPagePreview(const char * arg_message, MessageEntity *arg_entities, int len_arg_entities);
tlo_t * tl_messages_exportChatInvite(bool arg_legacy_revoke_permanent, bool arg_request_needed, InputPeer arg_peer, int arg_expire_date, int arg_usage_limit, const char * arg_title, StarsSubscriptionPricing arg_subscription_pricing);
tlo_t * tl_messages_checkChatInvite(const char * arg_hash);
tlo_t * tl_messages_importChatInvite(const char * arg_hash);
tlo_t * tl_messages_getStickerSet(InputStickerSet arg_stickerset, int arg_hash);
tlo_t * tl_messages_installStickerSet(InputStickerSet arg_stickerset, Bool arg_archived);
tlo_t * tl_messages_uninstallStickerSet(InputStickerSet arg_stickerset);
tlo_t * tl_messages_startBot(InputUser arg_bot, InputPeer arg_peer, long arg_random_id, const char * arg_start_param);
tlo_t * tl_messages_getMessagesViews(InputPeer arg_peer, int *arg_id, int len_arg_id, Bool arg_increment);
tlo_t * tl_messages_editChatAdmin(long arg_chat_id, InputUser arg_user_id, Bool arg_is_admin);
tlo_t * tl_messages_migrateChat(long arg_chat_id);
tlo_t * tl_messages_searchGlobal(bool arg_broadcasts_only, int arg_folder_id, const char * arg_q, MessagesFilter arg_filter, int arg_min_date, int arg_max_date, int arg_offset_rate, InputPeer arg_offset_peer, int arg_offset_id, int arg_limit);
tlo_t * tl_messages_reorderStickerSets(bool arg_masks, bool arg_emojis, long *arg_order, int len_arg_order);
tlo_t * tl_messages_getDocumentByHash(unsigned char * arg_sha256, int len_arg_sha256, long arg_size, const char * arg_mime_type);
tlo_t * tl_messages_getSavedGifs(long arg_hash);
tlo_t * tl_messages_saveGif(InputDocument arg_id, Bool arg_unsave);
tlo_t * tl_messages_getInlineBotResults(InputUser arg_bot, InputPeer arg_peer, InputGeoPoint arg_geo_point, const char * arg_query, const char * arg_offset);
tlo_t * tl_messages_setInlineBotResults(bool arg_gallery, bool arg_private, long arg_query_id, InputBotInlineResult *arg_results, int len_arg_results, int arg_cache_time, const char * arg_next_offset, InlineBotSwitchPM arg_switch_pm, InlineBotWebView arg_switch_webview);
tlo_t * tl_messages_sendInlineBotResult(bool arg_silent, bool arg_background, bool arg_clear_draft, bool arg_hide_via, InputPeer arg_peer, InputReplyTo arg_reply_to, long arg_random_id, long arg_query_id, const char * arg_id, int arg_schedule_date, InputPeer arg_send_as, InputQuickReplyShortcut arg_quick_reply_shortcut);
tlo_t * tl_messages_getMessageEditData(InputPeer arg_peer, int arg_id);
tlo_t * tl_messages_editMessage(bool arg_no_webpage, bool arg_invert_media, InputPeer arg_peer, int arg_id, const char * arg_message, InputMedia arg_media, ReplyMarkup arg_reply_markup, MessageEntity *arg_entities, int len_arg_entities, int arg_schedule_date, int arg_quick_reply_shortcut_id);
tlo_t * tl_messages_editInlineBotMessage(bool arg_no_webpage, bool arg_invert_media, InputBotInlineMessageID arg_id, const char * arg_message, InputMedia arg_media, ReplyMarkup arg_reply_markup, MessageEntity *arg_entities, int len_arg_entities);
tlo_t * tl_messages_getBotCallbackAnswer(bool arg_game, InputPeer arg_peer, int arg_msg_id, unsigned char * arg_data, int len_arg_data, InputCheckPasswordSRP arg_password);
tlo_t * tl_messages_setBotCallbackAnswer(bool arg_alert, long arg_query_id, const char * arg_message, const char * arg_url, int arg_cache_time);
tlo_t * tl_messages_getPeerDialogs(InputDialogPeer *arg_peers, int len_arg_peers);
tlo_t * tl_messages_saveDraft(bool arg_no_webpage, bool arg_invert_media, InputReplyTo arg_reply_to, InputPeer arg_peer, const char * arg_message, MessageEntity *arg_entities, int len_arg_entities, InputMedia arg_media, long arg_effect);
tlo_t * tl_messages_getAllDrafts();
tlo_t * tl_messages_getFeaturedStickers(long arg_hash);
tlo_t * tl_messages_readFeaturedStickers(long *arg_id, int len_arg_id);
tlo_t * tl_messages_getRecentStickers(bool arg_attached, long arg_hash);
tlo_t * tl_messages_saveRecentSticker(bool arg_attached, InputDocument arg_id, Bool arg_unsave);
tlo_t * tl_messages_clearRecentStickers(bool arg_attached);
tlo_t * tl_messages_getArchivedStickers(bool arg_masks, bool arg_emojis, long arg_offset_id, int arg_limit);
tlo_t * tl_messages_getMaskStickers(long arg_hash);
tlo_t * tl_messages_getAttachedStickers(InputStickeredMedia arg_media);
tlo_t * tl_messages_setGameScore(bool arg_edit_message, bool arg_force, InputPeer arg_peer, int arg_id, InputUser arg_user_id, int arg_score);
tlo_t * tl_messages_setInlineGameScore(bool arg_edit_message, bool arg_force, InputBotInlineMessageID arg_id, InputUser arg_user_id, int arg_score);
tlo_t * tl_messages_getGameHighScores(InputPeer arg_peer, int arg_id, InputUser arg_user_id);
tlo_t * tl_messages_getInlineGameHighScores(InputBotInlineMessageID arg_id, InputUser arg_user_id);
tlo_t * tl_messages_getCommonChats(InputUser arg_user_id, long arg_max_id, int arg_limit);
tlo_t * tl_messages_getWebPage(const char * arg_url, int arg_hash);
tlo_t * tl_messages_toggleDialogPin(bool arg_pinned, InputDialogPeer arg_peer);
tlo_t * tl_messages_reorderPinnedDialogs(bool arg_force, int arg_folder_id, InputDialogPeer *arg_order, int len_arg_order);
tlo_t * tl_messages_getPinnedDialogs(int arg_folder_id);
tlo_t * tl_messages_setBotShippingResults(long arg_query_id, const char * arg_error, ShippingOption *arg_shipping_options, int len_arg_shipping_options);
tlo_t * tl_messages_setBotPrecheckoutResults(bool arg_success, long arg_query_id, const char * arg_error);
tlo_t * tl_messages_uploadMedia(const char * arg_business_connection_id, InputPeer arg_peer, InputMedia arg_media);
tlo_t * tl_messages_sendScreenshotNotification(InputPeer arg_peer, InputReplyTo arg_reply_to, long arg_random_id);
tlo_t * tl_messages_getFavedStickers(long arg_hash);
tlo_t * tl_messages_faveSticker(InputDocument arg_id, Bool arg_unfave);
tlo_t * tl_messages_getUnreadMentions(InputPeer arg_peer, int arg_top_msg_id, int arg_offset_id, int arg_add_offset, int arg_limit, int arg_max_id, int arg_min_id);
tlo_t * tl_messages_readMentions(InputPeer arg_peer, int arg_top_msg_id);
tlo_t * tl_messages_getRecentLocations(InputPeer arg_peer, int arg_limit, long arg_hash);
tlo_t * tl_messages_sendMultiMedia(bool arg_silent, bool arg_background, bool arg_clear_draft, bool arg_noforwards, bool arg_update_stickersets_order, bool arg_invert_media, InputPeer arg_peer, InputReplyTo arg_reply_to, InputSingleMedia *arg_multi_media, int len_arg_multi_media, int arg_schedule_date, InputPeer arg_send_as, InputQuickReplyShortcut arg_quick_reply_shortcut, long arg_effect);
tlo_t * tl_messages_uploadEncryptedFile(InputEncryptedChat arg_peer, InputEncryptedFile arg_file);
tlo_t * tl_messages_searchStickerSets(bool arg_exclude_featured, const char * arg_q, long arg_hash);
tlo_t * tl_messages_getSplitRanges();
tlo_t * tl_messages_markDialogUnread(bool arg_unread, InputDialogPeer arg_peer);
tlo_t * tl_messages_getDialogUnreadMarks();
tlo_t * tl_messages_clearAllDrafts();
tlo_t * tl_messages_updatePinnedMessage(bool arg_silent, bool arg_unpin, bool arg_pm_oneside, InputPeer arg_peer, int arg_id);
tlo_t * tl_messages_sendVote(InputPeer arg_peer, int arg_msg_id, unsigned char * *arg_options, int len_arg_options);
tlo_t * tl_messages_getPollResults(InputPeer arg_peer, int arg_msg_id);
tlo_t * tl_messages_getOnlines(InputPeer arg_peer);
tlo_t * tl_messages_editChatAbout(InputPeer arg_peer, const char * arg_about);
tlo_t * tl_messages_editChatDefaultBannedRights(InputPeer arg_peer, ChatBannedRights arg_banned_rights);
tlo_t * tl_messages_getEmojiKeywords(const char * arg_lang_code);
tlo_t * tl_messages_getEmojiKeywordsDifference(const char * arg_lang_code, int arg_from_version);
tlo_t * tl_messages_getEmojiKeywordsLanguages(const char * *arg_lang_codes, int len_arg_lang_codes);
tlo_t * tl_messages_getEmojiURL(const char * arg_lang_code);
tlo_t * tl_messages_getSearchCounters(InputPeer arg_peer, InputPeer arg_saved_peer_id, int arg_top_msg_id, MessagesFilter *arg_filters, int len_arg_filters);
tlo_t * tl_messages_requestUrlAuth(InputPeer arg_peer, int arg_msg_id, int arg_button_id, const char * arg_url);
tlo_t * tl_messages_acceptUrlAuth(bool arg_write_allowed, InputPeer arg_peer, int arg_msg_id, int arg_button_id, const char * arg_url);
tlo_t * tl_messages_hidePeerSettingsBar(InputPeer arg_peer);
tlo_t * tl_messages_getScheduledHistory(InputPeer arg_peer, long arg_hash);
tlo_t * tl_messages_getScheduledMessages(InputPeer arg_peer, int *arg_id, int len_arg_id);
tlo_t * tl_messages_sendScheduledMessages(InputPeer arg_peer, int *arg_id, int len_arg_id);
tlo_t * tl_messages_deleteScheduledMessages(InputPeer arg_peer, int *arg_id, int len_arg_id);
tlo_t * tl_messages_getPollVotes(InputPeer arg_peer, int arg_id, unsigned char * arg_option, int len_arg_option, const char * arg_offset, int arg_limit);
tlo_t * tl_messages_toggleStickerSets(bool arg_uninstall, bool arg_archive, bool arg_unarchive, InputStickerSet *arg_stickersets, int len_arg_stickersets);
tlo_t * tl_messages_getDialogFilters();
tlo_t * tl_messages_getSuggestedDialogFilters();
tlo_t * tl_messages_updateDialogFilter(int arg_id, DialogFilter arg_filter);
tlo_t * tl_messages_updateDialogFiltersOrder(int *arg_order, int len_arg_order);
tlo_t * tl_messages_getOldFeaturedStickers(int arg_offset, int arg_limit, long arg_hash);
tlo_t * tl_messages_getReplies(InputPeer arg_peer, int arg_msg_id, int arg_offset_id, int arg_offset_date, int arg_add_offset, int arg_limit, int arg_max_id, int arg_min_id, long arg_hash);
tlo_t * tl_messages_getDiscussionMessage(InputPeer arg_peer, int arg_msg_id);
tlo_t * tl_messages_readDiscussion(InputPeer arg_peer, int arg_msg_id, int arg_read_max_id);
tlo_t * tl_messages_unpinAllMessages(InputPeer arg_peer, int arg_top_msg_id);
tlo_t * tl_messages_deleteChat(long arg_chat_id);
tlo_t * tl_messages_deletePhoneCallHistory(bool arg_revoke);
tlo_t * tl_messages_checkHistoryImport(const char * arg_import_head);
tlo_t * tl_messages_initHistoryImport(InputPeer arg_peer, InputFile arg_file, int arg_media_count);
tlo_t * tl_messages_uploadImportedMedia(InputPeer arg_peer, long arg_import_id, const char * arg_file_name, InputMedia arg_media);
tlo_t * tl_messages_startHistoryImport(InputPeer arg_peer, long arg_import_id);
tlo_t * tl_messages_getExportedChatInvites(bool arg_revoked, InputPeer arg_peer, InputUser arg_admin_id, int arg_offset_date, const char * arg_offset_link, int arg_limit);
tlo_t * tl_messages_getExportedChatInvite(InputPeer arg_peer, const char * arg_link);
tlo_t * tl_messages_editExportedChatInvite(bool arg_revoked, InputPeer arg_peer, const char * arg_link, int arg_expire_date, int arg_usage_limit, Bool arg_request_needed, const char * arg_title);
tlo_t * tl_messages_deleteRevokedExportedChatInvites(InputPeer arg_peer, InputUser arg_admin_id);
tlo_t * tl_messages_deleteExportedChatInvite(InputPeer arg_peer, const char * arg_link);
tlo_t * tl_messages_getAdminsWithInvites(InputPeer arg_peer);
tlo_t * tl_messages_getChatInviteImporters(bool arg_requested, bool arg_subscription_expired, InputPeer arg_peer, const char * arg_link, const char * arg_q, int arg_offset_date, InputUser arg_offset_user, int arg_limit);
tlo_t * tl_messages_setHistoryTTL(InputPeer arg_peer, int arg_period);
tlo_t * tl_messages_checkHistoryImportPeer(InputPeer arg_peer);
tlo_t * tl_messages_setChatTheme(InputPeer arg_peer, const char * arg_emoticon);
tlo_t * tl_messages_getMessageReadParticipants(InputPeer arg_peer, int arg_msg_id);
tlo_t * tl_messages_getSearchResultsCalendar(InputPeer arg_peer, InputPeer arg_saved_peer_id, MessagesFilter arg_filter, int arg_offset_id, int arg_offset_date);
tlo_t * tl_messages_getSearchResultsPositions(InputPeer arg_peer, InputPeer arg_saved_peer_id, MessagesFilter arg_filter, int arg_offset_id, int arg_limit);
tlo_t * tl_messages_hideChatJoinRequest(bool arg_approved, InputPeer arg_peer, InputUser arg_user_id);
tlo_t * tl_messages_hideAllChatJoinRequests(bool arg_approved, InputPeer arg_peer, const char * arg_link);
tlo_t * tl_messages_toggleNoForwards(InputPeer arg_peer, Bool arg_enabled);
tlo_t * tl_messages_saveDefaultSendAs(InputPeer arg_peer, InputPeer arg_send_as);
tlo_t * tl_messages_sendReaction(bool arg_big, bool arg_add_to_recent, InputPeer arg_peer, int arg_msg_id, Reaction *arg_reaction, int len_arg_reaction);
tlo_t * tl_messages_getMessagesReactions(InputPeer arg_peer, int *arg_id, int len_arg_id);
tlo_t * tl_messages_getMessageReactionsList(InputPeer arg_peer, int arg_id, Reaction arg_reaction, const char * arg_offset, int arg_limit);
tlo_t * tl_messages_setChatAvailableReactions(InputPeer arg_peer, ChatReactions arg_available_reactions, int arg_reactions_limit, Bool arg_paid_enabled);
tlo_t * tl_messages_getAvailableReactions(int arg_hash);
tlo_t * tl_messages_setDefaultReaction(Reaction arg_reaction);
tlo_t * tl_messages_translateText(InputPeer arg_peer, int *arg_id, int len_arg_id, TextWithEntities *arg_text, int len_arg_text, const char * arg_to_lang);
tlo_t * tl_messages_getUnreadReactions(InputPeer arg_peer, int arg_top_msg_id, int arg_offset_id, int arg_add_offset, int arg_limit, int arg_max_id, int arg_min_id);
tlo_t * tl_messages_readReactions(InputPeer arg_peer, int arg_top_msg_id);
tlo_t * tl_messages_searchSentMedia(const char * arg_q, MessagesFilter arg_filter, int arg_limit);
tlo_t * tl_messages_getAttachMenuBots(long arg_hash);
tlo_t * tl_messages_getAttachMenuBot(InputUser arg_bot);
tlo_t * tl_messages_toggleBotInAttachMenu(bool arg_write_allowed, InputUser arg_bot, Bool arg_enabled);
tlo_t * tl_messages_requestWebView(bool arg_from_bot_menu, bool arg_silent, bool arg_compact, InputPeer arg_peer, InputUser arg_bot, const char * arg_url, const char * arg_start_param, DataJSON arg_theme_params, const char * arg_platform, InputReplyTo arg_reply_to, InputPeer arg_send_as);
tlo_t * tl_messages_prolongWebView(bool arg_silent, InputPeer arg_peer, InputUser arg_bot, long arg_query_id, InputReplyTo arg_reply_to, InputPeer arg_send_as);
tlo_t * tl_messages_requestSimpleWebView(bool arg_from_switch_webview, bool arg_from_side_menu, bool arg_compact, InputUser arg_bot, const char * arg_url, const char * arg_start_param, DataJSON arg_theme_params, const char * arg_platform);
tlo_t * tl_messages_sendWebViewResultMessage(const char * arg_bot_query_id, InputBotInlineResult arg_result);
tlo_t * tl_messages_sendWebViewData(InputUser arg_bot, long arg_random_id, const char * arg_button_text, const char * arg_data);
tlo_t * tl_messages_transcribeAudio(InputPeer arg_peer, int arg_msg_id);
tlo_t * tl_messages_rateTranscribedAudio(InputPeer arg_peer, int arg_msg_id, long arg_transcription_id, Bool arg_good);
tlo_t * tl_messages_getCustomEmojiDocuments(long *arg_document_id, int len_arg_document_id);
tlo_t * tl_messages_getEmojiStickers(long arg_hash);
tlo_t * tl_messages_getFeaturedEmojiStickers(long arg_hash);
tlo_t * tl_messages_reportReaction(InputPeer arg_peer, int arg_id, InputPeer arg_reaction_peer);
tlo_t * tl_messages_getTopReactions(int arg_limit, long arg_hash);
tlo_t * tl_messages_getRecentReactions(int arg_limit, long arg_hash);
tlo_t * tl_messages_clearRecentReactions();
tlo_t * tl_messages_getExtendedMedia(InputPeer arg_peer, int *arg_id, int len_arg_id);
tlo_t * tl_messages_setDefaultHistoryTTL(int arg_period);
tlo_t * tl_messages_getDefaultHistoryTTL();
tlo_t * tl_messages_sendBotRequestedPeer(InputPeer arg_peer, int arg_msg_id, int arg_button_id, InputPeer *arg_requested_peers, int len_arg_requested_peers);
tlo_t * tl_messages_getEmojiGroups(int arg_hash);
tlo_t * tl_messages_getEmojiStatusGroups(int arg_hash);
tlo_t * tl_messages_getEmojiProfilePhotoGroups(int arg_hash);
tlo_t * tl_messages_searchCustomEmoji(const char * arg_emoticon, long arg_hash);
tlo_t * tl_messages_togglePeerTranslations(bool arg_disabled, InputPeer arg_peer);
tlo_t * tl_messages_getBotApp(InputBotApp arg_app, long arg_hash);
tlo_t * tl_messages_requestAppWebView(bool arg_write_allowed, bool arg_compact, InputPeer arg_peer, InputBotApp arg_app, const char * arg_start_param, DataJSON arg_theme_params, const char * arg_platform);
tlo_t * tl_messages_setChatWallPaper(bool arg_for_both, bool arg_revert, InputPeer arg_peer, InputWallPaper arg_wallpaper, WallPaperSettings arg_settings, int arg_id);
tlo_t * tl_messages_searchEmojiStickerSets(bool arg_exclude_featured, const char * arg_q, long arg_hash);
tlo_t * tl_messages_getSavedDialogs(bool arg_exclude_pinned, int arg_offset_date, int arg_offset_id, InputPeer arg_offset_peer, int arg_limit, long arg_hash);
tlo_t * tl_messages_getSavedHistory(InputPeer arg_peer, int arg_offset_id, int arg_offset_date, int arg_add_offset, int arg_limit, int arg_max_id, int arg_min_id, long arg_hash);
tlo_t * tl_messages_deleteSavedHistory(InputPeer arg_peer, int arg_max_id, int arg_min_date, int arg_max_date);
tlo_t * tl_messages_getPinnedSavedDialogs();
tlo_t * tl_messages_toggleSavedDialogPin(bool arg_pinned, InputDialogPeer arg_peer);
tlo_t * tl_messages_reorderPinnedSavedDialogs(bool arg_force, InputDialogPeer *arg_order, int len_arg_order);
tlo_t * tl_messages_getSavedReactionTags(InputPeer arg_peer, long arg_hash);
tlo_t * tl_messages_updateSavedReactionTag(Reaction arg_reaction, const char * arg_title);
tlo_t * tl_messages_getDefaultTagReactions(long arg_hash);
tlo_t * tl_messages_getOutboxReadDate(InputPeer arg_peer, int arg_msg_id);
tlo_t * tl_messages_getQuickReplies(long arg_hash);
tlo_t * tl_messages_reorderQuickReplies(int *arg_order, int len_arg_order);
tlo_t * tl_messages_checkQuickReplyShortcut(const char * arg_shortcut);
tlo_t * tl_messages_editQuickReplyShortcut(int arg_shortcut_id, const char * arg_shortcut);
tlo_t * tl_messages_deleteQuickReplyShortcut(int arg_shortcut_id);
tlo_t * tl_messages_getQuickReplyMessages(int arg_shortcut_id, int *arg_id, int len_arg_id, long arg_hash);
tlo_t * tl_messages_sendQuickReplyMessages(InputPeer arg_peer, int arg_shortcut_id, int *arg_id, int len_arg_id, long *arg_random_id, int len_arg_random_id);
tlo_t * tl_messages_deleteQuickReplyMessages(int arg_shortcut_id, int *arg_id, int len_arg_id);
tlo_t * tl_messages_toggleDialogFilterTags(Bool arg_enabled);
tlo_t * tl_messages_getMyStickers(long arg_offset_id, int arg_limit);
tlo_t * tl_messages_getEmojiStickerGroups(int arg_hash);
tlo_t * tl_messages_getAvailableEffects(int arg_hash);
tlo_t * tl_messages_editFactCheck(InputPeer arg_peer, int arg_msg_id, TextWithEntities arg_text);
tlo_t * tl_messages_deleteFactCheck(InputPeer arg_peer, int arg_msg_id);
tlo_t * tl_messages_getFactCheck(InputPeer arg_peer, int *arg_msg_id, int len_arg_msg_id);
tlo_t * tl_messages_requestMainWebView(bool arg_compact, InputPeer arg_peer, InputUser arg_bot, const char * arg_start_param, DataJSON arg_theme_params, const char * arg_platform);
tlo_t * tl_messages_sendPaidReaction(InputPeer arg_peer, int arg_msg_id, int arg_count, long arg_random_id, Bool arg_private);
tlo_t * tl_messages_togglePaidReactionPrivacy(InputPeer arg_peer, int arg_msg_id, Bool arg_private);
tlo_t * tl_messages_getPaidReactionPrivacy();
tlo_t * tl_updates_getState();
tlo_t * tl_updates_getDifference(int arg_pts, int arg_pts_limit, int arg_pts_total_limit, int arg_date, int arg_qts, int arg_qts_limit);
tlo_t * tl_updates_getChannelDifference(bool arg_force, InputChannel arg_channel, ChannelMessagesFilter arg_filter, int arg_pts, int arg_limit);
tlo_t * tl_photos_updateProfilePhoto(bool arg_fallback, InputUser arg_bot, InputPhoto arg_id);
tlo_t * tl_photos_uploadProfilePhoto(bool arg_fallback, InputUser arg_bot, InputFile arg_file, InputFile arg_video, double arg_video_start_ts, VideoSize arg_video_emoji_markup);
tlo_t * tl_photos_deletePhotos(InputPhoto *arg_id, int len_arg_id);
tlo_t * tl_photos_getUserPhotos(InputUser arg_user_id, int arg_offset, long arg_max_id, int arg_limit);
tlo_t * tl_photos_uploadContactProfilePhoto(bool arg_suggest, bool arg_save, InputUser arg_user_id, InputFile arg_file, InputFile arg_video, double arg_video_start_ts, VideoSize arg_video_emoji_markup);
tlo_t * tl_upload_saveFilePart(long arg_file_id, int arg_file_part, unsigned char * arg_bytes, int len_arg_bytes);
tlo_t * tl_upload_getFile(bool arg_precise, bool arg_cdn_supported, InputFileLocation arg_location, long arg_offset, int arg_limit);
tlo_t * tl_upload_saveBigFilePart(long arg_file_id, int arg_file_part, int arg_file_total_parts, unsigned char * arg_bytes, int len_arg_bytes);
tlo_t * tl_upload_getWebFile(InputWebFileLocation arg_location, int arg_offset, int arg_limit);
tlo_t * tl_upload_getCdnFile(unsigned char * arg_file_token, int len_arg_file_token, long arg_offset, int arg_limit);
tlo_t * tl_upload_reuploadCdnFile(unsigned char * arg_file_token, int len_arg_file_token, unsigned char * arg_request_token, int len_arg_request_token);
tlo_t * tl_upload_getCdnFileHashes(unsigned char * arg_file_token, int len_arg_file_token, long arg_offset);
tlo_t * tl_upload_getFileHashes(InputFileLocation arg_location, long arg_offset);
tlo_t * tl_help_getConfig();
tlo_t * tl_help_getNearestDc();
tlo_t * tl_help_getAppUpdate(const char * arg_source);
tlo_t * tl_help_getInviteText();
tlo_t * tl_help_getSupport();
tlo_t * tl_help_setBotUpdatesStatus(int arg_pending_updates_count, const char * arg_message);
tlo_t * tl_help_getCdnConfig();
tlo_t * tl_help_getRecentMeUrls(const char * arg_referer);
tlo_t * tl_help_getTermsOfServiceUpdate();
tlo_t * tl_help_acceptTermsOfService(DataJSON arg_id);
tlo_t * tl_help_getDeepLinkInfo(const char * arg_path);
tlo_t * tl_help_getAppConfig(int arg_hash);
tlo_t * tl_help_saveAppLog(InputAppEvent *arg_events, int len_arg_events);
tlo_t * tl_help_getPassportConfig(int arg_hash);
tlo_t * tl_help_getSupportName();
tlo_t * tl_help_getUserInfo(InputUser arg_user_id);
tlo_t * tl_help_editUserInfo(InputUser arg_user_id, const char * arg_message, MessageEntity *arg_entities, int len_arg_entities);
tlo_t * tl_help_getPromoData();
tlo_t * tl_help_hidePromoData(InputPeer arg_peer);
tlo_t * tl_help_dismissSuggestion(InputPeer arg_peer, const char * arg_suggestion);
tlo_t * tl_help_getCountriesList(const char * arg_lang_code, int arg_hash);
tlo_t * tl_help_getPremiumPromo();
tlo_t * tl_help_getPeerColors(int arg_hash);
tlo_t * tl_help_getPeerProfileColors(int arg_hash);
tlo_t * tl_help_getTimezonesList(int arg_hash);
tlo_t * tl_channels_readHistory(InputChannel arg_channel, int arg_max_id);
tlo_t * tl_channels_deleteMessages(InputChannel arg_channel, int *arg_id, int len_arg_id);
tlo_t * tl_channels_reportSpam(InputChannel arg_channel, InputPeer arg_participant, int *arg_id, int len_arg_id);
tlo_t * tl_channels_getMessages(InputChannel arg_channel, InputMessage *arg_id, int len_arg_id);
tlo_t * tl_channels_getParticipants(InputChannel arg_channel, ChannelParticipantsFilter arg_filter, int arg_offset, int arg_limit, long arg_hash);
tlo_t * tl_channels_getParticipant(InputChannel arg_channel, InputPeer arg_participant);
tlo_t * tl_channels_getChannels(InputChannel *arg_id, int len_arg_id);
tlo_t * tl_channels_getFullChannel(InputChannel arg_channel);
tlo_t * tl_channels_createChannel(bool arg_broadcast, bool arg_megagroup, bool arg_for_import, bool arg_forum, const char * arg_title, const char * arg_about, InputGeoPoint arg_geo_point, const char * arg_address, int arg_ttl_period);
tlo_t * tl_channels_editAdmin(InputChannel arg_channel, InputUser arg_user_id, ChatAdminRights arg_admin_rights, const char * arg_rank);
tlo_t * tl_channels_editTitle(InputChannel arg_channel, const char * arg_title);
tlo_t * tl_channels_editPhoto(InputChannel arg_channel, InputChatPhoto arg_photo);
tlo_t * tl_channels_checkUsername(InputChannel arg_channel, const char * arg_username);
tlo_t * tl_channels_updateUsername(InputChannel arg_channel, const char * arg_username);
tlo_t * tl_channels_joinChannel(InputChannel arg_channel);
tlo_t * tl_channels_leaveChannel(InputChannel arg_channel);
tlo_t * tl_channels_inviteToChannel(InputChannel arg_channel, InputUser *arg_users, int len_arg_users);
tlo_t * tl_channels_deleteChannel(InputChannel arg_channel);
tlo_t * tl_channels_exportMessageLink(bool arg_grouped, bool arg_thread, InputChannel arg_channel, int arg_id);
tlo_t * tl_channels_toggleSignatures(bool arg_signatures_enabled, bool arg_profiles_enabled, InputChannel arg_channel);
tlo_t * tl_channels_getAdminedPublicChannels(bool arg_by_location, bool arg_check_limit, bool arg_for_personal);
tlo_t * tl_channels_editBanned(InputChannel arg_channel, InputPeer arg_participant, ChatBannedRights arg_banned_rights);
tlo_t * tl_channels_getAdminLog(InputChannel arg_channel, const char * arg_q, ChannelAdminLogEventsFilter arg_events_filter, InputUser *arg_admins, int len_arg_admins, long arg_max_id, long arg_min_id, int arg_limit);
tlo_t * tl_channels_setStickers(InputChannel arg_channel, InputStickerSet arg_stickerset);
tlo_t * tl_channels_readMessageContents(InputChannel arg_channel, int *arg_id, int len_arg_id);
tlo_t * tl_channels_deleteHistory(bool arg_for_everyone, InputChannel arg_channel, int arg_max_id);
tlo_t * tl_channels_togglePreHistoryHidden(InputChannel arg_channel, Bool arg_enabled);
tlo_t * tl_channels_getLeftChannels(int arg_offset);
tlo_t * tl_channels_getGroupsForDiscussion();
tlo_t * tl_channels_setDiscussionGroup(InputChannel arg_broadcast, InputChannel arg_group);
tlo_t * tl_channels_editCreator(InputChannel arg_channel, InputUser arg_user_id, InputCheckPasswordSRP arg_password);
tlo_t * tl_channels_editLocation(InputChannel arg_channel, InputGeoPoint arg_geo_point, const char * arg_address);
tlo_t * tl_channels_toggleSlowMode(InputChannel arg_channel, int arg_seconds);
tlo_t * tl_channels_getInactiveChannels();
tlo_t * tl_channels_convertToGigagroup(InputChannel arg_channel);
tlo_t * tl_channels_viewSponsoredMessage(InputChannel arg_channel, unsigned char * arg_random_id, int len_arg_random_id);
tlo_t * tl_channels_getSponsoredMessages(InputChannel arg_channel);
tlo_t * tl_channels_getSendAs(InputPeer arg_peer);
tlo_t * tl_channels_deleteParticipantHistory(InputChannel arg_channel, InputPeer arg_participant);
tlo_t * tl_channels_toggleJoinToSend(InputChannel arg_channel, Bool arg_enabled);
tlo_t * tl_channels_toggleJoinRequest(InputChannel arg_channel, Bool arg_enabled);
tlo_t * tl_channels_reorderUsernames(InputChannel arg_channel, const char * *arg_order, int len_arg_order);
tlo_t * tl_channels_toggleUsername(InputChannel arg_channel, const char * arg_username, Bool arg_active);
tlo_t * tl_channels_deactivateAllUsernames(InputChannel arg_channel);
tlo_t * tl_channels_toggleForum(InputChannel arg_channel, Bool arg_enabled);
tlo_t * tl_channels_createForumTopic(InputChannel arg_channel, const char * arg_title, int arg_icon_color, long arg_icon_emoji_id, long arg_random_id, InputPeer arg_send_as);
tlo_t * tl_channels_getForumTopics(InputChannel arg_channel, const char * arg_q, int arg_offset_date, int arg_offset_id, int arg_offset_topic, int arg_limit);
tlo_t * tl_channels_getForumTopicsByID(InputChannel arg_channel, int *arg_topics, int len_arg_topics);
tlo_t * tl_channels_editForumTopic(InputChannel arg_channel, int arg_topic_id, const char * arg_title, long arg_icon_emoji_id, Bool arg_closed, Bool arg_hidden);
tlo_t * tl_channels_updatePinnedForumTopic(InputChannel arg_channel, int arg_topic_id, Bool arg_pinned);
tlo_t * tl_channels_deleteTopicHistory(InputChannel arg_channel, int arg_top_msg_id);
tlo_t * tl_channels_reorderPinnedForumTopics(bool arg_force, InputChannel arg_channel, int *arg_order, int len_arg_order);
tlo_t * tl_channels_toggleAntiSpam(InputChannel arg_channel, Bool arg_enabled);
tlo_t * tl_channels_reportAntiSpamFalsePositive(InputChannel arg_channel, int arg_msg_id);
tlo_t * tl_channels_toggleParticipantsHidden(InputChannel arg_channel, Bool arg_enabled);
tlo_t * tl_channels_clickSponsoredMessage(bool arg_media, bool arg_fullscreen, InputChannel arg_channel, unsigned char * arg_random_id, int len_arg_random_id);
tlo_t * tl_channels_updateColor(bool arg_for_profile, InputChannel arg_channel, int arg_color, long arg_background_emoji_id);
tlo_t * tl_channels_toggleViewForumAsMessages(InputChannel arg_channel, Bool arg_enabled);
tlo_t * tl_channels_getChannelRecommendations(InputChannel arg_channel);
tlo_t * tl_channels_updateEmojiStatus(InputChannel arg_channel, EmojiStatus arg_emoji_status);
tlo_t * tl_channels_setBoostsToUnblockRestrictions(InputChannel arg_channel, int arg_boosts);
tlo_t * tl_channels_setEmojiStickers(InputChannel arg_channel, InputStickerSet arg_stickerset);
tlo_t * tl_channels_reportSponsoredMessage(InputChannel arg_channel, unsigned char * arg_random_id, int len_arg_random_id, unsigned char * arg_option, int len_arg_option);
tlo_t * tl_channels_restrictSponsoredMessages(InputChannel arg_channel, Bool arg_restricted);
tlo_t * tl_channels_searchPosts(const char * arg_hashtag, int arg_offset_rate, InputPeer arg_offset_peer, int arg_offset_id, int arg_limit);
tlo_t * tl_bots_sendCustomRequest(const char * arg_custom_method, DataJSON arg_params);
tlo_t * tl_bots_answerWebhookJSONQuery(long arg_query_id, DataJSON arg_data);
tlo_t * tl_bots_setBotCommands(BotCommandScope arg_scope, const char * arg_lang_code, BotCommand *arg_commands, int len_arg_commands);
tlo_t * tl_bots_resetBotCommands(BotCommandScope arg_scope, const char * arg_lang_code);
tlo_t * tl_bots_getBotCommands(BotCommandScope arg_scope, const char * arg_lang_code);
tlo_t * tl_bots_setBotMenuButton(InputUser arg_user_id, BotMenuButton arg_button);
tlo_t * tl_bots_getBotMenuButton(InputUser arg_user_id);
tlo_t * tl_bots_setBotBroadcastDefaultAdminRights(ChatAdminRights arg_admin_rights);
tlo_t * tl_bots_setBotGroupDefaultAdminRights(ChatAdminRights arg_admin_rights);
tlo_t * tl_bots_setBotInfo(InputUser arg_bot, const char * arg_lang_code, const char * arg_name, const char * arg_about, const char * arg_description);
tlo_t * tl_bots_getBotInfo(InputUser arg_bot, const char * arg_lang_code);
tlo_t * tl_bots_reorderUsernames(InputUser arg_bot, const char * *arg_order, int len_arg_order);
tlo_t * tl_bots_toggleUsername(InputUser arg_bot, const char * arg_username, Bool arg_active);
tlo_t * tl_bots_canSendMessage(InputUser arg_bot);
tlo_t * tl_bots_allowSendMessage(InputUser arg_bot);
tlo_t * tl_bots_invokeWebViewCustomMethod(InputUser arg_bot, const char * arg_custom_method, DataJSON arg_params);
tlo_t * tl_bots_getPopularAppBots(const char * arg_offset, int arg_limit);
tlo_t * tl_bots_addPreviewMedia(InputUser arg_bot, const char * arg_lang_code, InputMedia arg_media);
tlo_t * tl_bots_editPreviewMedia(InputUser arg_bot, const char * arg_lang_code, InputMedia arg_media, InputMedia arg_new_media);
tlo_t * tl_bots_deletePreviewMedia(InputUser arg_bot, const char * arg_lang_code, InputMedia *arg_media, int len_arg_media);
tlo_t * tl_bots_reorderPreviewMedias(InputUser arg_bot, const char * arg_lang_code, InputMedia *arg_order, int len_arg_order);
tlo_t * tl_bots_getPreviewInfo(InputUser arg_bot, const char * arg_lang_code);
tlo_t * tl_bots_getPreviewMedias(InputUser arg_bot);
tlo_t * tl_payments_getPaymentForm(InputInvoice arg_invoice, DataJSON arg_theme_params);
tlo_t * tl_payments_getPaymentReceipt(InputPeer arg_peer, int arg_msg_id);
tlo_t * tl_payments_validateRequestedInfo(bool arg_save, InputInvoice arg_invoice, PaymentRequestedInfo arg_info);
tlo_t * tl_payments_sendPaymentForm(long arg_form_id, InputInvoice arg_invoice, const char * arg_requested_info_id, const char * arg_shipping_option_id, InputPaymentCredentials arg_credentials, long arg_tip_amount);
tlo_t * tl_payments_getSavedInfo();
tlo_t * tl_payments_clearSavedInfo(bool arg_credentials, bool arg_info);
tlo_t * tl_payments_getBankCardData(const char * arg_number);
tlo_t * tl_payments_exportInvoice(InputMedia arg_invoice_media);
tlo_t * tl_payments_assignAppStoreTransaction(unsigned char * arg_receipt, int len_arg_receipt, InputStorePaymentPurpose arg_purpose);
tlo_t * tl_payments_assignPlayMarketTransaction(DataJSON arg_receipt, InputStorePaymentPurpose arg_purpose);
tlo_t * tl_payments_canPurchasePremium(InputStorePaymentPurpose arg_purpose);
tlo_t * tl_payments_getPremiumGiftCodeOptions(InputPeer arg_boost_peer);
tlo_t * tl_payments_checkGiftCode(const char * arg_slug);
tlo_t * tl_payments_applyGiftCode(const char * arg_slug);
tlo_t * tl_payments_getGiveawayInfo(InputPeer arg_peer, int arg_msg_id);
tlo_t * tl_payments_launchPrepaidGiveaway(InputPeer arg_peer, long arg_giveaway_id, InputStorePaymentPurpose arg_purpose);
tlo_t * tl_payments_getStarsTopupOptions();
tlo_t * tl_payments_getStarsStatus(InputPeer arg_peer);
tlo_t * tl_payments_getStarsTransactions(bool arg_inbound, bool arg_outbound, bool arg_ascending, const char * arg_subscription_id, InputPeer arg_peer, const char * arg_offset, int arg_limit);
tlo_t * tl_payments_sendStarsForm(long arg_form_id, InputInvoice arg_invoice);
tlo_t * tl_payments_refundStarsCharge(InputUser arg_user_id, const char * arg_charge_id);
tlo_t * tl_payments_getStarsRevenueStats(bool arg_dark, InputPeer arg_peer);
tlo_t * tl_payments_getStarsRevenueWithdrawalUrl(InputPeer arg_peer, long arg_stars, InputCheckPasswordSRP arg_password);
tlo_t * tl_payments_getStarsRevenueAdsAccountUrl(InputPeer arg_peer);
tlo_t * tl_payments_getStarsTransactionsByID(InputPeer arg_peer, InputStarsTransaction *arg_id, int len_arg_id);
tlo_t * tl_payments_getStarsGiftOptions(InputUser arg_user_id);
tlo_t * tl_payments_getStarsSubscriptions(bool arg_missing_balance, InputPeer arg_peer, const char * arg_offset);
tlo_t * tl_payments_changeStarsSubscription(InputPeer arg_peer, const char * arg_subscription_id, Bool arg_canceled);
tlo_t * tl_payments_fulfillStarsSubscription(InputPeer arg_peer, const char * arg_subscription_id);
tlo_t * tl_payments_getStarsGiveawayOptions();
tlo_t * tl_payments_getStarGifts(int arg_hash);
tlo_t * tl_payments_getUserStarGifts(InputUser arg_user_id, const char * arg_offset, int arg_limit);
tlo_t * tl_payments_saveStarGift(bool arg_unsave, InputUser arg_user_id, int arg_msg_id);
tlo_t * tl_payments_convertStarGift(InputUser arg_user_id, int arg_msg_id);
tlo_t * tl_stickers_createStickerSet(bool arg_masks, bool arg_emojis, bool arg_text_color, InputUser arg_user_id, const char * arg_title, const char * arg_short_name, InputDocument arg_thumb, InputStickerSetItem *arg_stickers, int len_arg_stickers, const char * arg_software);
tlo_t * tl_stickers_removeStickerFromSet(InputDocument arg_sticker);
tlo_t * tl_stickers_changeStickerPosition(InputDocument arg_sticker, int arg_position);
tlo_t * tl_stickers_addStickerToSet(InputStickerSet arg_stickerset, InputStickerSetItem arg_sticker);
tlo_t * tl_stickers_setStickerSetThumb(InputStickerSet arg_stickerset, InputDocument arg_thumb, long arg_thumb_document_id);
tlo_t * tl_stickers_checkShortName(const char * arg_short_name);
tlo_t * tl_stickers_suggestShortName(const char * arg_title);
tlo_t * tl_stickers_changeSticker(InputDocument arg_sticker, const char * arg_emoji, MaskCoords arg_mask_coords, const char * arg_keywords);
tlo_t * tl_stickers_renameStickerSet(InputStickerSet arg_stickerset, const char * arg_title);
tlo_t * tl_stickers_deleteStickerSet(InputStickerSet arg_stickerset);
tlo_t * tl_stickers_replaceSticker(InputDocument arg_sticker, InputStickerSetItem arg_new_sticker);
tlo_t * tl_phone_getCallConfig();
tlo_t * tl_phone_requestCall(bool arg_video, InputUser arg_user_id, int arg_random_id, unsigned char * arg_g_a_hash, int len_arg_g_a_hash, PhoneCallProtocol arg_protocol);
tlo_t * tl_phone_acceptCall(InputPhoneCall arg_peer, unsigned char * arg_g_b, int len_arg_g_b, PhoneCallProtocol arg_protocol);
tlo_t * tl_phone_confirmCall(InputPhoneCall arg_peer, unsigned char * arg_g_a, int len_arg_g_a, long arg_key_fingerprint, PhoneCallProtocol arg_protocol);
tlo_t * tl_phone_receivedCall(InputPhoneCall arg_peer);
tlo_t * tl_phone_discardCall(bool arg_video, InputPhoneCall arg_peer, int arg_duration, PhoneCallDiscardReason arg_reason, long arg_connection_id);
tlo_t * tl_phone_setCallRating(bool arg_user_initiative, InputPhoneCall arg_peer, int arg_rating, const char * arg_comment);
tlo_t * tl_phone_saveCallDebug(InputPhoneCall arg_peer, DataJSON arg_debug);
tlo_t * tl_phone_sendSignalingData(InputPhoneCall arg_peer, unsigned char * arg_data, int len_arg_data);
tlo_t * tl_phone_createGroupCall(bool arg_rtmp_stream, InputPeer arg_peer, int arg_random_id, const char * arg_title, int arg_schedule_date);
tlo_t * tl_phone_joinGroupCall(bool arg_muted, bool arg_video_stopped, InputGroupCall arg_call, InputPeer arg_join_as, const char * arg_invite_hash, DataJSON arg_params);
tlo_t * tl_phone_leaveGroupCall(InputGroupCall arg_call, int arg_source);
tlo_t * tl_phone_inviteToGroupCall(InputGroupCall arg_call, InputUser *arg_users, int len_arg_users);
tlo_t * tl_phone_discardGroupCall(InputGroupCall arg_call);
tlo_t * tl_phone_toggleGroupCallSettings(bool arg_reset_invite_hash, InputGroupCall arg_call, Bool arg_join_muted);
tlo_t * tl_phone_getGroupCall(InputGroupCall arg_call, int arg_limit);
tlo_t * tl_phone_getGroupParticipants(InputGroupCall arg_call, InputPeer *arg_ids, int len_arg_ids, int *arg_sources, int len_arg_sources, const char * arg_offset, int arg_limit);
tlo_t * tl_phone_checkGroupCall(InputGroupCall arg_call, int *arg_sources, int len_arg_sources);
tlo_t * tl_phone_toggleGroupCallRecord(bool arg_start, bool arg_video, InputGroupCall arg_call, const char * arg_title, Bool arg_video_portrait);
tlo_t * tl_phone_editGroupCallParticipant(InputGroupCall arg_call, InputPeer arg_participant, Bool arg_muted, int arg_volume, Bool arg_raise_hand, Bool arg_video_stopped, Bool arg_video_paused, Bool arg_presentation_paused);
tlo_t * tl_phone_editGroupCallTitle(InputGroupCall arg_call, const char * arg_title);
tlo_t * tl_phone_getGroupCallJoinAs(InputPeer arg_peer);
tlo_t * tl_phone_exportGroupCallInvite(bool arg_can_self_unmute, InputGroupCall arg_call);
tlo_t * tl_phone_toggleGroupCallStartSubscription(InputGroupCall arg_call, Bool arg_subscribed);
tlo_t * tl_phone_startScheduledGroupCall(InputGroupCall arg_call);
tlo_t * tl_phone_saveDefaultGroupCallJoinAs(InputPeer arg_peer, InputPeer arg_join_as);
tlo_t * tl_phone_joinGroupCallPresentation(InputGroupCall arg_call, DataJSON arg_params);
tlo_t * tl_phone_leaveGroupCallPresentation(InputGroupCall arg_call);
tlo_t * tl_phone_getGroupCallStreamChannels(InputGroupCall arg_call);
tlo_t * tl_phone_getGroupCallStreamRtmpUrl(InputPeer arg_peer, Bool arg_revoke);
tlo_t * tl_phone_saveCallLog(InputPhoneCall arg_peer, InputFile arg_file);
tlo_t * tl_langpack_getLangPack(const char * arg_lang_pack, const char * arg_lang_code);
tlo_t * tl_langpack_getStrings(const char * arg_lang_pack, const char * arg_lang_code, const char * *arg_keys, int len_arg_keys);
tlo_t * tl_langpack_getDifference(const char * arg_lang_pack, const char * arg_lang_code, int arg_from_version);
tlo_t * tl_langpack_getLanguages(const char * arg_lang_pack);
tlo_t * tl_langpack_getLanguage(const char * arg_lang_pack, const char * arg_lang_code);
tlo_t * tl_folders_editPeerFolders(InputFolderPeer *arg_folder_peers, int len_arg_folder_peers);
tlo_t * tl_stats_getBroadcastStats(bool arg_dark, InputChannel arg_channel);
tlo_t * tl_stats_loadAsyncGraph(const char * arg_token, long arg_x);
tlo_t * tl_stats_getMegagroupStats(bool arg_dark, InputChannel arg_channel);
tlo_t * tl_stats_getMessagePublicForwards(InputChannel arg_channel, int arg_msg_id, const char * arg_offset, int arg_limit);
tlo_t * tl_stats_getMessageStats(bool arg_dark, InputChannel arg_channel, int arg_msg_id);
tlo_t * tl_stats_getStoryStats(bool arg_dark, InputPeer arg_peer, int arg_id);
tlo_t * tl_stats_getStoryPublicForwards(InputPeer arg_peer, int arg_id, const char * arg_offset, int arg_limit);
tlo_t * tl_stats_getBroadcastRevenueStats(bool arg_dark, InputChannel arg_channel);
tlo_t * tl_stats_getBroadcastRevenueWithdrawalUrl(InputChannel arg_channel, InputCheckPasswordSRP arg_password);
tlo_t * tl_stats_getBroadcastRevenueTransactions(InputChannel arg_channel, int arg_offset, int arg_limit);
tlo_t * tl_chatlists_exportChatlistInvite(InputChatlist arg_chatlist, const char * arg_title, InputPeer *arg_peers, int len_arg_peers);
tlo_t * tl_chatlists_deleteExportedInvite(InputChatlist arg_chatlist, const char * arg_slug);
tlo_t * tl_chatlists_editExportedInvite(InputChatlist arg_chatlist, const char * arg_slug, const char * arg_title, InputPeer *arg_peers, int len_arg_peers);
tlo_t * tl_chatlists_getExportedInvites(InputChatlist arg_chatlist);
tlo_t * tl_chatlists_checkChatlistInvite(const char * arg_slug);
tlo_t * tl_chatlists_joinChatlistInvite(const char * arg_slug, InputPeer *arg_peers, int len_arg_peers);
tlo_t * tl_chatlists_getChatlistUpdates(InputChatlist arg_chatlist);
tlo_t * tl_chatlists_joinChatlistUpdates(InputChatlist arg_chatlist, InputPeer *arg_peers, int len_arg_peers);
tlo_t * tl_chatlists_hideChatlistUpdates(InputChatlist arg_chatlist);
tlo_t * tl_chatlists_getLeaveChatlistSuggestions(InputChatlist arg_chatlist);
tlo_t * tl_chatlists_leaveChatlist(InputChatlist arg_chatlist, InputPeer *arg_peers, int len_arg_peers);
tlo_t * tl_stories_canSendStory(InputPeer arg_peer);
tlo_t * tl_stories_sendStory(bool arg_pinned, bool arg_noforwards, bool arg_fwd_modified, InputPeer arg_peer, InputMedia arg_media, MediaArea *arg_media_areas, int len_arg_media_areas, const char * arg_caption, MessageEntity *arg_entities, int len_arg_entities, InputPrivacyRule *arg_privacy_rules, int len_arg_privacy_rules, long arg_random_id, int arg_period, InputPeer arg_fwd_from_id, int arg_fwd_from_story);
tlo_t * tl_stories_editStory(InputPeer arg_peer, int arg_id, InputMedia arg_media, MediaArea *arg_media_areas, int len_arg_media_areas, const char * arg_caption, MessageEntity *arg_entities, int len_arg_entities, InputPrivacyRule *arg_privacy_rules, int len_arg_privacy_rules);
tlo_t * tl_stories_deleteStories(InputPeer arg_peer, int *arg_id, int len_arg_id);
tlo_t * tl_stories_togglePinned(InputPeer arg_peer, int *arg_id, int len_arg_id, Bool arg_pinned);
tlo_t * tl_stories_getAllStories(bool arg_next, bool arg_hidden, const char * arg_state);
tlo_t * tl_stories_getPinnedStories(InputPeer arg_peer, int arg_offset_id, int arg_limit);
tlo_t * tl_stories_getStoriesArchive(InputPeer arg_peer, int arg_offset_id, int arg_limit);
tlo_t * tl_stories_getStoriesByID(InputPeer arg_peer, int *arg_id, int len_arg_id);
tlo_t * tl_stories_toggleAllStoriesHidden(Bool arg_hidden);
tlo_t * tl_stories_readStories(InputPeer arg_peer, int arg_max_id);
tlo_t * tl_stories_incrementStoryViews(InputPeer arg_peer, int *arg_id, int len_arg_id);
tlo_t * tl_stories_getStoryViewsList(bool arg_just_contacts, bool arg_reactions_first, bool arg_forwards_first, InputPeer arg_peer, const char * arg_q, int arg_id, const char * arg_offset, int arg_limit);
tlo_t * tl_stories_getStoriesViews(InputPeer arg_peer, int *arg_id, int len_arg_id);
tlo_t * tl_stories_exportStoryLink(InputPeer arg_peer, int arg_id);
tlo_t * tl_stories_report(InputPeer arg_peer, int *arg_id, int len_arg_id, unsigned char * arg_option, int len_arg_option, const char * arg_message);
tlo_t * tl_stories_activateStealthMode(bool arg_past, bool arg_future);
tlo_t * tl_stories_sendReaction(bool arg_add_to_recent, InputPeer arg_peer, int arg_story_id, Reaction arg_reaction);
tlo_t * tl_stories_getPeerStories(InputPeer arg_peer);
tlo_t * tl_stories_getAllReadPeerStories();
tlo_t * tl_stories_getPeerMaxIDs(InputPeer *arg_id, int len_arg_id);
tlo_t * tl_stories_getChatsToSend();
tlo_t * tl_stories_togglePeerStoriesHidden(InputPeer arg_peer, Bool arg_hidden);
tlo_t * tl_stories_getStoryReactionsList(bool arg_forwards_first, InputPeer arg_peer, int arg_id, Reaction arg_reaction, const char * arg_offset, int arg_limit);
tlo_t * tl_stories_togglePinnedToTop(InputPeer arg_peer, int *arg_id, int len_arg_id);
tlo_t * tl_stories_searchPosts(const char * arg_hashtag, MediaArea arg_area, const char * arg_offset, int arg_limit);
tlo_t * tl_premium_getBoostsList(bool arg_gifts, InputPeer arg_peer, const char * arg_offset, int arg_limit);
tlo_t * tl_premium_getMyBoosts();
tlo_t * tl_premium_applyBoost(int *arg_slots, int len_arg_slots, InputPeer arg_peer);
tlo_t * tl_premium_getBoostsStatus(InputPeer arg_peer);
tlo_t * tl_premium_getUserBoosts(InputPeer arg_peer, InputUser arg_user_id);
tlo_t * tl_smsjobs_isEligibleToJoin();
tlo_t * tl_smsjobs_join();
tlo_t * tl_smsjobs_leave();
tlo_t * tl_smsjobs_updateSettings(bool arg_allow_international);
tlo_t * tl_smsjobs_getStatus();
tlo_t * tl_smsjobs_getSmsJob(const char * arg_job_id);
tlo_t * tl_smsjobs_finishJob(const char * arg_job_id, const char * arg_error);
tlo_t * tl_fragment_getCollectibleInfo(InputCollectible arg_collectible);
