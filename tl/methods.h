/* generated by tl_generator */

#include "types.h"
#include "tl.h"
#include <stdbool.h>

buf_t tl_resPQ(int128 nonce_, int128 server_nonce_, const char * pq_, long *server_public_key_fingerprints_, int server_public_key_fingerprints_len);
buf_t tl_p_q_inner_data_dc(const char * pq_, const char * p_, const char * q_, int128 nonce_, int128 server_nonce_, int256 new_nonce_, int dc_);
buf_t tl_p_q_inner_data_temp_dc(const char * pq_, const char * p_, const char * q_, int128 nonce_, int128 server_nonce_, int256 new_nonce_, int dc_, int expires_in_);
buf_t tl_server_DH_params_ok(int128 nonce_, int128 server_nonce_, const char * encrypted_answer_);
buf_t tl_server_DH_inner_data(int128 nonce_, int128 server_nonce_, int g_, const char * dh_prime_, const char * g_a_, int server_time_);
buf_t tl_client_DH_inner_data(int128 nonce_, int128 server_nonce_, long retry_id_, const char * g_b_);
buf_t tl_dh_gen_ok(int128 nonce_, int128 server_nonce_, int128 new_nonce_hash1_);
buf_t tl_dh_gen_retry(int128 nonce_, int128 server_nonce_, int128 new_nonce_hash2_);
buf_t tl_dh_gen_fail(int128 nonce_, int128 server_nonce_, int128 new_nonce_hash3_);
buf_t tl_bind_auth_key_inner(long nonce_, long temp_auth_key_id_, long perm_auth_key_id_, long temp_session_id_, int expires_at_);
buf_t tl_rpc_result(long req_msg_id_, const char * result_);
buf_t tl_rpc_error(int error_code_, const char * error_message_);
buf_t tl_rpc_answer_unknown();
buf_t tl_rpc_answer_dropped_running();
buf_t tl_rpc_answer_dropped(long msg_id_, int seq_no_, int bytes_);
buf_t tl_future_salt(int valid_since_, int valid_until_, long salt_);
buf_t tl_future_salts(long req_msg_id_, int now_, FutureSalt *salts_, int salts_len);
buf_t tl_pong(long msg_id_, long ping_id_);
buf_t tl_destroy_session_ok(long session_id_);
buf_t tl_destroy_session_none(long session_id_);
buf_t tl_new_session_created(long first_msg_id_, long unique_id_, long server_salt_);
buf_t tl_msg_container(buf_t *messages_, int messages_len);
buf_t tl_msg_copy(Message *orig_message_);
buf_t tl_gzip_packed(const char * packed_data_);
buf_t tl_msgs_ack(long *msg_ids_, int msg_ids_len);
buf_t tl_bad_msg_notification(long bad_msg_id_, int bad_msg_seqno_, int error_code_);
buf_t tl_bad_server_salt(long bad_msg_id_, int bad_msg_seqno_, int error_code_, long new_server_salt_);
buf_t tl_msg_resend_req(long *msg_ids_, int msg_ids_len);
buf_t tl_msgs_state_req(long *msg_ids_, int msg_ids_len);
buf_t tl_msgs_state_info(long req_msg_id_, const char * info_);
buf_t tl_msgs_all_info(long *msg_ids_, int msg_ids_len, const char * info_);
buf_t tl_msg_detailed_info(long msg_id_, long answer_msg_id_, int bytes_, int status_);
buf_t tl_msg_new_detailed_info(long answer_msg_id_, int bytes_, int status_);
buf_t tl_destroy_auth_key_ok();
buf_t tl_destroy_auth_key_none();
buf_t tl_destroy_auth_key_fail();
buf_t tl_req_pq_multi(int128 nonce_);
buf_t tl_req_DH_params(int128 nonce_, int128 server_nonce_, const char * p_, const char * q_, long public_key_fingerprint_, const char * encrypted_data_);
buf_t tl_set_client_DH_params(int128 nonce_, int128 server_nonce_, const char * encrypted_data_);
buf_t tl_rpc_drop_answer(long req_msg_id_);
buf_t tl_get_future_salts(int num_);
buf_t tl_ping(long ping_id_);
buf_t tl_ping_delay_disconnect(long ping_id_, int disconnect_delay_);
buf_t tl_destroy_session(long session_id_);
buf_t tl_http_wait(int max_delay_, int wait_after_, int max_wait_);
buf_t tl_destroy_auth_key();
buf_t tl_true();
buf_t tl_boolFalse();
buf_t tl_boolTrue();
buf_t tl_vector();
buf_t tl_error(int code_, const char * text_);
buf_t tl_ipPort(int ipv4_, int port_);
buf_t tl_ipPortSecret(int ipv4_, int port_, buf_t *secret_);
buf_t tl_accessPointRule(const char * phone_prefix_rules_, int dc_id_, IpPort *ips_, int ips_len);
buf_t tl_help_configSimple(int date_, int expires_, AccessPointRule *rules_, int rules_len);
buf_t tl_inputPeerPhotoFileLocationLegacy(bool big_, InputPeer *peer_, long volume_id_, int local_id_);
buf_t tl_inputStickerSetThumbLegacy(InputStickerSet *stickerset_, long volume_id_, int local_id_);
buf_t tl_invokeWithBusinessConnectionPrefix(const char * connection_id_);
buf_t tl_invokeWithGooglePlayIntegrityPrefix(const char * nonce_, const char * token_);
buf_t tl_invokeWithApnsSecretPrefix(const char * nonce_, const char * secret_);
buf_t tl_inputPeerEmpty();
buf_t tl_inputPeerSelf();
buf_t tl_inputPeerChat(long chat_id_);
buf_t tl_inputPeerUser(long user_id_, long access_hash_);
buf_t tl_inputPeerChannel(long channel_id_, long access_hash_);
buf_t tl_inputPeerUserFromMessage(InputPeer *peer_, int msg_id_, long user_id_);
buf_t tl_inputPeerChannelFromMessage(InputPeer *peer_, int msg_id_, long channel_id_);
buf_t tl_inputUserEmpty();
buf_t tl_inputUserSelf();
buf_t tl_inputUser(long user_id_, long access_hash_);
buf_t tl_inputUserFromMessage(InputPeer *peer_, int msg_id_, long user_id_);
buf_t tl_inputPhoneContact(long client_id_, const char * phone_, const char * first_name_, const char * last_name_);
buf_t tl_inputFile(long id_, int parts_, const char * name_, const char * md5_checksum_);
buf_t tl_inputFileBig(long id_, int parts_, const char * name_);
buf_t tl_inputFileStoryDocument(InputDocument *id_);
buf_t tl_inputMediaEmpty();
buf_t tl_inputMediaUploadedPhoto(bool spoiler_, InputFile *file_, InputDocument *stickers_, int stickers_len, int ttl_seconds_);
buf_t tl_inputMediaPhoto(bool spoiler_, InputPhoto *id_, int ttl_seconds_);
buf_t tl_inputMediaGeoPoint(InputGeoPoint *geo_point_);
buf_t tl_inputMediaContact(const char * phone_number_, const char * first_name_, const char * last_name_, const char * vcard_);
buf_t tl_inputMediaUploadedDocument(bool nosound_video_, bool force_file_, bool spoiler_, InputFile *file_, InputFile *thumb_, const char * mime_type_, DocumentAttribute *attributes_, int attributes_len, InputDocument *stickers_, int stickers_len, int ttl_seconds_);
buf_t tl_inputMediaDocument(bool spoiler_, InputDocument *id_, int ttl_seconds_, const char * query_);
buf_t tl_inputMediaVenue(InputGeoPoint *geo_point_, const char * title_, const char * address_, const char * provider_, const char * venue_id_, const char * venue_type_);
buf_t tl_inputMediaPhotoExternal(bool spoiler_, const char * url_, int ttl_seconds_);
buf_t tl_inputMediaDocumentExternal(bool spoiler_, const char * url_, int ttl_seconds_);
buf_t tl_inputMediaGame(InputGame *id_);
buf_t tl_inputMediaInvoice(const char * title_, const char * description_, InputWebDocument *photo_, Invoice *invoice_, buf_t *payload_, const char * provider_, DataJSON *provider_data_, const char * start_param_, InputMedia *extended_media_);
buf_t tl_inputMediaGeoLive(bool stopped_, InputGeoPoint *geo_point_, int heading_, int period_, int proximity_notification_radius_);
buf_t tl_inputMediaPoll(Poll *poll_, buf_t *correct_answers_, int correct_answers_len, const char * solution_, MessageEntity *solution_entities_, int solution_entities_len);
buf_t tl_inputMediaDice(const char * emoticon_);
buf_t tl_inputMediaStory(InputPeer *peer_, int id_);
buf_t tl_inputMediaWebPage(bool force_large_media_, bool force_small_media_, bool optional_, const char * url_);
buf_t tl_inputMediaPaidMedia(long stars_amount_, InputMedia *extended_media_, int extended_media_len, const char * payload_);
buf_t tl_inputChatPhotoEmpty();
buf_t tl_inputChatUploadedPhoto(InputFile *file_, InputFile *video_, double video_start_ts_, VideoSize *video_emoji_markup_);
buf_t tl_inputChatPhoto(InputPhoto *id_);
buf_t tl_inputGeoPointEmpty();
buf_t tl_inputGeoPoint(double lat_, double long_, int accuracy_radius_);
buf_t tl_inputPhotoEmpty();
buf_t tl_inputPhoto(long id_, long access_hash_, buf_t *file_reference_);
buf_t tl_inputFileLocation(long volume_id_, int local_id_, long secret_, buf_t *file_reference_);
buf_t tl_inputEncryptedFileLocation(long id_, long access_hash_);
buf_t tl_inputDocumentFileLocation(long id_, long access_hash_, buf_t *file_reference_, const char * thumb_size_);
buf_t tl_inputSecureFileLocation(long id_, long access_hash_);
buf_t tl_inputTakeoutFileLocation();
buf_t tl_inputPhotoFileLocation(long id_, long access_hash_, buf_t *file_reference_, const char * thumb_size_);
buf_t tl_inputPhotoLegacyFileLocation(long id_, long access_hash_, buf_t *file_reference_, long volume_id_, int local_id_, long secret_);
buf_t tl_inputPeerPhotoFileLocation(bool big_, InputPeer *peer_, long photo_id_);
buf_t tl_inputStickerSetThumb(InputStickerSet *stickerset_, int thumb_version_);
buf_t tl_inputGroupCallStream(InputGroupCall *call_, long time_ms_, int scale_, int video_channel_, int video_quality_);
buf_t tl_peerUser(long user_id_);
buf_t tl_peerChat(long chat_id_);
buf_t tl_peerChannel(long channel_id_);
buf_t tl_storage_fileUnknown();
buf_t tl_storage_filePartial();
buf_t tl_storage_fileJpeg();
buf_t tl_storage_fileGif();
buf_t tl_storage_filePng();
buf_t tl_storage_filePdf();
buf_t tl_storage_fileMp3();
buf_t tl_storage_fileMov();
buf_t tl_storage_fileMp4();
buf_t tl_storage_fileWebp();
buf_t tl_userEmpty(long id_);
buf_t tl_user(bool self_, bool contact_, bool mutual_contact_, bool deleted_, bool bot_, bool bot_chat_history_, bool bot_nochats_, bool verified_, bool restricted_, bool min_, bool bot_inline_geo_, bool support_, bool scam_, bool apply_min_photo_, bool fake_, bool bot_attach_menu_, bool premium_, bool attach_menu_enabled_, bool bot_can_edit_, bool close_friend_, bool stories_hidden_, bool stories_unavailable_, bool contact_require_premium_, bool bot_business_, bool bot_has_main_app_, long id_, long access_hash_, const char * first_name_, const char * last_name_, const char * username_, const char * phone_, UserProfilePhoto *photo_, UserStatus *status_, int bot_info_version_, RestrictionReason *restriction_reason_, int restriction_reason_len, const char * bot_inline_placeholder_, const char * lang_code_, EmojiStatus *emoji_status_, Username *usernames_, int usernames_len, int stories_max_id_, PeerColor *color_, PeerColor *profile_color_, int bot_active_users_);
buf_t tl_userProfilePhotoEmpty();
buf_t tl_userProfilePhoto(bool has_video_, bool personal_, long photo_id_, buf_t *stripped_thumb_, int dc_id_);
buf_t tl_userStatusEmpty();
buf_t tl_userStatusOnline(int expires_);
buf_t tl_userStatusOffline(int was_online_);
buf_t tl_userStatusRecently(bool by_me_);
buf_t tl_userStatusLastWeek(bool by_me_);
buf_t tl_userStatusLastMonth(bool by_me_);
buf_t tl_chatEmpty(long id_);
buf_t tl_chat(bool creator_, bool left_, bool deactivated_, bool call_active_, bool call_not_empty_, bool noforwards_, long id_, const char * title_, ChatPhoto *photo_, int participants_count_, int date_, int version_, InputChannel *migrated_to_, ChatAdminRights *admin_rights_, ChatBannedRights *default_banned_rights_);
buf_t tl_chatForbidden(long id_, const char * title_);
buf_t tl_channel(bool creator_, bool left_, bool broadcast_, bool verified_, bool megagroup_, bool restricted_, bool signatures_, bool min_, bool scam_, bool has_link_, bool has_geo_, bool slowmode_enabled_, bool call_active_, bool call_not_empty_, bool fake_, bool gigagroup_, bool noforwards_, bool join_to_send_, bool join_request_, bool forum_, bool stories_hidden_, bool stories_hidden_min_, bool stories_unavailable_, bool signature_profiles_, long id_, long access_hash_, const char * title_, const char * username_, ChatPhoto *photo_, int date_, RestrictionReason *restriction_reason_, int restriction_reason_len, ChatAdminRights *admin_rights_, ChatBannedRights *banned_rights_, ChatBannedRights *default_banned_rights_, int participants_count_, Username *usernames_, int usernames_len, int stories_max_id_, PeerColor *color_, PeerColor *profile_color_, EmojiStatus *emoji_status_, int level_, int subscription_until_date_);
buf_t tl_channelForbidden(bool broadcast_, bool megagroup_, long id_, long access_hash_, const char * title_, int until_date_);
buf_t tl_chatFull(bool can_set_username_, bool has_scheduled_, bool translations_disabled_, long id_, const char * about_, ChatParticipants *participants_, Photo *chat_photo_, PeerNotifySettings *notify_settings_, ExportedChatInvite *exported_invite_, BotInfo *bot_info_, int bot_info_len, int pinned_msg_id_, int folder_id_, InputGroupCall *call_, int ttl_period_, Peer *groupcall_default_join_as_, const char * theme_emoticon_, int requests_pending_, long *recent_requesters_, int recent_requesters_len, ChatReactions *available_reactions_, int reactions_limit_);
buf_t tl_channelFull(bool can_view_participants_, bool can_set_username_, bool can_set_stickers_, bool hidden_prehistory_, bool can_set_location_, bool has_scheduled_, bool can_view_stats_, bool blocked_, bool can_delete_channel_, bool antispam_, bool participants_hidden_, bool translations_disabled_, bool stories_pinned_available_, bool view_forum_as_messages_, bool restricted_sponsored_, bool can_view_revenue_, bool paid_media_allowed_, bool can_view_stars_revenue_, bool paid_reactions_available_, long id_, const char * about_, int participants_count_, int admins_count_, int kicked_count_, int banned_count_, int online_count_, int read_inbox_max_id_, int read_outbox_max_id_, int unread_count_, Photo *chat_photo_, PeerNotifySettings *notify_settings_, ExportedChatInvite *exported_invite_, BotInfo *bot_info_, int bot_info_len, long migrated_from_chat_id_, int migrated_from_max_id_, int pinned_msg_id_, StickerSet *stickerset_, int available_min_id_, int folder_id_, long linked_chat_id_, ChannelLocation *location_, int slowmode_seconds_, int slowmode_next_send_date_, int stats_dc_, int pts_, InputGroupCall *call_, int ttl_period_, const char * *pending_suggestions_, int pending_suggestions_len, Peer *groupcall_default_join_as_, const char * theme_emoticon_, int requests_pending_, long *recent_requesters_, int recent_requesters_len, Peer *default_send_as_, ChatReactions *available_reactions_, int reactions_limit_, PeerStories *stories_, WallPaper *wallpaper_, int boosts_applied_, int boosts_unrestrict_, StickerSet *emojiset_);
buf_t tl_chatParticipant(long user_id_, long inviter_id_, int date_);
buf_t tl_chatParticipantCreator(long user_id_);
buf_t tl_chatParticipantAdmin(long user_id_, long inviter_id_, int date_);
buf_t tl_chatParticipantsForbidden(long chat_id_, ChatParticipant *self_participant_);
buf_t tl_chatParticipants(long chat_id_, ChatParticipant *participants_, int participants_len, int version_);
buf_t tl_chatPhotoEmpty();
buf_t tl_chatPhoto(bool has_video_, long photo_id_, buf_t *stripped_thumb_, int dc_id_);
buf_t tl_messageEmpty(int id_, Peer *peer_id_);
buf_t tl_message(bool out_, bool mentioned_, bool media_unread_, bool silent_, bool post_, bool from_scheduled_, bool legacy_, bool edit_hide_, bool pinned_, bool noforwards_, bool invert_media_, bool offline_, int id_, Peer *from_id_, int from_boosts_applied_, Peer *peer_id_, Peer *saved_peer_id_, MessageFwdHeader *fwd_from_, long via_bot_id_, long via_business_bot_id_, MessageReplyHeader *reply_to_, int date_, const char * message_, MessageMedia *media_, ReplyMarkup *reply_markup_, MessageEntity *entities_, int entities_len, int views_, int forwards_, MessageReplies *replies_, int edit_date_, const char * post_author_, long grouped_id_, MessageReactions *reactions_, RestrictionReason *restriction_reason_, int restriction_reason_len, int ttl_period_, int quick_reply_shortcut_id_, long effect_, FactCheck *factcheck_);
buf_t tl_messageService(bool out_, bool mentioned_, bool media_unread_, bool silent_, bool post_, bool legacy_, int id_, Peer *from_id_, Peer *peer_id_, MessageReplyHeader *reply_to_, int date_, MessageAction *action_, int ttl_period_);
buf_t tl_messageMediaEmpty();
buf_t tl_messageMediaPhoto(bool spoiler_, Photo *photo_, int ttl_seconds_);
buf_t tl_messageMediaGeo(GeoPoint *geo_);
buf_t tl_messageMediaContact(const char * phone_number_, const char * first_name_, const char * last_name_, const char * vcard_, long user_id_);
buf_t tl_messageMediaUnsupported();
buf_t tl_messageMediaDocument(bool nopremium_, bool spoiler_, bool video_, bool round_, bool voice_, Document *document_, Document *alt_documents_, int alt_documents_len, int ttl_seconds_);
buf_t tl_messageMediaWebPage(bool force_large_media_, bool force_small_media_, bool manual_, bool safe_, WebPage *webpage_);
buf_t tl_messageMediaVenue(GeoPoint *geo_, const char * title_, const char * address_, const char * provider_, const char * venue_id_, const char * venue_type_);
buf_t tl_messageMediaGame(Game *game_);
buf_t tl_messageMediaInvoice(bool shipping_address_requested_, bool test_, const char * title_, const char * description_, WebDocument *photo_, int receipt_msg_id_, const char * currency_, long total_amount_, const char * start_param_, MessageExtendedMedia *extended_media_);
buf_t tl_messageMediaGeoLive(GeoPoint *geo_, int heading_, int period_, int proximity_notification_radius_);
buf_t tl_messageMediaPoll(Poll *poll_, PollResults *results_);
buf_t tl_messageMediaDice(int value_, const char * emoticon_);
buf_t tl_messageMediaStory(bool via_mention_, Peer *peer_, int id_, StoryItem *story_);
buf_t tl_messageMediaGiveaway(bool only_new_subscribers_, bool winners_are_visible_, long *channels_, int channels_len, const char * *countries_iso2_, int countries_iso2_len, const char * prize_description_, int quantity_, int months_, long stars_, int until_date_);
buf_t tl_messageMediaGiveawayResults(bool only_new_subscribers_, bool refunded_, long channel_id_, int additional_peers_count_, int launch_msg_id_, int winners_count_, int unclaimed_count_, long *winners_, int winners_len, int months_, long stars_, const char * prize_description_, int until_date_);
buf_t tl_messageMediaPaidMedia(long stars_amount_, MessageExtendedMedia *extended_media_, int extended_media_len);
buf_t tl_messageActionEmpty();
buf_t tl_messageActionChatCreate(const char * title_, long *users_, int users_len);
buf_t tl_messageActionChatEditTitle(const char * title_);
buf_t tl_messageActionChatEditPhoto(Photo *photo_);
buf_t tl_messageActionChatDeletePhoto();
buf_t tl_messageActionChatAddUser(long *users_, int users_len);
buf_t tl_messageActionChatDeleteUser(long user_id_);
buf_t tl_messageActionChatJoinedByLink(long inviter_id_);
buf_t tl_messageActionChannelCreate(const char * title_);
buf_t tl_messageActionChatMigrateTo(long channel_id_);
buf_t tl_messageActionChannelMigrateFrom(const char * title_, long chat_id_);
buf_t tl_messageActionPinMessage();
buf_t tl_messageActionHistoryClear();
buf_t tl_messageActionGameScore(long game_id_, int score_);
buf_t tl_messageActionPaymentSentMe(bool recurring_init_, bool recurring_used_, const char * currency_, long total_amount_, buf_t *payload_, PaymentRequestedInfo *info_, const char * shipping_option_id_, PaymentCharge *charge_);
buf_t tl_messageActionPaymentSent(bool recurring_init_, bool recurring_used_, const char * currency_, long total_amount_, const char * invoice_slug_);
buf_t tl_messageActionPhoneCall(bool video_, long call_id_, PhoneCallDiscardReason *reason_, int duration_);
buf_t tl_messageActionScreenshotTaken();
buf_t tl_messageActionCustomAction(const char * message_);
buf_t tl_messageActionBotAllowed(bool attach_menu_, bool from_request_, const char * domain_, BotApp *app_);
buf_t tl_messageActionSecureValuesSentMe(SecureValue *values_, int values_len, SecureCredentialsEncrypted *credentials_);
buf_t tl_messageActionSecureValuesSent(SecureValueType *types_, int types_len);
buf_t tl_messageActionContactSignUp();
buf_t tl_messageActionGeoProximityReached(Peer *from_id_, Peer *to_id_, int distance_);
buf_t tl_messageActionGroupCall(InputGroupCall *call_, int duration_);
buf_t tl_messageActionInviteToGroupCall(InputGroupCall *call_, long *users_, int users_len);
buf_t tl_messageActionSetMessagesTTL(int period_, long auto_setting_from_);
buf_t tl_messageActionGroupCallScheduled(InputGroupCall *call_, int schedule_date_);
buf_t tl_messageActionSetChatTheme(const char * emoticon_);
buf_t tl_messageActionChatJoinedByRequest();
buf_t tl_messageActionWebViewDataSentMe(const char * text_, const char * data_);
buf_t tl_messageActionWebViewDataSent(const char * text_);
buf_t tl_messageActionGiftPremium(const char * currency_, long amount_, int months_, const char * crypto_currency_, long crypto_amount_);
buf_t tl_messageActionTopicCreate(const char * title_, int icon_color_, long icon_emoji_id_);
buf_t tl_messageActionTopicEdit(const char * title_, long icon_emoji_id_, Bool *closed_, Bool *hidden_);
buf_t tl_messageActionSuggestProfilePhoto(Photo *photo_);
buf_t tl_messageActionRequestedPeer(int button_id_, Peer *peers_, int peers_len);
buf_t tl_messageActionSetChatWallPaper(bool same_, bool for_both_, WallPaper *wallpaper_);
buf_t tl_messageActionGiftCode(bool via_giveaway_, bool unclaimed_, Peer *boost_peer_, int months_, const char * slug_, const char * currency_, long amount_, const char * crypto_currency_, long crypto_amount_);
buf_t tl_messageActionGiveawayLaunch(long stars_);
buf_t tl_messageActionGiveawayResults(bool stars_, int winners_count_, int unclaimed_count_);
buf_t tl_messageActionBoostApply(int boosts_);
buf_t tl_messageActionRequestedPeerSentMe(int button_id_, RequestedPeer *peers_, int peers_len);
buf_t tl_messageActionPaymentRefunded(Peer *peer_, const char * currency_, long total_amount_, buf_t *payload_, PaymentCharge *charge_);
buf_t tl_messageActionGiftStars(const char * currency_, long amount_, long stars_, const char * crypto_currency_, long crypto_amount_, const char * transaction_id_);
buf_t tl_messageActionPrizeStars(bool unclaimed_, long stars_, const char * transaction_id_, Peer *boost_peer_, int giveaway_msg_id_);
buf_t tl_messageActionStarGift(bool name_hidden_, bool saved_, bool converted_, StarGift *gift_, TextWithEntities *message_, long convert_stars_);
buf_t tl_dialog(bool pinned_, bool unread_mark_, bool view_forum_as_messages_, Peer *peer_, int top_message_, int read_inbox_max_id_, int read_outbox_max_id_, int unread_count_, int unread_mentions_count_, int unread_reactions_count_, PeerNotifySettings *notify_settings_, int pts_, DraftMessage *draft_, int folder_id_, int ttl_period_);
buf_t tl_dialogFolder(bool pinned_, Folder *folder_, Peer *peer_, int top_message_, int unread_muted_peers_count_, int unread_unmuted_peers_count_, int unread_muted_messages_count_, int unread_unmuted_messages_count_);
buf_t tl_photoEmpty(long id_);
buf_t tl_photo(bool has_stickers_, long id_, long access_hash_, buf_t *file_reference_, int date_, PhotoSize *sizes_, int sizes_len, VideoSize *video_sizes_, int video_sizes_len, int dc_id_);
buf_t tl_photoSizeEmpty(const char * type_);
buf_t tl_photoSize(const char * type_, int w_, int h_, int size_);
buf_t tl_photoCachedSize(const char * type_, int w_, int h_, buf_t *bytes_);
buf_t tl_photoStrippedSize(const char * type_, buf_t *bytes_);
buf_t tl_photoSizeProgressive(const char * type_, int w_, int h_, int *sizes_, int sizes_len);
buf_t tl_photoPathSize(const char * type_, buf_t *bytes_);
buf_t tl_geoPointEmpty();
buf_t tl_geoPoint(double long_, double lat_, long access_hash_, int accuracy_radius_);
buf_t tl_auth_sentCode(auth_SentCodeType *type_, const char * phone_code_hash_, auth_CodeType *next_type_, int timeout_);
buf_t tl_auth_sentCodeSuccess(auth_Authorization *authorization_);
buf_t tl_auth_authorization(bool setup_password_required_, int otherwise_relogin_days_, int tmp_sessions_, buf_t *future_auth_token_, User *user_);
buf_t tl_auth_authorizationSignUpRequired(help_TermsOfService *terms_of_service_);
buf_t tl_auth_exportedAuthorization(long id_, buf_t *bytes_);
buf_t tl_inputNotifyPeer(InputPeer *peer_);
buf_t tl_inputNotifyUsers();
buf_t tl_inputNotifyChats();
buf_t tl_inputNotifyBroadcasts();
buf_t tl_inputNotifyForumTopic(InputPeer *peer_, int top_msg_id_);
buf_t tl_inputPeerNotifySettings(Bool *show_previews_, Bool *silent_, int mute_until_, NotificationSound *sound_, Bool *stories_muted_, Bool *stories_hide_sender_, NotificationSound *stories_sound_);
buf_t tl_peerNotifySettings(Bool *show_previews_, Bool *silent_, int mute_until_, NotificationSound *ios_sound_, NotificationSound *android_sound_, NotificationSound *other_sound_, Bool *stories_muted_, Bool *stories_hide_sender_, NotificationSound *stories_ios_sound_, NotificationSound *stories_android_sound_, NotificationSound *stories_other_sound_);
buf_t tl_peerSettings(bool report_spam_, bool add_contact_, bool block_contact_, bool share_contact_, bool need_contacts_exception_, bool report_geo_, bool autoarchived_, bool invite_members_, bool request_chat_broadcast_, bool business_bot_paused_, bool business_bot_can_reply_, int geo_distance_, const char * request_chat_title_, int request_chat_date_, long business_bot_id_, const char * business_bot_manage_url_);
buf_t tl_wallPaper(long id_, bool creator_, bool default_, bool pattern_, bool dark_, long access_hash_, const char * slug_, Document *document_, WallPaperSettings *settings_);
buf_t tl_wallPaperNoFile(long id_, bool default_, bool dark_, WallPaperSettings *settings_);
buf_t tl_inputReportReasonSpam();
buf_t tl_inputReportReasonViolence();
buf_t tl_inputReportReasonPornography();
buf_t tl_inputReportReasonChildAbuse();
buf_t tl_inputReportReasonOther();
buf_t tl_inputReportReasonCopyright();
buf_t tl_inputReportReasonGeoIrrelevant();
buf_t tl_inputReportReasonFake();
buf_t tl_inputReportReasonIllegalDrugs();
buf_t tl_inputReportReasonPersonalDetails();
buf_t tl_userFull(bool blocked_, bool phone_calls_available_, bool phone_calls_private_, bool can_pin_message_, bool has_scheduled_, bool video_calls_available_, bool voice_messages_forbidden_, bool translations_disabled_, bool stories_pinned_available_, bool blocked_my_stories_from_, bool wallpaper_overridden_, bool contact_require_premium_, bool read_dates_private_, bool sponsored_enabled_, long id_, const char * about_, PeerSettings *settings_, Photo *personal_photo_, Photo *profile_photo_, Photo *fallback_photo_, PeerNotifySettings *notify_settings_, BotInfo *bot_info_, int pinned_msg_id_, int common_chats_count_, int folder_id_, int ttl_period_, const char * theme_emoticon_, const char * private_forward_name_, ChatAdminRights *bot_group_admin_rights_, ChatAdminRights *bot_broadcast_admin_rights_, PremiumGiftOption *premium_gifts_, int premium_gifts_len, WallPaper *wallpaper_, PeerStories *stories_, BusinessWorkHours *business_work_hours_, BusinessLocation *business_location_, BusinessGreetingMessage *business_greeting_message_, BusinessAwayMessage *business_away_message_, BusinessIntro *business_intro_, Birthday *birthday_, long personal_channel_id_, int personal_channel_message_, int stargifts_count_);
buf_t tl_contact(long user_id_, Bool *mutual_);
buf_t tl_importedContact(long user_id_, long client_id_);
buf_t tl_contactStatus(long user_id_, UserStatus *status_);
buf_t tl_contacts_contactsNotModified();
buf_t tl_contacts_contacts(Contact *contacts_, int contacts_len, int saved_count_, User *users_, int users_len);
buf_t tl_contacts_importedContacts(ImportedContact *imported_, int imported_len, PopularContact *popular_invites_, int popular_invites_len, long *retry_contacts_, int retry_contacts_len, User *users_, int users_len);
buf_t tl_contacts_blocked(PeerBlocked *blocked_, int blocked_len, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_contacts_blockedSlice(int count_, PeerBlocked *blocked_, int blocked_len, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_messages_dialogs(Dialog *dialogs_, int dialogs_len, Message *messages_, int messages_len, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_messages_dialogsSlice(int count_, Dialog *dialogs_, int dialogs_len, Message *messages_, int messages_len, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_messages_dialogsNotModified(int count_);
buf_t tl_messages_messages(Message *messages_, int messages_len, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_messages_messagesSlice(bool inexact_, int count_, int next_rate_, int offset_id_offset_, Message *messages_, int messages_len, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_messages_channelMessages(bool inexact_, int pts_, int count_, int offset_id_offset_, Message *messages_, int messages_len, ForumTopic *topics_, int topics_len, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_messages_messagesNotModified(int count_);
buf_t tl_messages_chats(Chat *chats_, int chats_len);
buf_t tl_messages_chatsSlice(int count_, Chat *chats_, int chats_len);
buf_t tl_messages_chatFull(ChatFull *full_chat_, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_messages_affectedHistory(int pts_, int pts_count_, int offset_);
buf_t tl_inputMessagesFilterEmpty();
buf_t tl_inputMessagesFilterPhotos();
buf_t tl_inputMessagesFilterVideo();
buf_t tl_inputMessagesFilterPhotoVideo();
buf_t tl_inputMessagesFilterDocument();
buf_t tl_inputMessagesFilterUrl();
buf_t tl_inputMessagesFilterGif();
buf_t tl_inputMessagesFilterVoice();
buf_t tl_inputMessagesFilterMusic();
buf_t tl_inputMessagesFilterChatPhotos();
buf_t tl_inputMessagesFilterPhoneCalls(bool missed_);
buf_t tl_inputMessagesFilterRoundVoice();
buf_t tl_inputMessagesFilterRoundVideo();
buf_t tl_inputMessagesFilterMyMentions();
buf_t tl_inputMessagesFilterGeo();
buf_t tl_inputMessagesFilterContacts();
buf_t tl_inputMessagesFilterPinned();
buf_t tl_updateNewMessage(Message *message_, int pts_, int pts_count_);
buf_t tl_updateMessageID(int id_, long random_id_);
buf_t tl_updateDeleteMessages(int *messages_, int messages_len, int pts_, int pts_count_);
buf_t tl_updateUserTyping(long user_id_, SendMessageAction *action_);
buf_t tl_updateChatUserTyping(long chat_id_, Peer *from_id_, SendMessageAction *action_);
buf_t tl_updateChatParticipants(ChatParticipants *participants_);
buf_t tl_updateUserStatus(long user_id_, UserStatus *status_);
buf_t tl_updateUserName(long user_id_, const char * first_name_, const char * last_name_, Username *usernames_, int usernames_len);
buf_t tl_updateNewAuthorization(bool unconfirmed_, long hash_, int date_, const char * device_, const char * location_);
buf_t tl_updateNewEncryptedMessage(EncryptedMessage *message_, int qts_);
buf_t tl_updateEncryptedChatTyping(int chat_id_);
buf_t tl_updateEncryption(EncryptedChat *chat_, int date_);
buf_t tl_updateEncryptedMessagesRead(int chat_id_, int max_date_, int date_);
buf_t tl_updateChatParticipantAdd(long chat_id_, long user_id_, long inviter_id_, int date_, int version_);
buf_t tl_updateChatParticipantDelete(long chat_id_, long user_id_, int version_);
buf_t tl_updateDcOptions(DcOption *dc_options_, int dc_options_len);
buf_t tl_updateNotifySettings(NotifyPeer *peer_, PeerNotifySettings *notify_settings_);
buf_t tl_updateServiceNotification(bool popup_, bool invert_media_, int inbox_date_, const char * type_, const char * message_, MessageMedia *media_, MessageEntity *entities_, int entities_len);
buf_t tl_updatePrivacy(PrivacyKey *key_, PrivacyRule *rules_, int rules_len);
buf_t tl_updateUserPhone(long user_id_, const char * phone_);
buf_t tl_updateReadHistoryInbox(int folder_id_, Peer *peer_, int max_id_, int still_unread_count_, int pts_, int pts_count_);
buf_t tl_updateReadHistoryOutbox(Peer *peer_, int max_id_, int pts_, int pts_count_);
buf_t tl_updateWebPage(WebPage *webpage_, int pts_, int pts_count_);
buf_t tl_updateReadMessagesContents(int *messages_, int messages_len, int pts_, int pts_count_, int date_);
buf_t tl_updateChannelTooLong(long channel_id_, int pts_);
buf_t tl_updateChannel(long channel_id_);
buf_t tl_updateNewChannelMessage(Message *message_, int pts_, int pts_count_);
buf_t tl_updateReadChannelInbox(int folder_id_, long channel_id_, int max_id_, int still_unread_count_, int pts_);
buf_t tl_updateDeleteChannelMessages(long channel_id_, int *messages_, int messages_len, int pts_, int pts_count_);
buf_t tl_updateChannelMessageViews(long channel_id_, int id_, int views_);
buf_t tl_updateChatParticipantAdmin(long chat_id_, long user_id_, Bool *is_admin_, int version_);
buf_t tl_updateNewStickerSet(messages_StickerSet *stickerset_);
buf_t tl_updateStickerSetsOrder(bool masks_, bool emojis_, long *order_, int order_len);
buf_t tl_updateStickerSets(bool masks_, bool emojis_);
buf_t tl_updateSavedGifs();
buf_t tl_updateBotInlineQuery(long query_id_, long user_id_, const char * query_, GeoPoint *geo_, InlineQueryPeerType *peer_type_, const char * offset_);
buf_t tl_updateBotInlineSend(long user_id_, const char * query_, GeoPoint *geo_, const char * id_, InputBotInlineMessageID *msg_id_);
buf_t tl_updateEditChannelMessage(Message *message_, int pts_, int pts_count_);
buf_t tl_updateBotCallbackQuery(long query_id_, long user_id_, Peer *peer_, int msg_id_, long chat_instance_, buf_t *data_, const char * game_short_name_);
buf_t tl_updateEditMessage(Message *message_, int pts_, int pts_count_);
buf_t tl_updateInlineBotCallbackQuery(long query_id_, long user_id_, InputBotInlineMessageID *msg_id_, long chat_instance_, buf_t *data_, const char * game_short_name_);
buf_t tl_updateReadChannelOutbox(long channel_id_, int max_id_);
buf_t tl_updateDraftMessage(Peer *peer_, int top_msg_id_, DraftMessage *draft_);
buf_t tl_updateReadFeaturedStickers();
buf_t tl_updateRecentStickers();
buf_t tl_updateConfig();
buf_t tl_updatePtsChanged();
buf_t tl_updateChannelWebPage(long channel_id_, WebPage *webpage_, int pts_, int pts_count_);
buf_t tl_updateDialogPinned(bool pinned_, int folder_id_, DialogPeer *peer_);
buf_t tl_updatePinnedDialogs(int folder_id_, DialogPeer *order_, int order_len);
buf_t tl_updateBotWebhookJSON(DataJSON *data_);
buf_t tl_updateBotWebhookJSONQuery(long query_id_, DataJSON *data_, int timeout_);
buf_t tl_updateBotShippingQuery(long query_id_, long user_id_, buf_t *payload_, PostAddress *shipping_address_);
buf_t tl_updateBotPrecheckoutQuery(long query_id_, long user_id_, buf_t *payload_, PaymentRequestedInfo *info_, const char * shipping_option_id_, const char * currency_, long total_amount_);
buf_t tl_updatePhoneCall(PhoneCall *phone_call_);
buf_t tl_updateLangPackTooLong(const char * lang_code_);
buf_t tl_updateLangPack(LangPackDifference *difference_);
buf_t tl_updateFavedStickers();
buf_t tl_updateChannelReadMessagesContents(long channel_id_, int top_msg_id_, int *messages_, int messages_len);
buf_t tl_updateContactsReset();
buf_t tl_updateChannelAvailableMessages(long channel_id_, int available_min_id_);
buf_t tl_updateDialogUnreadMark(bool unread_, DialogPeer *peer_);
buf_t tl_updateMessagePoll(long poll_id_, Poll *poll_, PollResults *results_);
buf_t tl_updateChatDefaultBannedRights(Peer *peer_, ChatBannedRights *default_banned_rights_, int version_);
buf_t tl_updateFolderPeers(FolderPeer *folder_peers_, int folder_peers_len, int pts_, int pts_count_);
buf_t tl_updatePeerSettings(Peer *peer_, PeerSettings *settings_);
buf_t tl_updatePeerLocated(PeerLocated *peers_, int peers_len);
buf_t tl_updateNewScheduledMessage(Message *message_);
buf_t tl_updateDeleteScheduledMessages(Peer *peer_, int *messages_, int messages_len);
buf_t tl_updateTheme(Theme *theme_);
buf_t tl_updateGeoLiveViewed(Peer *peer_, int msg_id_);
buf_t tl_updateLoginToken();
buf_t tl_updateMessagePollVote(long poll_id_, Peer *peer_, buf_t *options_, int options_len, int qts_);
buf_t tl_updateDialogFilter(int id_, DialogFilter *filter_);
buf_t tl_updateDialogFilterOrder(int *order_, int order_len);
buf_t tl_updateDialogFilters();
buf_t tl_updatePhoneCallSignalingData(long phone_call_id_, buf_t *data_);
buf_t tl_updateChannelMessageForwards(long channel_id_, int id_, int forwards_);
buf_t tl_updateReadChannelDiscussionInbox(long channel_id_, int top_msg_id_, int read_max_id_, long broadcast_id_, int broadcast_post_);
buf_t tl_updateReadChannelDiscussionOutbox(long channel_id_, int top_msg_id_, int read_max_id_);
buf_t tl_updatePeerBlocked(bool blocked_, bool blocked_my_stories_from_, Peer *peer_id_);
buf_t tl_updateChannelUserTyping(long channel_id_, int top_msg_id_, Peer *from_id_, SendMessageAction *action_);
buf_t tl_updatePinnedMessages(bool pinned_, Peer *peer_, int *messages_, int messages_len, int pts_, int pts_count_);
buf_t tl_updatePinnedChannelMessages(bool pinned_, long channel_id_, int *messages_, int messages_len, int pts_, int pts_count_);
buf_t tl_updateChat(long chat_id_);
buf_t tl_updateGroupCallParticipants(InputGroupCall *call_, GroupCallParticipant *participants_, int participants_len, int version_);
buf_t tl_updateGroupCall(long chat_id_, GroupCall *call_);
buf_t tl_updatePeerHistoryTTL(Peer *peer_, int ttl_period_);
buf_t tl_updateChatParticipant(long chat_id_, int date_, long actor_id_, long user_id_, ChatParticipant *prev_participant_, ChatParticipant *new_participant_, ExportedChatInvite *invite_, int qts_);
buf_t tl_updateChannelParticipant(bool via_chatlist_, long channel_id_, int date_, long actor_id_, long user_id_, ChannelParticipant *prev_participant_, ChannelParticipant *new_participant_, ExportedChatInvite *invite_, int qts_);
buf_t tl_updateBotStopped(long user_id_, int date_, Bool *stopped_, int qts_);
buf_t tl_updateGroupCallConnection(bool presentation_, DataJSON *params_);
buf_t tl_updateBotCommands(Peer *peer_, long bot_id_, BotCommand *commands_, int commands_len);
buf_t tl_updatePendingJoinRequests(Peer *peer_, int requests_pending_, long *recent_requesters_, int recent_requesters_len);
buf_t tl_updateBotChatInviteRequester(Peer *peer_, int date_, long user_id_, const char * about_, ExportedChatInvite *invite_, int qts_);
buf_t tl_updateMessageReactions(Peer *peer_, int msg_id_, int top_msg_id_, MessageReactions *reactions_);
buf_t tl_updateAttachMenuBots();
buf_t tl_updateWebViewResultSent(long query_id_);
buf_t tl_updateBotMenuButton(long bot_id_, BotMenuButton *button_);
buf_t tl_updateSavedRingtones();
buf_t tl_updateTranscribedAudio(bool pending_, Peer *peer_, int msg_id_, long transcription_id_, const char * text_);
buf_t tl_updateReadFeaturedEmojiStickers();
buf_t tl_updateUserEmojiStatus(long user_id_, EmojiStatus *emoji_status_);
buf_t tl_updateRecentEmojiStatuses();
buf_t tl_updateRecentReactions();
buf_t tl_updateMoveStickerSetToTop(bool masks_, bool emojis_, long stickerset_);
buf_t tl_updateMessageExtendedMedia(Peer *peer_, int msg_id_, MessageExtendedMedia *extended_media_, int extended_media_len);
buf_t tl_updateChannelPinnedTopic(bool pinned_, long channel_id_, int topic_id_);
buf_t tl_updateChannelPinnedTopics(long channel_id_, int *order_, int order_len);
buf_t tl_updateUser(long user_id_);
buf_t tl_updateAutoSaveSettings();
buf_t tl_updateStory(Peer *peer_, StoryItem *story_);
buf_t tl_updateReadStories(Peer *peer_, int max_id_);
buf_t tl_updateStoryID(int id_, long random_id_);
buf_t tl_updateStoriesStealthMode(StoriesStealthMode *stealth_mode_);
buf_t tl_updateSentStoryReaction(Peer *peer_, int story_id_, Reaction *reaction_);
buf_t tl_updateBotChatBoost(Peer *peer_, Boost *boost_, int qts_);
buf_t tl_updateChannelViewForumAsMessages(long channel_id_, Bool *enabled_);
buf_t tl_updatePeerWallpaper(bool wallpaper_overridden_, Peer *peer_, WallPaper *wallpaper_);
buf_t tl_updateBotMessageReaction(Peer *peer_, int msg_id_, int date_, Peer *actor_, Reaction *old_reactions_, int old_reactions_len, Reaction *new_reactions_, int new_reactions_len, int qts_);
buf_t tl_updateBotMessageReactions(Peer *peer_, int msg_id_, int date_, ReactionCount *reactions_, int reactions_len, int qts_);
buf_t tl_updateSavedDialogPinned(bool pinned_, DialogPeer *peer_);
buf_t tl_updatePinnedSavedDialogs(DialogPeer *order_, int order_len);
buf_t tl_updateSavedReactionTags();
buf_t tl_updateSmsJob(const char * job_id_);
buf_t tl_updateQuickReplies(QuickReply *quick_replies_, int quick_replies_len);
buf_t tl_updateNewQuickReply(QuickReply *quick_reply_);
buf_t tl_updateDeleteQuickReply(int shortcut_id_);
buf_t tl_updateQuickReplyMessage(Message *message_);
buf_t tl_updateDeleteQuickReplyMessages(int shortcut_id_, int *messages_, int messages_len);
buf_t tl_updateBotBusinessConnect(BotBusinessConnection *connection_, int qts_);
buf_t tl_updateBotNewBusinessMessage(const char * connection_id_, Message *message_, Message *reply_to_message_, int qts_);
buf_t tl_updateBotEditBusinessMessage(const char * connection_id_, Message *message_, Message *reply_to_message_, int qts_);
buf_t tl_updateBotDeleteBusinessMessage(const char * connection_id_, Peer *peer_, int *messages_, int messages_len, int qts_);
buf_t tl_updateNewStoryReaction(int story_id_, Peer *peer_, Reaction *reaction_);
buf_t tl_updateBroadcastRevenueTransactions(Peer *peer_, BroadcastRevenueBalances *balances_);
buf_t tl_updateStarsBalance(long balance_);
buf_t tl_updateBusinessBotCallbackQuery(long query_id_, long user_id_, const char * connection_id_, Message *message_, Message *reply_to_message_, long chat_instance_, buf_t *data_);
buf_t tl_updateStarsRevenueStatus(Peer *peer_, StarsRevenueStatus *status_);
buf_t tl_updateBotPurchasedPaidMedia(long user_id_, const char * payload_, int qts_);
buf_t tl_updatePaidReactionPrivacy(Bool *private_);
buf_t tl_updates_state(int pts_, int qts_, int date_, int seq_, int unread_count_);
buf_t tl_updates_differenceEmpty(int date_, int seq_);
buf_t tl_updates_difference(Message *new_messages_, int new_messages_len, EncryptedMessage *new_encrypted_messages_, int new_encrypted_messages_len, Update *other_updates_, int other_updates_len, Chat *chats_, int chats_len, User *users_, int users_len, updates_State *state_);
buf_t tl_updates_differenceSlice(Message *new_messages_, int new_messages_len, EncryptedMessage *new_encrypted_messages_, int new_encrypted_messages_len, Update *other_updates_, int other_updates_len, Chat *chats_, int chats_len, User *users_, int users_len, updates_State *intermediate_state_);
buf_t tl_updates_differenceTooLong(int pts_);
buf_t tl_updatesTooLong();
buf_t tl_updateShortMessage(bool out_, bool mentioned_, bool media_unread_, bool silent_, int id_, long user_id_, const char * message_, int pts_, int pts_count_, int date_, MessageFwdHeader *fwd_from_, long via_bot_id_, MessageReplyHeader *reply_to_, MessageEntity *entities_, int entities_len, int ttl_period_);
buf_t tl_updateShortChatMessage(bool out_, bool mentioned_, bool media_unread_, bool silent_, int id_, long from_id_, long chat_id_, const char * message_, int pts_, int pts_count_, int date_, MessageFwdHeader *fwd_from_, long via_bot_id_, MessageReplyHeader *reply_to_, MessageEntity *entities_, int entities_len, int ttl_period_);
buf_t tl_updateShort(Update *update_, int date_);
buf_t tl_updatesCombined(Update *updates_, int updates_len, User *users_, int users_len, Chat *chats_, int chats_len, int date_, int seq_start_, int seq_);
buf_t tl_updates(Update *updates_, int updates_len, User *users_, int users_len, Chat *chats_, int chats_len, int date_, int seq_);
buf_t tl_updateShortSentMessage(bool out_, int id_, int pts_, int pts_count_, int date_, MessageMedia *media_, MessageEntity *entities_, int entities_len, int ttl_period_);
buf_t tl_photos_photos(Photo *photos_, int photos_len, User *users_, int users_len);
buf_t tl_photos_photosSlice(int count_, Photo *photos_, int photos_len, User *users_, int users_len);
buf_t tl_photos_photo(Photo *photo_, User *users_, int users_len);
buf_t tl_upload_file(storage_FileType *type_, int mtime_, buf_t *bytes_);
buf_t tl_upload_fileCdnRedirect(int dc_id_, buf_t *file_token_, buf_t *encryption_key_, buf_t *encryption_iv_, FileHash *file_hashes_, int file_hashes_len);
buf_t tl_dcOption(bool ipv6_, bool media_only_, bool tcpo_only_, bool cdn_, bool static_, bool this_port_only_, int id_, const char * ip_address_, int port_, buf_t *secret_);
buf_t tl_config(bool default_p2p_contacts_, bool preload_featured_stickers_, bool revoke_pm_inbox_, bool blocked_mode_, bool force_try_ipv6_, int date_, int expires_, Bool *test_mode_, int this_dc_, DcOption *dc_options_, int dc_options_len, const char * dc_txt_domain_name_, int chat_size_max_, int megagroup_size_max_, int forwarded_count_max_, int online_update_period_ms_, int offline_blur_timeout_ms_, int offline_idle_timeout_ms_, int online_cloud_timeout_ms_, int notify_cloud_delay_ms_, int notify_default_delay_ms_, int push_chat_period_ms_, int push_chat_limit_, int edit_time_limit_, int revoke_time_limit_, int revoke_pm_time_limit_, int rating_e_decay_, int stickers_recent_limit_, int channels_read_media_period_, int tmp_sessions_, int call_receive_timeout_ms_, int call_ring_timeout_ms_, int call_connect_timeout_ms_, int call_packet_timeout_ms_, const char * me_url_prefix_, const char * autoupdate_url_prefix_, const char * gif_search_username_, const char * venue_search_username_, const char * img_search_username_, const char * static_maps_provider_, int caption_length_max_, int message_length_max_, int webfile_dc_id_, const char * suggested_lang_code_, int lang_pack_version_, int base_lang_pack_version_, Reaction *reactions_default_, const char * autologin_token_);
buf_t tl_nearestDc(const char * country_, int this_dc_, int nearest_dc_);
buf_t tl_help_appUpdate(bool can_not_skip_, int id_, const char * version_, const char * text_, MessageEntity *entities_, int entities_len, Document *document_, const char * url_, Document *sticker_);
buf_t tl_help_noAppUpdate();
buf_t tl_help_inviteText(const char * message_);
buf_t tl_encryptedChatEmpty(int id_);
buf_t tl_encryptedChatWaiting(int id_, long access_hash_, int date_, long admin_id_, long participant_id_);
buf_t tl_encryptedChatRequested(int folder_id_, int id_, long access_hash_, int date_, long admin_id_, long participant_id_, buf_t *g_a_);
buf_t tl_encryptedChat(int id_, long access_hash_, int date_, long admin_id_, long participant_id_, buf_t *g_a_or_b_, long key_fingerprint_);
buf_t tl_encryptedChatDiscarded(bool history_deleted_, int id_);
buf_t tl_inputEncryptedChat(int chat_id_, long access_hash_);
buf_t tl_encryptedFileEmpty();
buf_t tl_encryptedFile(long id_, long access_hash_, long size_, int dc_id_, int key_fingerprint_);
buf_t tl_inputEncryptedFileEmpty();
buf_t tl_inputEncryptedFileUploaded(long id_, int parts_, const char * md5_checksum_, int key_fingerprint_);
buf_t tl_inputEncryptedFile(long id_, long access_hash_);
buf_t tl_inputEncryptedFileBigUploaded(long id_, int parts_, int key_fingerprint_);
buf_t tl_encryptedMessage(long random_id_, int chat_id_, int date_, buf_t *bytes_, EncryptedFile *file_);
buf_t tl_encryptedMessageService(long random_id_, int chat_id_, int date_, buf_t *bytes_);
buf_t tl_messages_dhConfigNotModified(buf_t *random_);
buf_t tl_messages_dhConfig(int g_, buf_t *p_, int version_, buf_t *random_);
buf_t tl_messages_sentEncryptedMessage(int date_);
buf_t tl_messages_sentEncryptedFile(int date_, EncryptedFile *file_);
buf_t tl_inputDocumentEmpty();
buf_t tl_inputDocument(long id_, long access_hash_, buf_t *file_reference_);
buf_t tl_documentEmpty(long id_);
buf_t tl_document(long id_, long access_hash_, buf_t *file_reference_, int date_, const char * mime_type_, long size_, PhotoSize *thumbs_, int thumbs_len, VideoSize *video_thumbs_, int video_thumbs_len, int dc_id_, DocumentAttribute *attributes_, int attributes_len);
buf_t tl_help_support(const char * phone_number_, User *user_);
buf_t tl_notifyPeer(Peer *peer_);
buf_t tl_notifyUsers();
buf_t tl_notifyChats();
buf_t tl_notifyBroadcasts();
buf_t tl_notifyForumTopic(Peer *peer_, int top_msg_id_);
buf_t tl_sendMessageTypingAction();
buf_t tl_sendMessageCancelAction();
buf_t tl_sendMessageRecordVideoAction();
buf_t tl_sendMessageUploadVideoAction(int progress_);
buf_t tl_sendMessageRecordAudioAction();
buf_t tl_sendMessageUploadAudioAction(int progress_);
buf_t tl_sendMessageUploadPhotoAction(int progress_);
buf_t tl_sendMessageUploadDocumentAction(int progress_);
buf_t tl_sendMessageGeoLocationAction();
buf_t tl_sendMessageChooseContactAction();
buf_t tl_sendMessageGamePlayAction();
buf_t tl_sendMessageRecordRoundAction();
buf_t tl_sendMessageUploadRoundAction(int progress_);
buf_t tl_speakingInGroupCallAction();
buf_t tl_sendMessageHistoryImportAction(int progress_);
buf_t tl_sendMessageChooseStickerAction();
buf_t tl_sendMessageEmojiInteraction(const char * emoticon_, int msg_id_, DataJSON *interaction_);
buf_t tl_sendMessageEmojiInteractionSeen(const char * emoticon_);
buf_t tl_contacts_found(Peer *my_results_, int my_results_len, Peer *results_, int results_len, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_inputPrivacyKeyStatusTimestamp();
buf_t tl_inputPrivacyKeyChatInvite();
buf_t tl_inputPrivacyKeyPhoneCall();
buf_t tl_inputPrivacyKeyPhoneP2P();
buf_t tl_inputPrivacyKeyForwards();
buf_t tl_inputPrivacyKeyProfilePhoto();
buf_t tl_inputPrivacyKeyPhoneNumber();
buf_t tl_inputPrivacyKeyAddedByPhone();
buf_t tl_inputPrivacyKeyVoiceMessages();
buf_t tl_inputPrivacyKeyAbout();
buf_t tl_inputPrivacyKeyBirthday();
buf_t tl_privacyKeyStatusTimestamp();
buf_t tl_privacyKeyChatInvite();
buf_t tl_privacyKeyPhoneCall();
buf_t tl_privacyKeyPhoneP2P();
buf_t tl_privacyKeyForwards();
buf_t tl_privacyKeyProfilePhoto();
buf_t tl_privacyKeyPhoneNumber();
buf_t tl_privacyKeyAddedByPhone();
buf_t tl_privacyKeyVoiceMessages();
buf_t tl_privacyKeyAbout();
buf_t tl_privacyKeyBirthday();
buf_t tl_inputPrivacyValueAllowContacts();
buf_t tl_inputPrivacyValueAllowAll();
buf_t tl_inputPrivacyValueAllowUsers(InputUser *users_, int users_len);
buf_t tl_inputPrivacyValueDisallowContacts();
buf_t tl_inputPrivacyValueDisallowAll();
buf_t tl_inputPrivacyValueDisallowUsers(InputUser *users_, int users_len);
buf_t tl_inputPrivacyValueAllowChatParticipants(long *chats_, int chats_len);
buf_t tl_inputPrivacyValueDisallowChatParticipants(long *chats_, int chats_len);
buf_t tl_inputPrivacyValueAllowCloseFriends();
buf_t tl_inputPrivacyValueAllowPremium();
buf_t tl_privacyValueAllowContacts();
buf_t tl_privacyValueAllowAll();
buf_t tl_privacyValueAllowUsers(long *users_, int users_len);
buf_t tl_privacyValueDisallowContacts();
buf_t tl_privacyValueDisallowAll();
buf_t tl_privacyValueDisallowUsers(long *users_, int users_len);
buf_t tl_privacyValueAllowChatParticipants(long *chats_, int chats_len);
buf_t tl_privacyValueDisallowChatParticipants(long *chats_, int chats_len);
buf_t tl_privacyValueAllowCloseFriends();
buf_t tl_privacyValueAllowPremium();
buf_t tl_account_privacyRules(PrivacyRule *rules_, int rules_len, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_accountDaysTTL(int days_);
buf_t tl_documentAttributeImageSize(int w_, int h_);
buf_t tl_documentAttributeAnimated();
buf_t tl_documentAttributeSticker(bool mask_, const char * alt_, InputStickerSet *stickerset_, MaskCoords *mask_coords_);
buf_t tl_documentAttributeVideo(bool round_message_, bool supports_streaming_, bool nosound_, double duration_, int w_, int h_, int preload_prefix_size_, double video_start_ts_, const char * video_codec_);
buf_t tl_documentAttributeAudio(bool voice_, int duration_, const char * title_, const char * performer_, buf_t *waveform_);
buf_t tl_documentAttributeFilename(const char * file_name_);
buf_t tl_documentAttributeHasStickers();
buf_t tl_documentAttributeCustomEmoji(bool free_, bool text_color_, const char * alt_, InputStickerSet *stickerset_);
buf_t tl_messages_stickersNotModified();
buf_t tl_messages_stickers(long hash_, Document *stickers_, int stickers_len);
buf_t tl_stickerPack(const char * emoticon_, long *documents_, int documents_len);
buf_t tl_messages_allStickersNotModified();
buf_t tl_messages_allStickers(long hash_, StickerSet *sets_, int sets_len);
buf_t tl_messages_affectedMessages(int pts_, int pts_count_);
buf_t tl_webPageEmpty(long id_, const char * url_);
buf_t tl_webPagePending(long id_, const char * url_, int date_);
buf_t tl_webPage(bool has_large_media_, long id_, const char * url_, const char * display_url_, int hash_, const char * type_, const char * site_name_, const char * title_, const char * description_, Photo *photo_, const char * embed_url_, const char * embed_type_, int embed_width_, int embed_height_, int duration_, const char * author_, Document *document_, Page *cached_page_, WebPageAttribute *attributes_, int attributes_len);
buf_t tl_webPageNotModified(int cached_page_views_);
buf_t tl_authorization(bool current_, bool official_app_, bool password_pending_, bool encrypted_requests_disabled_, bool call_requests_disabled_, bool unconfirmed_, long hash_, const char * device_model_, const char * platform_, const char * system_version_, int api_id_, const char * app_name_, const char * app_version_, int date_created_, int date_active_, const char * ip_, const char * country_, const char * region_);
buf_t tl_account_authorizations(int authorization_ttl_days_, Authorization *authorizations_, int authorizations_len);
buf_t tl_account_password(bool has_recovery_, bool has_secure_values_, bool has_password_, PasswordKdfAlgo *current_algo_, buf_t *srp_B_, long srp_id_, const char * hint_, const char * email_unconfirmed_pattern_, PasswordKdfAlgo *new_algo_, SecurePasswordKdfAlgo *new_secure_algo_, buf_t *secure_random_, int pending_reset_date_, const char * login_email_pattern_);
buf_t tl_account_passwordSettings(const char * email_, SecureSecretSettings *secure_settings_);
buf_t tl_account_passwordInputSettings(PasswordKdfAlgo *new_algo_, buf_t *new_password_hash_, const char * hint_, const char * email_, SecureSecretSettings *new_secure_settings_);
buf_t tl_auth_passwordRecovery(const char * email_pattern_);
buf_t tl_receivedNotifyMessage(int id_, int flags_);
buf_t tl_chatInviteExported(bool revoked_, bool permanent_, bool request_needed_, const char * link_, long admin_id_, int date_, int start_date_, int expire_date_, int usage_limit_, int usage_, int requested_, int subscription_expired_, const char * title_, StarsSubscriptionPricing *subscription_pricing_);
buf_t tl_chatInvitePublicJoinRequests();
buf_t tl_chatInviteAlready(Chat *chat_);
buf_t tl_chatInvite(bool channel_, bool broadcast_, bool public_, bool megagroup_, bool request_needed_, bool verified_, bool scam_, bool fake_, bool can_refulfill_subscription_, const char * title_, const char * about_, Photo *photo_, int participants_count_, User *participants_, int participants_len, int color_, StarsSubscriptionPricing *subscription_pricing_, long subscription_form_id_);
buf_t tl_chatInvitePeek(Chat *chat_, int expires_);
buf_t tl_inputStickerSetEmpty();
buf_t tl_inputStickerSetID(long id_, long access_hash_);
buf_t tl_inputStickerSetShortName(const char * short_name_);
buf_t tl_inputStickerSetAnimatedEmoji();
buf_t tl_inputStickerSetDice(const char * emoticon_);
buf_t tl_inputStickerSetAnimatedEmojiAnimations();
buf_t tl_inputStickerSetPremiumGifts();
buf_t tl_inputStickerSetEmojiGenericAnimations();
buf_t tl_inputStickerSetEmojiDefaultStatuses();
buf_t tl_inputStickerSetEmojiDefaultTopicIcons();
buf_t tl_inputStickerSetEmojiChannelDefaultStatuses();
buf_t tl_stickerSet(bool archived_, bool official_, bool masks_, bool emojis_, bool text_color_, bool channel_emoji_status_, bool creator_, int installed_date_, long id_, long access_hash_, const char * title_, const char * short_name_, PhotoSize *thumbs_, int thumbs_len, int thumb_dc_id_, int thumb_version_, long thumb_document_id_, int count_, int hash_);
buf_t tl_messages_stickerSet(StickerSet *set_, StickerPack *packs_, int packs_len, StickerKeyword *keywords_, int keywords_len, Document *documents_, int documents_len);
buf_t tl_messages_stickerSetNotModified();
buf_t tl_botCommand(const char * command_, const char * description_);
buf_t tl_botInfo(bool has_preview_medias_, long user_id_, const char * description_, Photo *description_photo_, Document *description_document_, BotCommand *commands_, int commands_len, BotMenuButton *menu_button_, const char * privacy_policy_url_);
buf_t tl_keyboardButton(const char * text_);
buf_t tl_keyboardButtonUrl(const char * text_, const char * url_);
buf_t tl_keyboardButtonCallback(bool requires_password_, const char * text_, buf_t *data_);
buf_t tl_keyboardButtonRequestPhone(const char * text_);
buf_t tl_keyboardButtonRequestGeoLocation(const char * text_);
buf_t tl_keyboardButtonSwitchInline(bool same_peer_, const char * text_, const char * query_, InlineQueryPeerType *peer_types_, int peer_types_len);
buf_t tl_keyboardButtonGame(const char * text_);
buf_t tl_keyboardButtonBuy(const char * text_);
buf_t tl_keyboardButtonUrlAuth(const char * text_, const char * fwd_text_, const char * url_, int button_id_);
buf_t tl_inputKeyboardButtonUrlAuth(bool request_write_access_, const char * text_, const char * fwd_text_, const char * url_, InputUser *bot_);
buf_t tl_keyboardButtonRequestPoll(Bool *quiz_, const char * text_);
buf_t tl_inputKeyboardButtonUserProfile(const char * text_, InputUser *user_id_);
buf_t tl_keyboardButtonUserProfile(const char * text_, long user_id_);
buf_t tl_keyboardButtonWebView(const char * text_, const char * url_);
buf_t tl_keyboardButtonSimpleWebView(const char * text_, const char * url_);
buf_t tl_keyboardButtonRequestPeer(const char * text_, int button_id_, RequestPeerType *peer_type_, int max_quantity_);
buf_t tl_inputKeyboardButtonRequestPeer(bool name_requested_, bool username_requested_, bool photo_requested_, const char * text_, int button_id_, RequestPeerType *peer_type_, int max_quantity_);
buf_t tl_keyboardButtonCopy(const char * text_, const char * copy_text_);
buf_t tl_keyboardButtonRow(KeyboardButton *buttons_, int buttons_len);
buf_t tl_replyKeyboardHide(bool selective_);
buf_t tl_replyKeyboardForceReply(bool single_use_, bool selective_, const char * placeholder_);
buf_t tl_replyKeyboardMarkup(bool resize_, bool single_use_, bool selective_, bool persistent_, KeyboardButtonRow *rows_, int rows_len, const char * placeholder_);
buf_t tl_replyInlineMarkup(KeyboardButtonRow *rows_, int rows_len);
buf_t tl_messageEntityUnknown(int offset_, int length_);
buf_t tl_messageEntityMention(int offset_, int length_);
buf_t tl_messageEntityHashtag(int offset_, int length_);
buf_t tl_messageEntityBotCommand(int offset_, int length_);
buf_t tl_messageEntityUrl(int offset_, int length_);
buf_t tl_messageEntityEmail(int offset_, int length_);
buf_t tl_messageEntityBold(int offset_, int length_);
buf_t tl_messageEntityItalic(int offset_, int length_);
buf_t tl_messageEntityCode(int offset_, int length_);
buf_t tl_messageEntityPre(int offset_, int length_, const char * language_);
buf_t tl_messageEntityTextUrl(int offset_, int length_, const char * url_);
buf_t tl_messageEntityMentionName(int offset_, int length_, long user_id_);
buf_t tl_inputMessageEntityMentionName(int offset_, int length_, InputUser *user_id_);
buf_t tl_messageEntityPhone(int offset_, int length_);
buf_t tl_messageEntityCashtag(int offset_, int length_);
buf_t tl_messageEntityUnderline(int offset_, int length_);
buf_t tl_messageEntityStrike(int offset_, int length_);
buf_t tl_messageEntityBankCard(int offset_, int length_);
buf_t tl_messageEntitySpoiler(int offset_, int length_);
buf_t tl_messageEntityCustomEmoji(int offset_, int length_, long document_id_);
buf_t tl_messageEntityBlockquote(bool collapsed_, int offset_, int length_);
buf_t tl_inputChannelEmpty();
buf_t tl_inputChannel(long channel_id_, long access_hash_);
buf_t tl_inputChannelFromMessage(InputPeer *peer_, int msg_id_, long channel_id_);
buf_t tl_contacts_resolvedPeer(Peer *peer_, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_messageRange(int min_id_, int max_id_);
buf_t tl_updates_channelDifferenceEmpty(bool final_, int pts_, int timeout_);
buf_t tl_updates_channelDifferenceTooLong(bool final_, int timeout_, Dialog *dialog_, Message *messages_, int messages_len, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_updates_channelDifference(bool final_, int pts_, int timeout_, Message *new_messages_, int new_messages_len, Update *other_updates_, int other_updates_len, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_channelMessagesFilterEmpty();
buf_t tl_channelMessagesFilter(bool exclude_new_messages_, MessageRange *ranges_, int ranges_len);
buf_t tl_channelParticipant(long user_id_, int date_, int subscription_until_date_);
buf_t tl_channelParticipantSelf(bool via_request_, long user_id_, long inviter_id_, int date_, int subscription_until_date_);
buf_t tl_channelParticipantCreator(long user_id_, ChatAdminRights *admin_rights_, const char * rank_);
buf_t tl_channelParticipantAdmin(bool can_edit_, bool self_, long user_id_, long inviter_id_, long promoted_by_, int date_, ChatAdminRights *admin_rights_, const char * rank_);
buf_t tl_channelParticipantBanned(bool left_, Peer *peer_, long kicked_by_, int date_, ChatBannedRights *banned_rights_);
buf_t tl_channelParticipantLeft(Peer *peer_);
buf_t tl_channelParticipantsRecent();
buf_t tl_channelParticipantsAdmins();
buf_t tl_channelParticipantsKicked(const char * q_);
buf_t tl_channelParticipantsBots();
buf_t tl_channelParticipantsBanned(const char * q_);
buf_t tl_channelParticipantsSearch(const char * q_);
buf_t tl_channelParticipantsContacts(const char * q_);
buf_t tl_channelParticipantsMentions(const char * q_, int top_msg_id_);
buf_t tl_channels_channelParticipants(int count_, ChannelParticipant *participants_, int participants_len, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_channels_channelParticipantsNotModified();
buf_t tl_channels_channelParticipant(ChannelParticipant *participant_, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_help_termsOfService(bool popup_, DataJSON *id_, const char * text_, MessageEntity *entities_, int entities_len, int min_age_confirm_);
buf_t tl_messages_savedGifsNotModified();
buf_t tl_messages_savedGifs(long hash_, Document *gifs_, int gifs_len);
buf_t tl_inputBotInlineMessageMediaAuto(bool invert_media_, const char * message_, MessageEntity *entities_, int entities_len, ReplyMarkup *reply_markup_);
buf_t tl_inputBotInlineMessageText(bool no_webpage_, bool invert_media_, const char * message_, MessageEntity *entities_, int entities_len, ReplyMarkup *reply_markup_);
buf_t tl_inputBotInlineMessageMediaGeo(InputGeoPoint *geo_point_, int heading_, int period_, int proximity_notification_radius_, ReplyMarkup *reply_markup_);
buf_t tl_inputBotInlineMessageMediaVenue(InputGeoPoint *geo_point_, const char * title_, const char * address_, const char * provider_, const char * venue_id_, const char * venue_type_, ReplyMarkup *reply_markup_);
buf_t tl_inputBotInlineMessageMediaContact(const char * phone_number_, const char * first_name_, const char * last_name_, const char * vcard_, ReplyMarkup *reply_markup_);
buf_t tl_inputBotInlineMessageGame(ReplyMarkup *reply_markup_);
buf_t tl_inputBotInlineMessageMediaInvoice(const char * title_, const char * description_, InputWebDocument *photo_, Invoice *invoice_, buf_t *payload_, const char * provider_, DataJSON *provider_data_, ReplyMarkup *reply_markup_);
buf_t tl_inputBotInlineMessageMediaWebPage(bool invert_media_, bool force_large_media_, bool force_small_media_, bool optional_, const char * message_, MessageEntity *entities_, int entities_len, const char * url_, ReplyMarkup *reply_markup_);
buf_t tl_inputBotInlineResult(const char * id_, const char * type_, const char * title_, const char * description_, const char * url_, InputWebDocument *thumb_, InputWebDocument *content_, InputBotInlineMessage *send_message_);
buf_t tl_inputBotInlineResultPhoto(const char * id_, const char * type_, InputPhoto *photo_, InputBotInlineMessage *send_message_);
buf_t tl_inputBotInlineResultDocument(const char * id_, const char * type_, const char * title_, const char * description_, InputDocument *document_, InputBotInlineMessage *send_message_);
buf_t tl_inputBotInlineResultGame(const char * id_, const char * short_name_, InputBotInlineMessage *send_message_);
buf_t tl_botInlineMessageMediaAuto(bool invert_media_, const char * message_, MessageEntity *entities_, int entities_len, ReplyMarkup *reply_markup_);
buf_t tl_botInlineMessageText(bool no_webpage_, bool invert_media_, const char * message_, MessageEntity *entities_, int entities_len, ReplyMarkup *reply_markup_);
buf_t tl_botInlineMessageMediaGeo(GeoPoint *geo_, int heading_, int period_, int proximity_notification_radius_, ReplyMarkup *reply_markup_);
buf_t tl_botInlineMessageMediaVenue(GeoPoint *geo_, const char * title_, const char * address_, const char * provider_, const char * venue_id_, const char * venue_type_, ReplyMarkup *reply_markup_);
buf_t tl_botInlineMessageMediaContact(const char * phone_number_, const char * first_name_, const char * last_name_, const char * vcard_, ReplyMarkup *reply_markup_);
buf_t tl_botInlineMessageMediaInvoice(bool shipping_address_requested_, bool test_, const char * title_, const char * description_, WebDocument *photo_, const char * currency_, long total_amount_, ReplyMarkup *reply_markup_);
buf_t tl_botInlineMessageMediaWebPage(bool invert_media_, bool force_large_media_, bool force_small_media_, bool manual_, bool safe_, const char * message_, MessageEntity *entities_, int entities_len, const char * url_, ReplyMarkup *reply_markup_);
buf_t tl_botInlineResult(const char * id_, const char * type_, const char * title_, const char * description_, const char * url_, WebDocument *thumb_, WebDocument *content_, BotInlineMessage *send_message_);
buf_t tl_botInlineMediaResult(const char * id_, const char * type_, Photo *photo_, Document *document_, const char * title_, const char * description_, BotInlineMessage *send_message_);
buf_t tl_messages_botResults(bool gallery_, long query_id_, const char * next_offset_, InlineBotSwitchPM *switch_pm_, InlineBotWebView *switch_webview_, BotInlineResult *results_, int results_len, int cache_time_, User *users_, int users_len);
buf_t tl_exportedMessageLink(const char * link_, const char * html_);
buf_t tl_messageFwdHeader(bool imported_, bool saved_out_, Peer *from_id_, const char * from_name_, int date_, int channel_post_, const char * post_author_, Peer *saved_from_peer_, int saved_from_msg_id_, Peer *saved_from_id_, const char * saved_from_name_, int saved_date_, const char * psa_type_);
buf_t tl_auth_codeTypeSms();
buf_t tl_auth_codeTypeCall();
buf_t tl_auth_codeTypeFlashCall();
buf_t tl_auth_codeTypeMissedCall();
buf_t tl_auth_codeTypeFragmentSms();
buf_t tl_auth_sentCodeTypeApp(int length_);
buf_t tl_auth_sentCodeTypeSms(int length_);
buf_t tl_auth_sentCodeTypeCall(int length_);
buf_t tl_auth_sentCodeTypeFlashCall(const char * pattern_);
buf_t tl_auth_sentCodeTypeMissedCall(const char * prefix_, int length_);
buf_t tl_auth_sentCodeTypeEmailCode(bool apple_signin_allowed_, bool google_signin_allowed_, const char * email_pattern_, int length_, int reset_available_period_, int reset_pending_date_);
buf_t tl_auth_sentCodeTypeSetUpEmailRequired(bool apple_signin_allowed_, bool google_signin_allowed_);
buf_t tl_auth_sentCodeTypeFragmentSms(const char * url_, int length_);
buf_t tl_auth_sentCodeTypeFirebaseSms(buf_t *nonce_, long play_integrity_project_id_, buf_t *play_integrity_nonce_, const char * receipt_, int push_timeout_, int length_);
buf_t tl_auth_sentCodeTypeSmsWord(const char * beginning_);
buf_t tl_auth_sentCodeTypeSmsPhrase(const char * beginning_);
buf_t tl_messages_botCallbackAnswer(bool alert_, bool has_url_, bool native_ui_, const char * message_, const char * url_, int cache_time_);
buf_t tl_messages_messageEditData(bool caption_);
buf_t tl_inputBotInlineMessageID(int dc_id_, long id_, long access_hash_);
buf_t tl_inputBotInlineMessageID64(int dc_id_, long owner_id_, int id_, long access_hash_);
buf_t tl_inlineBotSwitchPM(const char * text_, const char * start_param_);
buf_t tl_messages_peerDialogs(Dialog *dialogs_, int dialogs_len, Message *messages_, int messages_len, Chat *chats_, int chats_len, User *users_, int users_len, updates_State *state_);
buf_t tl_topPeer(Peer *peer_, double rating_);
buf_t tl_topPeerCategoryBotsPM();
buf_t tl_topPeerCategoryBotsInline();
buf_t tl_topPeerCategoryCorrespondents();
buf_t tl_topPeerCategoryGroups();
buf_t tl_topPeerCategoryChannels();
buf_t tl_topPeerCategoryPhoneCalls();
buf_t tl_topPeerCategoryForwardUsers();
buf_t tl_topPeerCategoryForwardChats();
buf_t tl_topPeerCategoryBotsApp();
buf_t tl_topPeerCategoryPeers(TopPeerCategory *category_, int count_, TopPeer *peers_, int peers_len);
buf_t tl_contacts_topPeersNotModified();
buf_t tl_contacts_topPeers(TopPeerCategoryPeers *categories_, int categories_len, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_contacts_topPeersDisabled();
buf_t tl_draftMessageEmpty(int date_);
buf_t tl_draftMessage(bool no_webpage_, bool invert_media_, InputReplyTo *reply_to_, const char * message_, MessageEntity *entities_, int entities_len, InputMedia *media_, int date_, long effect_);
buf_t tl_messages_featuredStickersNotModified(int count_);
buf_t tl_messages_featuredStickers(bool premium_, long hash_, int count_, StickerSetCovered *sets_, int sets_len, long *unread_, int unread_len);
buf_t tl_messages_recentStickersNotModified();
buf_t tl_messages_recentStickers(long hash_, StickerPack *packs_, int packs_len, Document *stickers_, int stickers_len, int *dates_, int dates_len);
buf_t tl_messages_archivedStickers(int count_, StickerSetCovered *sets_, int sets_len);
buf_t tl_messages_stickerSetInstallResultSuccess();
buf_t tl_messages_stickerSetInstallResultArchive(StickerSetCovered *sets_, int sets_len);
buf_t tl_stickerSetCovered(StickerSet *set_, Document *cover_);
buf_t tl_stickerSetMultiCovered(StickerSet *set_, Document *covers_, int covers_len);
buf_t tl_stickerSetFullCovered(StickerSet *set_, StickerPack *packs_, int packs_len, StickerKeyword *keywords_, int keywords_len, Document *documents_, int documents_len);
buf_t tl_stickerSetNoCovered(StickerSet *set_);
buf_t tl_maskCoords(int n_, double x_, double y_, double zoom_);
buf_t tl_inputStickeredMediaPhoto(InputPhoto *id_);
buf_t tl_inputStickeredMediaDocument(InputDocument *id_);
buf_t tl_game(long id_, long access_hash_, const char * short_name_, const char * title_, const char * description_, Photo *photo_, Document *document_);
buf_t tl_inputGameID(long id_, long access_hash_);
buf_t tl_inputGameShortName(InputUser *bot_id_, const char * short_name_);
buf_t tl_highScore(int pos_, long user_id_, int score_);
buf_t tl_messages_highScores(HighScore *scores_, int scores_len, User *users_, int users_len);
buf_t tl_textEmpty();
buf_t tl_textPlain(const char * text_);
buf_t tl_textBold(RichText *text_);
buf_t tl_textItalic(RichText *text_);
buf_t tl_textUnderline(RichText *text_);
buf_t tl_textStrike(RichText *text_);
buf_t tl_textFixed(RichText *text_);
buf_t tl_textUrl(RichText *text_, const char * url_, long webpage_id_);
buf_t tl_textEmail(RichText *text_, const char * email_);
buf_t tl_textConcat(RichText *texts_, int texts_len);
buf_t tl_textSubscript(RichText *text_);
buf_t tl_textSuperscript(RichText *text_);
buf_t tl_textMarked(RichText *text_);
buf_t tl_textPhone(RichText *text_, const char * phone_);
buf_t tl_textImage(long document_id_, int w_, int h_);
buf_t tl_textAnchor(RichText *text_, const char * name_);
buf_t tl_pageBlockUnsupported();
buf_t tl_pageBlockTitle(RichText *text_);
buf_t tl_pageBlockSubtitle(RichText *text_);
buf_t tl_pageBlockAuthorDate(RichText *author_, int published_date_);
buf_t tl_pageBlockHeader(RichText *text_);
buf_t tl_pageBlockSubheader(RichText *text_);
buf_t tl_pageBlockParagraph(RichText *text_);
buf_t tl_pageBlockPreformatted(RichText *text_, const char * language_);
buf_t tl_pageBlockFooter(RichText *text_);
buf_t tl_pageBlockDivider();
buf_t tl_pageBlockAnchor(const char * name_);
buf_t tl_pageBlockList(PageListItem *items_, int items_len);
buf_t tl_pageBlockBlockquote(RichText *text_, RichText *caption_);
buf_t tl_pageBlockPullquote(RichText *text_, RichText *caption_);
buf_t tl_pageBlockPhoto(long photo_id_, PageCaption *caption_, const char * url_, long webpage_id_);
buf_t tl_pageBlockVideo(bool autoplay_, bool loop_, long video_id_, PageCaption *caption_);
buf_t tl_pageBlockCover(PageBlock *cover_);
buf_t tl_pageBlockEmbed(bool full_width_, bool allow_scrolling_, const char * url_, const char * html_, long poster_photo_id_, int w_, int h_, PageCaption *caption_);
buf_t tl_pageBlockEmbedPost(const char * url_, long webpage_id_, long author_photo_id_, const char * author_, int date_, PageBlock *blocks_, int blocks_len, PageCaption *caption_);
buf_t tl_pageBlockCollage(PageBlock *items_, int items_len, PageCaption *caption_);
buf_t tl_pageBlockSlideshow(PageBlock *items_, int items_len, PageCaption *caption_);
buf_t tl_pageBlockChannel(Chat *channel_);
buf_t tl_pageBlockAudio(long audio_id_, PageCaption *caption_);
buf_t tl_pageBlockKicker(RichText *text_);
buf_t tl_pageBlockTable(bool bordered_, bool striped_, RichText *title_, PageTableRow *rows_, int rows_len);
buf_t tl_pageBlockOrderedList(PageListOrderedItem *items_, int items_len);
buf_t tl_pageBlockDetails(bool open_, PageBlock *blocks_, int blocks_len, RichText *title_);
buf_t tl_pageBlockRelatedArticles(RichText *title_, PageRelatedArticle *articles_, int articles_len);
buf_t tl_pageBlockMap(GeoPoint *geo_, int zoom_, int w_, int h_, PageCaption *caption_);
buf_t tl_phoneCallDiscardReasonMissed();
buf_t tl_phoneCallDiscardReasonDisconnect();
buf_t tl_phoneCallDiscardReasonHangup();
buf_t tl_phoneCallDiscardReasonBusy();
buf_t tl_dataJSON(const char * data_);
buf_t tl_labeledPrice(const char * label_, long amount_);
buf_t tl_invoice(bool test_, bool name_requested_, bool phone_requested_, bool email_requested_, bool shipping_address_requested_, bool flexible_, bool phone_to_provider_, bool email_to_provider_, bool recurring_, const char * currency_, LabeledPrice *prices_, int prices_len, long max_tip_amount_, long *suggested_tip_amounts_, int suggested_tip_amounts_len, const char * terms_url_);
buf_t tl_paymentCharge(const char * id_, const char * provider_charge_id_);
buf_t tl_postAddress(const char * street_line1_, const char * street_line2_, const char * city_, const char * state_, const char * country_iso2_, const char * post_code_);
buf_t tl_paymentRequestedInfo(const char * name_, const char * phone_, const char * email_, PostAddress *shipping_address_);
buf_t tl_paymentSavedCredentialsCard(const char * id_, const char * title_);
buf_t tl_webDocument(const char * url_, long access_hash_, int size_, const char * mime_type_, DocumentAttribute *attributes_, int attributes_len);
buf_t tl_webDocumentNoProxy(const char * url_, int size_, const char * mime_type_, DocumentAttribute *attributes_, int attributes_len);
buf_t tl_inputWebDocument(const char * url_, int size_, const char * mime_type_, DocumentAttribute *attributes_, int attributes_len);
buf_t tl_inputWebFileLocation(const char * url_, long access_hash_);
buf_t tl_inputWebFileGeoPointLocation(InputGeoPoint *geo_point_, long access_hash_, int w_, int h_, int zoom_, int scale_);
buf_t tl_inputWebFileAudioAlbumThumbLocation(bool small_, InputDocument *document_, const char * title_, const char * performer_);
buf_t tl_upload_webFile(int size_, const char * mime_type_, storage_FileType *file_type_, int mtime_, buf_t *bytes_);
buf_t tl_payments_paymentForm(bool can_save_credentials_, bool password_missing_, long form_id_, long bot_id_, const char * title_, const char * description_, WebDocument *photo_, Invoice *invoice_, long provider_id_, const char * url_, const char * native_provider_, DataJSON *native_params_, PaymentFormMethod *additional_methods_, int additional_methods_len, PaymentRequestedInfo *saved_info_, PaymentSavedCredentials *saved_credentials_, int saved_credentials_len, User *users_, int users_len);
buf_t tl_payments_paymentFormStars(long form_id_, long bot_id_, const char * title_, const char * description_, WebDocument *photo_, Invoice *invoice_, User *users_, int users_len);
buf_t tl_payments_paymentFormStarGift(long form_id_, Invoice *invoice_);
buf_t tl_payments_validatedRequestedInfo(const char * id_, ShippingOption *shipping_options_, int shipping_options_len);
buf_t tl_payments_paymentResult(Updates *updates_);
buf_t tl_payments_paymentVerificationNeeded(const char * url_);
buf_t tl_payments_paymentReceipt(int date_, long bot_id_, long provider_id_, const char * title_, const char * description_, WebDocument *photo_, Invoice *invoice_, PaymentRequestedInfo *info_, ShippingOption *shipping_, long tip_amount_, const char * currency_, long total_amount_, const char * credentials_title_, User *users_, int users_len);
buf_t tl_payments_paymentReceiptStars(int date_, long bot_id_, const char * title_, const char * description_, WebDocument *photo_, Invoice *invoice_, const char * currency_, long total_amount_, const char * transaction_id_, User *users_, int users_len);
buf_t tl_payments_savedInfo(bool has_saved_credentials_, PaymentRequestedInfo *saved_info_);
buf_t tl_inputPaymentCredentialsSaved(const char * id_, buf_t *tmp_password_);
buf_t tl_inputPaymentCredentials(bool save_, DataJSON *data_);
buf_t tl_inputPaymentCredentialsApplePay(DataJSON *payment_data_);
buf_t tl_inputPaymentCredentialsGooglePay(DataJSON *payment_token_);
buf_t tl_account_tmpPassword(buf_t *tmp_password_, int valid_until_);
buf_t tl_shippingOption(const char * id_, const char * title_, LabeledPrice *prices_, int prices_len);
buf_t tl_inputStickerSetItem(InputDocument *document_, const char * emoji_, MaskCoords *mask_coords_, const char * keywords_);
buf_t tl_inputPhoneCall(long id_, long access_hash_);
buf_t tl_phoneCallEmpty(long id_);
buf_t tl_phoneCallWaiting(bool video_, long id_, long access_hash_, int date_, long admin_id_, long participant_id_, PhoneCallProtocol *protocol_, int receive_date_);
buf_t tl_phoneCallRequested(bool video_, long id_, long access_hash_, int date_, long admin_id_, long participant_id_, buf_t *g_a_hash_, PhoneCallProtocol *protocol_);
buf_t tl_phoneCallAccepted(bool video_, long id_, long access_hash_, int date_, long admin_id_, long participant_id_, buf_t *g_b_, PhoneCallProtocol *protocol_);
buf_t tl_phoneCall(bool p2p_allowed_, bool video_, long id_, long access_hash_, int date_, long admin_id_, long participant_id_, buf_t *g_a_or_b_, long key_fingerprint_, PhoneCallProtocol *protocol_, PhoneConnection *connections_, int connections_len, int start_date_, DataJSON *custom_parameters_);
buf_t tl_phoneCallDiscarded(bool need_rating_, bool need_debug_, bool video_, long id_, PhoneCallDiscardReason *reason_, int duration_);
buf_t tl_phoneConnection(bool tcp_, long id_, const char * ip_, const char * ipv6_, int port_, buf_t *peer_tag_);
buf_t tl_phoneConnectionWebrtc(bool turn_, bool stun_, long id_, const char * ip_, const char * ipv6_, int port_, const char * username_, const char * password_);
buf_t tl_phoneCallProtocol(bool udp_p2p_, bool udp_reflector_, int min_layer_, int max_layer_, const char * *library_versions_, int library_versions_len);
buf_t tl_phone_phoneCall(PhoneCall *phone_call_, User *users_, int users_len);
buf_t tl_upload_cdnFileReuploadNeeded(buf_t *request_token_);
buf_t tl_upload_cdnFile(buf_t *bytes_);
buf_t tl_cdnPublicKey(int dc_id_, const char * public_key_);
buf_t tl_cdnConfig(CdnPublicKey *public_keys_, int public_keys_len);
buf_t tl_langPackString(const char * key_, const char * value_);
buf_t tl_langPackStringPluralized(const char * key_, const char * zero_value_, const char * one_value_, const char * two_value_, const char * few_value_, const char * many_value_, const char * other_value_);
buf_t tl_langPackStringDeleted(const char * key_);
buf_t tl_langPackDifference(const char * lang_code_, int from_version_, int version_, LangPackString *strings_, int strings_len);
buf_t tl_langPackLanguage(bool official_, bool rtl_, bool beta_, const char * name_, const char * native_name_, const char * lang_code_, const char * base_lang_code_, const char * plural_code_, int strings_count_, int translated_count_, const char * translations_url_);
buf_t tl_channelAdminLogEventActionChangeTitle(const char * prev_value_, const char * new_value_);
buf_t tl_channelAdminLogEventActionChangeAbout(const char * prev_value_, const char * new_value_);
buf_t tl_channelAdminLogEventActionChangeUsername(const char * prev_value_, const char * new_value_);
buf_t tl_channelAdminLogEventActionChangePhoto(Photo *prev_photo_, Photo *new_photo_);
buf_t tl_channelAdminLogEventActionToggleInvites(Bool *new_value_);
buf_t tl_channelAdminLogEventActionToggleSignatures(Bool *new_value_);
buf_t tl_channelAdminLogEventActionUpdatePinned(Message *message_);
buf_t tl_channelAdminLogEventActionEditMessage(Message *prev_message_, Message *new_message_);
buf_t tl_channelAdminLogEventActionDeleteMessage(Message *message_);
buf_t tl_channelAdminLogEventActionParticipantJoin();
buf_t tl_channelAdminLogEventActionParticipantLeave();
buf_t tl_channelAdminLogEventActionParticipantInvite(ChannelParticipant *participant_);
buf_t tl_channelAdminLogEventActionParticipantToggleBan(ChannelParticipant *prev_participant_, ChannelParticipant *new_participant_);
buf_t tl_channelAdminLogEventActionParticipantToggleAdmin(ChannelParticipant *prev_participant_, ChannelParticipant *new_participant_);
buf_t tl_channelAdminLogEventActionChangeStickerSet(InputStickerSet *prev_stickerset_, InputStickerSet *new_stickerset_);
buf_t tl_channelAdminLogEventActionTogglePreHistoryHidden(Bool *new_value_);
buf_t tl_channelAdminLogEventActionDefaultBannedRights(ChatBannedRights *prev_banned_rights_, ChatBannedRights *new_banned_rights_);
buf_t tl_channelAdminLogEventActionStopPoll(Message *message_);
buf_t tl_channelAdminLogEventActionChangeLinkedChat(long prev_value_, long new_value_);
buf_t tl_channelAdminLogEventActionChangeLocation(ChannelLocation *prev_value_, ChannelLocation *new_value_);
buf_t tl_channelAdminLogEventActionToggleSlowMode(int prev_value_, int new_value_);
buf_t tl_channelAdminLogEventActionStartGroupCall(InputGroupCall *call_);
buf_t tl_channelAdminLogEventActionDiscardGroupCall(InputGroupCall *call_);
buf_t tl_channelAdminLogEventActionParticipantMute(GroupCallParticipant *participant_);
buf_t tl_channelAdminLogEventActionParticipantUnmute(GroupCallParticipant *participant_);
buf_t tl_channelAdminLogEventActionToggleGroupCallSetting(Bool *join_muted_);
buf_t tl_channelAdminLogEventActionParticipantJoinByInvite(bool via_chatlist_, ExportedChatInvite *invite_);
buf_t tl_channelAdminLogEventActionExportedInviteDelete(ExportedChatInvite *invite_);
buf_t tl_channelAdminLogEventActionExportedInviteRevoke(ExportedChatInvite *invite_);
buf_t tl_channelAdminLogEventActionExportedInviteEdit(ExportedChatInvite *prev_invite_, ExportedChatInvite *new_invite_);
buf_t tl_channelAdminLogEventActionParticipantVolume(GroupCallParticipant *participant_);
buf_t tl_channelAdminLogEventActionChangeHistoryTTL(int prev_value_, int new_value_);
buf_t tl_channelAdminLogEventActionParticipantJoinByRequest(ExportedChatInvite *invite_, long approved_by_);
buf_t tl_channelAdminLogEventActionToggleNoForwards(Bool *new_value_);
buf_t tl_channelAdminLogEventActionSendMessage(Message *message_);
buf_t tl_channelAdminLogEventActionChangeAvailableReactions(ChatReactions *prev_value_, ChatReactions *new_value_);
buf_t tl_channelAdminLogEventActionChangeUsernames(const char * *prev_value_, int prev_value_len, const char * *new_value_, int new_value_len);
buf_t tl_channelAdminLogEventActionToggleForum(Bool *new_value_);
buf_t tl_channelAdminLogEventActionCreateTopic(ForumTopic *topic_);
buf_t tl_channelAdminLogEventActionEditTopic(ForumTopic *prev_topic_, ForumTopic *new_topic_);
buf_t tl_channelAdminLogEventActionDeleteTopic(ForumTopic *topic_);
buf_t tl_channelAdminLogEventActionPinTopic(ForumTopic *prev_topic_, ForumTopic *new_topic_);
buf_t tl_channelAdminLogEventActionToggleAntiSpam(Bool *new_value_);
buf_t tl_channelAdminLogEventActionChangePeerColor(PeerColor *prev_value_, PeerColor *new_value_);
buf_t tl_channelAdminLogEventActionChangeProfilePeerColor(PeerColor *prev_value_, PeerColor *new_value_);
buf_t tl_channelAdminLogEventActionChangeWallpaper(WallPaper *prev_value_, WallPaper *new_value_);
buf_t tl_channelAdminLogEventActionChangeEmojiStatus(EmojiStatus *prev_value_, EmojiStatus *new_value_);
buf_t tl_channelAdminLogEventActionChangeEmojiStickerSet(InputStickerSet *prev_stickerset_, InputStickerSet *new_stickerset_);
buf_t tl_channelAdminLogEventActionToggleSignatureProfiles(Bool *new_value_);
buf_t tl_channelAdminLogEventActionParticipantSubExtend(ChannelParticipant *prev_participant_, ChannelParticipant *new_participant_);
buf_t tl_channelAdminLogEvent(long id_, int date_, long user_id_, ChannelAdminLogEventAction *action_);
buf_t tl_channels_adminLogResults(ChannelAdminLogEvent *events_, int events_len, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_channelAdminLogEventsFilter(bool join_, bool leave_, bool invite_, bool ban_, bool unban_, bool kick_, bool unkick_, bool promote_, bool demote_, bool info_, bool settings_, bool pinned_, bool edit_, bool delete_, bool group_call_, bool invites_, bool send_, bool forums_, bool sub_extend_);
buf_t tl_popularContact(long client_id_, int importers_);
buf_t tl_messages_favedStickersNotModified();
buf_t tl_messages_favedStickers(long hash_, StickerPack *packs_, int packs_len, Document *stickers_, int stickers_len);
buf_t tl_recentMeUrlUnknown(const char * url_);
buf_t tl_recentMeUrlUser(const char * url_, long user_id_);
buf_t tl_recentMeUrlChat(const char * url_, long chat_id_);
buf_t tl_recentMeUrlChatInvite(const char * url_, ChatInvite *chat_invite_);
buf_t tl_recentMeUrlStickerSet(const char * url_, StickerSetCovered *set_);
buf_t tl_help_recentMeUrls(RecentMeUrl *urls_, int urls_len, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_inputSingleMedia(InputMedia *media_, long random_id_, const char * message_, MessageEntity *entities_, int entities_len);
buf_t tl_webAuthorization(long hash_, long bot_id_, const char * domain_, const char * browser_, const char * platform_, int date_created_, int date_active_, const char * ip_, const char * region_);
buf_t tl_account_webAuthorizations(WebAuthorization *authorizations_, int authorizations_len, User *users_, int users_len);
buf_t tl_inputMessageID(int id_);
buf_t tl_inputMessageReplyTo(int id_);
buf_t tl_inputMessagePinned();
buf_t tl_inputMessageCallbackQuery(int id_, long query_id_);
buf_t tl_inputDialogPeer(InputPeer *peer_);
buf_t tl_inputDialogPeerFolder(int folder_id_);
buf_t tl_dialogPeer(Peer *peer_);
buf_t tl_dialogPeerFolder(int folder_id_);
buf_t tl_messages_foundStickerSetsNotModified();
buf_t tl_messages_foundStickerSets(long hash_, StickerSetCovered *sets_, int sets_len);
buf_t tl_fileHash(long offset_, int limit_, buf_t *hash_);
buf_t tl_inputClientProxy(const char * address_, int port_);
buf_t tl_help_termsOfServiceUpdateEmpty(int expires_);
buf_t tl_help_termsOfServiceUpdate(int expires_, help_TermsOfService *terms_of_service_);
buf_t tl_inputSecureFileUploaded(long id_, int parts_, const char * md5_checksum_, buf_t *file_hash_, buf_t *secret_);
buf_t tl_inputSecureFile(long id_, long access_hash_);
buf_t tl_secureFileEmpty();
buf_t tl_secureFile(long id_, long access_hash_, long size_, int dc_id_, int date_, buf_t *file_hash_, buf_t *secret_);
buf_t tl_secureData(buf_t *data_, buf_t *data_hash_, buf_t *secret_);
buf_t tl_securePlainPhone(const char * phone_);
buf_t tl_securePlainEmail(const char * email_);
buf_t tl_secureValueTypePersonalDetails();
buf_t tl_secureValueTypePassport();
buf_t tl_secureValueTypeDriverLicense();
buf_t tl_secureValueTypeIdentityCard();
buf_t tl_secureValueTypeInternalPassport();
buf_t tl_secureValueTypeAddress();
buf_t tl_secureValueTypeUtilityBill();
buf_t tl_secureValueTypeBankStatement();
buf_t tl_secureValueTypeRentalAgreement();
buf_t tl_secureValueTypePassportRegistration();
buf_t tl_secureValueTypeTemporaryRegistration();
buf_t tl_secureValueTypePhone();
buf_t tl_secureValueTypeEmail();
buf_t tl_secureValue(SecureValueType *type_, SecureData *data_, SecureFile *front_side_, SecureFile *reverse_side_, SecureFile *selfie_, SecureFile *translation_, int translation_len, SecureFile *files_, int files_len, SecurePlainData *plain_data_, buf_t *hash_);
buf_t tl_inputSecureValue(SecureValueType *type_, SecureData *data_, InputSecureFile *front_side_, InputSecureFile *reverse_side_, InputSecureFile *selfie_, InputSecureFile *translation_, int translation_len, InputSecureFile *files_, int files_len, SecurePlainData *plain_data_);
buf_t tl_secureValueHash(SecureValueType *type_, buf_t *hash_);
buf_t tl_secureValueErrorData(SecureValueType *type_, buf_t *data_hash_, const char * field_, const char * text_);
buf_t tl_secureValueErrorFrontSide(SecureValueType *type_, buf_t *file_hash_, const char * text_);
buf_t tl_secureValueErrorReverseSide(SecureValueType *type_, buf_t *file_hash_, const char * text_);
buf_t tl_secureValueErrorSelfie(SecureValueType *type_, buf_t *file_hash_, const char * text_);
buf_t tl_secureValueErrorFile(SecureValueType *type_, buf_t *file_hash_, const char * text_);
buf_t tl_secureValueErrorFiles(SecureValueType *type_, buf_t *file_hash_, int file_hash_len, const char * text_);
buf_t tl_secureValueError(SecureValueType *type_, buf_t *hash_, const char * text_);
buf_t tl_secureValueErrorTranslationFile(SecureValueType *type_, buf_t *file_hash_, const char * text_);
buf_t tl_secureValueErrorTranslationFiles(SecureValueType *type_, buf_t *file_hash_, int file_hash_len, const char * text_);
buf_t tl_secureCredentialsEncrypted(buf_t *data_, buf_t *hash_, buf_t *secret_);
buf_t tl_account_authorizationForm(SecureRequiredType *required_types_, int required_types_len, SecureValue *values_, int values_len, SecureValueError *errors_, int errors_len, User *users_, int users_len, const char * privacy_policy_url_);
buf_t tl_account_sentEmailCode(const char * email_pattern_, int length_);
buf_t tl_help_deepLinkInfoEmpty();
buf_t tl_help_deepLinkInfo(bool update_app_, const char * message_, MessageEntity *entities_, int entities_len);
buf_t tl_savedPhoneContact(const char * phone_, const char * first_name_, const char * last_name_, int date_);
buf_t tl_account_takeout(long id_);
buf_t tl_passwordKdfAlgoUnknown();
buf_t tl_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow(buf_t *salt1_, buf_t *salt2_, int g_, buf_t *p_);
buf_t tl_securePasswordKdfAlgoUnknown();
buf_t tl_securePasswordKdfAlgoPBKDF2HMACSHA512iter100000(buf_t *salt_);
buf_t tl_securePasswordKdfAlgoSHA512(buf_t *salt_);
buf_t tl_secureSecretSettings(SecurePasswordKdfAlgo *secure_algo_, buf_t *secure_secret_, long secure_secret_id_);
buf_t tl_inputCheckPasswordEmpty();
buf_t tl_inputCheckPasswordSRP(long srp_id_, buf_t *A_, buf_t *M1_);
buf_t tl_secureRequiredType(bool native_names_, bool selfie_required_, bool translation_required_, SecureValueType *type_);
buf_t tl_secureRequiredTypeOneOf(SecureRequiredType *types_, int types_len);
buf_t tl_help_passportConfigNotModified();
buf_t tl_help_passportConfig(int hash_, DataJSON *countries_langs_);
buf_t tl_inputAppEvent(double time_, const char * type_, long peer_, JSONValue *data_);
buf_t tl_jsonObjectValue(const char * key_, JSONValue *value_);
buf_t tl_jsonNull();
buf_t tl_jsonBool(Bool *value_);
buf_t tl_jsonNumber(double value_);
buf_t tl_jsonString(const char * value_);
buf_t tl_jsonArray(JSONValue *value_, int value_len);
buf_t tl_jsonObject(JSONObjectValue *value_, int value_len);
buf_t tl_pageTableCell(bool header_, bool align_center_, bool align_right_, bool valign_middle_, bool valign_bottom_, RichText *text_, int colspan_, int rowspan_);
buf_t tl_pageTableRow(PageTableCell *cells_, int cells_len);
buf_t tl_pageCaption(RichText *text_, RichText *credit_);
buf_t tl_pageListItemText(RichText *text_);
buf_t tl_pageListItemBlocks(PageBlock *blocks_, int blocks_len);
buf_t tl_pageListOrderedItemText(const char * num_, RichText *text_);
buf_t tl_pageListOrderedItemBlocks(const char * num_, PageBlock *blocks_, int blocks_len);
buf_t tl_pageRelatedArticle(const char * url_, long webpage_id_, const char * title_, const char * description_, long photo_id_, const char * author_, int published_date_);
buf_t tl_page(bool part_, bool rtl_, bool v2_, const char * url_, PageBlock *blocks_, int blocks_len, Photo *photos_, int photos_len, Document *documents_, int documents_len, int views_);
buf_t tl_help_supportName(const char * name_);
buf_t tl_help_userInfoEmpty();
buf_t tl_help_userInfo(const char * message_, MessageEntity *entities_, int entities_len, const char * author_, int date_);
buf_t tl_pollAnswer(TextWithEntities *text_, buf_t *option_);
buf_t tl_poll(long id_, bool closed_, bool public_voters_, bool multiple_choice_, bool quiz_, TextWithEntities *question_, PollAnswer *answers_, int answers_len, int close_period_, int close_date_);
buf_t tl_pollAnswerVoters(bool chosen_, bool correct_, buf_t *option_, int voters_);
buf_t tl_pollResults(bool min_, PollAnswerVoters *results_, int results_len, int total_voters_, Peer *recent_voters_, int recent_voters_len, const char * solution_, MessageEntity *solution_entities_, int solution_entities_len);
buf_t tl_chatOnlines(int onlines_);
buf_t tl_statsURL(const char * url_);
buf_t tl_chatAdminRights(bool change_info_, bool post_messages_, bool edit_messages_, bool delete_messages_, bool ban_users_, bool invite_users_, bool pin_messages_, bool add_admins_, bool anonymous_, bool manage_call_, bool other_, bool manage_topics_, bool post_stories_, bool edit_stories_, bool delete_stories_);
buf_t tl_chatBannedRights(bool view_messages_, bool send_messages_, bool send_media_, bool send_stickers_, bool send_gifs_, bool send_games_, bool send_inline_, bool embed_links_, bool send_polls_, bool change_info_, bool invite_users_, bool pin_messages_, bool manage_topics_, bool send_photos_, bool send_videos_, bool send_roundvideos_, bool send_audios_, bool send_voices_, bool send_docs_, bool send_plain_, int until_date_);
buf_t tl_inputWallPaper(long id_, long access_hash_);
buf_t tl_inputWallPaperSlug(const char * slug_);
buf_t tl_inputWallPaperNoFile(long id_);
buf_t tl_account_wallPapersNotModified();
buf_t tl_account_wallPapers(long hash_, WallPaper *wallpapers_, int wallpapers_len);
buf_t tl_codeSettings(bool allow_flashcall_, bool current_number_, bool allow_app_hash_, bool allow_missed_call_, bool allow_firebase_, bool unknown_number_, buf_t *logout_tokens_, int logout_tokens_len, const char * token_, Bool *app_sandbox_);
buf_t tl_wallPaperSettings(bool blur_, bool motion_, int background_color_, int second_background_color_, int third_background_color_, int fourth_background_color_, int intensity_, int rotation_, const char * emoticon_);
buf_t tl_autoDownloadSettings(bool disabled_, bool video_preload_large_, bool audio_preload_next_, bool phonecalls_less_data_, bool stories_preload_, int photo_size_max_, long video_size_max_, long file_size_max_, int video_upload_maxbitrate_, int small_queue_active_operations_max_, int large_queue_active_operations_max_);
buf_t tl_account_autoDownloadSettings(AutoDownloadSettings *low_, AutoDownloadSettings *medium_, AutoDownloadSettings *high_);
buf_t tl_emojiKeyword(const char * keyword_, const char * *emoticons_, int emoticons_len);
buf_t tl_emojiKeywordDeleted(const char * keyword_, const char * *emoticons_, int emoticons_len);
buf_t tl_emojiKeywordsDifference(const char * lang_code_, int from_version_, int version_, EmojiKeyword *keywords_, int keywords_len);
buf_t tl_emojiURL(const char * url_);
buf_t tl_emojiLanguage(const char * lang_code_);
buf_t tl_folder(bool autofill_new_broadcasts_, bool autofill_public_groups_, bool autofill_new_correspondents_, int id_, const char * title_, ChatPhoto *photo_);
buf_t tl_inputFolderPeer(InputPeer *peer_, int folder_id_);
buf_t tl_folderPeer(Peer *peer_, int folder_id_);
buf_t tl_messages_searchCounter(bool inexact_, MessagesFilter *filter_, int count_);
buf_t tl_urlAuthResultRequest(bool request_write_access_, User *bot_, const char * domain_);
buf_t tl_urlAuthResultAccepted(const char * url_);
buf_t tl_urlAuthResultDefault();
buf_t tl_channelLocationEmpty();
buf_t tl_channelLocation(GeoPoint *geo_point_, const char * address_);
buf_t tl_peerLocated(Peer *peer_, int expires_, int distance_);
buf_t tl_peerSelfLocated(int expires_);
buf_t tl_restrictionReason(const char * platform_, const char * reason_, const char * text_);
buf_t tl_inputTheme(long id_, long access_hash_);
buf_t tl_inputThemeSlug(const char * slug_);
buf_t tl_theme(bool creator_, bool default_, bool for_chat_, long id_, long access_hash_, const char * slug_, const char * title_, Document *document_, ThemeSettings *settings_, int settings_len, const char * emoticon_, int installs_count_);
buf_t tl_account_themesNotModified();
buf_t tl_account_themes(long hash_, Theme *themes_, int themes_len);
buf_t tl_auth_loginToken(int expires_, buf_t *token_);
buf_t tl_auth_loginTokenMigrateTo(int dc_id_, buf_t *token_);
buf_t tl_auth_loginTokenSuccess(auth_Authorization *authorization_);
buf_t tl_account_contentSettings(bool sensitive_enabled_, bool sensitive_can_change_);
buf_t tl_messages_inactiveChats(int *dates_, int dates_len, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_baseThemeClassic();
buf_t tl_baseThemeDay();
buf_t tl_baseThemeNight();
buf_t tl_baseThemeTinted();
buf_t tl_baseThemeArctic();
buf_t tl_inputThemeSettings(bool message_colors_animated_, BaseTheme *base_theme_, int accent_color_, int outbox_accent_color_, int *message_colors_, int message_colors_len, InputWallPaper *wallpaper_, WallPaperSettings *wallpaper_settings_);
buf_t tl_themeSettings(bool message_colors_animated_, BaseTheme *base_theme_, int accent_color_, int outbox_accent_color_, int *message_colors_, int message_colors_len, WallPaper *wallpaper_);
buf_t tl_webPageAttributeTheme(Document *documents_, int documents_len, ThemeSettings *settings_);
buf_t tl_webPageAttributeStory(Peer *peer_, int id_, StoryItem *story_);
buf_t tl_webPageAttributeStickerSet(bool emojis_, bool text_color_, Document *stickers_, int stickers_len);
buf_t tl_messages_votesList(int count_, MessagePeerVote *votes_, int votes_len, Chat *chats_, int chats_len, User *users_, int users_len, const char * next_offset_);
buf_t tl_bankCardOpenUrl(const char * url_, const char * name_);
buf_t tl_payments_bankCardData(const char * title_, BankCardOpenUrl *open_urls_, int open_urls_len);
buf_t tl_dialogFilter(bool contacts_, bool non_contacts_, bool groups_, bool broadcasts_, bool bots_, bool exclude_muted_, bool exclude_read_, bool exclude_archived_, int id_, const char * title_, const char * emoticon_, int color_, InputPeer *pinned_peers_, int pinned_peers_len, InputPeer *include_peers_, int include_peers_len, InputPeer *exclude_peers_, int exclude_peers_len);
buf_t tl_dialogFilterDefault();
buf_t tl_dialogFilterChatlist(bool has_my_invites_, int id_, const char * title_, const char * emoticon_, int color_, InputPeer *pinned_peers_, int pinned_peers_len, InputPeer *include_peers_, int include_peers_len);
buf_t tl_dialogFilterSuggested(DialogFilter *filter_, const char * description_);
buf_t tl_statsDateRangeDays(int min_date_, int max_date_);
buf_t tl_statsAbsValueAndPrev(double current_, double previous_);
buf_t tl_statsPercentValue(double part_, double total_);
buf_t tl_statsGraphAsync(const char * token_);
buf_t tl_statsGraphError(const char * error_);
buf_t tl_statsGraph(DataJSON *json_, const char * zoom_token_);
buf_t tl_stats_broadcastStats(StatsDateRangeDays *period_, StatsAbsValueAndPrev *followers_, StatsAbsValueAndPrev *views_per_post_, StatsAbsValueAndPrev *shares_per_post_, StatsAbsValueAndPrev *reactions_per_post_, StatsAbsValueAndPrev *views_per_story_, StatsAbsValueAndPrev *shares_per_story_, StatsAbsValueAndPrev *reactions_per_story_, StatsPercentValue *enabled_notifications_, StatsGraph *growth_graph_, StatsGraph *followers_graph_, StatsGraph *mute_graph_, StatsGraph *top_hours_graph_, StatsGraph *interactions_graph_, StatsGraph *iv_interactions_graph_, StatsGraph *views_by_source_graph_, StatsGraph *new_followers_by_source_graph_, StatsGraph *languages_graph_, StatsGraph *reactions_by_emotion_graph_, StatsGraph *story_interactions_graph_, StatsGraph *story_reactions_by_emotion_graph_, PostInteractionCounters *recent_posts_interactions_, int recent_posts_interactions_len);
buf_t tl_help_promoDataEmpty(int expires_);
buf_t tl_help_promoData(bool proxy_, int expires_, Peer *peer_, Chat *chats_, int chats_len, User *users_, int users_len, const char * psa_type_, const char * psa_message_);
buf_t tl_videoSize(const char * type_, int w_, int h_, int size_, double video_start_ts_);
buf_t tl_videoSizeEmojiMarkup(long emoji_id_, int *background_colors_, int background_colors_len);
buf_t tl_videoSizeStickerMarkup(InputStickerSet *stickerset_, long sticker_id_, int *background_colors_, int background_colors_len);
buf_t tl_statsGroupTopPoster(long user_id_, int messages_, int avg_chars_);
buf_t tl_statsGroupTopAdmin(long user_id_, int deleted_, int kicked_, int banned_);
buf_t tl_statsGroupTopInviter(long user_id_, int invitations_);
buf_t tl_stats_megagroupStats(StatsDateRangeDays *period_, StatsAbsValueAndPrev *members_, StatsAbsValueAndPrev *messages_, StatsAbsValueAndPrev *viewers_, StatsAbsValueAndPrev *posters_, StatsGraph *growth_graph_, StatsGraph *members_graph_, StatsGraph *new_members_by_source_graph_, StatsGraph *languages_graph_, StatsGraph *messages_graph_, StatsGraph *actions_graph_, StatsGraph *top_hours_graph_, StatsGraph *weekdays_graph_, StatsGroupTopPoster *top_posters_, int top_posters_len, StatsGroupTopAdmin *top_admins_, int top_admins_len, StatsGroupTopInviter *top_inviters_, int top_inviters_len, User *users_, int users_len);
buf_t tl_globalPrivacySettings(bool archive_and_mute_new_noncontact_peers_, bool keep_archived_unmuted_, bool keep_archived_folders_, bool hide_read_marks_, bool new_noncontact_peers_require_premium_);
buf_t tl_help_countryCode(const char * country_code_, const char * *prefixes_, int prefixes_len, const char * *patterns_, int patterns_len);
buf_t tl_help_country(bool hidden_, const char * iso2_, const char * default_name_, const char * name_, help_CountryCode *country_codes_, int country_codes_len);
buf_t tl_help_countriesListNotModified();
buf_t tl_help_countriesList(help_Country *countries_, int countries_len, int hash_);
buf_t tl_messageViews(int views_, int forwards_, MessageReplies *replies_);
buf_t tl_messages_messageViews(MessageViews *views_, int views_len, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_messages_discussionMessage(Message *messages_, int messages_len, int max_id_, int read_inbox_max_id_, int read_outbox_max_id_, int unread_count_, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_messageReplyHeader(bool reply_to_scheduled_, bool forum_topic_, bool quote_, int reply_to_msg_id_, Peer *reply_to_peer_id_, MessageFwdHeader *reply_from_, MessageMedia *reply_media_, int reply_to_top_id_, const char * quote_text_, MessageEntity *quote_entities_, int quote_entities_len, int quote_offset_);
buf_t tl_messageReplyStoryHeader(Peer *peer_, int story_id_);
buf_t tl_messageReplies(bool comments_, int replies_, int replies_pts_, Peer *recent_repliers_, int recent_repliers_len, long channel_id_, int max_id_, int read_max_id_);
buf_t tl_peerBlocked(Peer *peer_id_, int date_);
buf_t tl_stats_messageStats(StatsGraph *views_graph_, StatsGraph *reactions_by_emotion_graph_);
buf_t tl_groupCallDiscarded(long id_, long access_hash_, int duration_);
buf_t tl_groupCall(bool join_muted_, bool can_change_join_muted_, bool join_date_asc_, bool schedule_start_subscribed_, bool can_start_video_, bool record_video_active_, bool rtmp_stream_, bool listeners_hidden_, long id_, long access_hash_, int participants_count_, const char * title_, int stream_dc_id_, int record_start_date_, int schedule_date_, int unmuted_video_count_, int unmuted_video_limit_, int version_);
buf_t tl_inputGroupCall(long id_, long access_hash_);
buf_t tl_groupCallParticipant(bool muted_, bool left_, bool can_self_unmute_, bool just_joined_, bool versioned_, bool min_, bool muted_by_you_, bool volume_by_admin_, bool self_, bool video_joined_, Peer *peer_, int date_, int active_date_, int source_, int volume_, const char * about_, long raise_hand_rating_, GroupCallParticipantVideo *video_, GroupCallParticipantVideo *presentation_);
buf_t tl_phone_groupCall(GroupCall *call_, GroupCallParticipant *participants_, int participants_len, const char * participants_next_offset_, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_phone_groupParticipants(int count_, GroupCallParticipant *participants_, int participants_len, const char * next_offset_, Chat *chats_, int chats_len, User *users_, int users_len, int version_);
buf_t tl_inlineQueryPeerTypeSameBotPM();
buf_t tl_inlineQueryPeerTypePM();
buf_t tl_inlineQueryPeerTypeChat();
buf_t tl_inlineQueryPeerTypeMegagroup();
buf_t tl_inlineQueryPeerTypeBroadcast();
buf_t tl_inlineQueryPeerTypeBotPM();
buf_t tl_messages_historyImport(long id_);
buf_t tl_messages_historyImportParsed(bool pm_, bool group_, const char * title_);
buf_t tl_messages_affectedFoundMessages(int pts_, int pts_count_, int offset_, int *messages_, int messages_len);
buf_t tl_chatInviteImporter(bool requested_, bool via_chatlist_, long user_id_, int date_, const char * about_, long approved_by_);
buf_t tl_messages_exportedChatInvites(int count_, ExportedChatInvite *invites_, int invites_len, User *users_, int users_len);
buf_t tl_messages_exportedChatInvite(ExportedChatInvite *invite_, User *users_, int users_len);
buf_t tl_messages_exportedChatInviteReplaced(ExportedChatInvite *invite_, ExportedChatInvite *new_invite_, User *users_, int users_len);
buf_t tl_messages_chatInviteImporters(int count_, ChatInviteImporter *importers_, int importers_len, User *users_, int users_len);
buf_t tl_chatAdminWithInvites(long admin_id_, int invites_count_, int revoked_invites_count_);
buf_t tl_messages_chatAdminsWithInvites(ChatAdminWithInvites *admins_, int admins_len, User *users_, int users_len);
buf_t tl_messages_checkedHistoryImportPeer(const char * confirm_text_);
buf_t tl_phone_joinAsPeers(Peer *peers_, int peers_len, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_phone_exportedGroupCallInvite(const char * link_);
buf_t tl_groupCallParticipantVideoSourceGroup(const char * semantics_, int *sources_, int sources_len);
buf_t tl_groupCallParticipantVideo(bool paused_, const char * endpoint_, GroupCallParticipantVideoSourceGroup *source_groups_, int source_groups_len, int audio_source_);
buf_t tl_stickers_suggestedShortName(const char * short_name_);
buf_t tl_botCommandScopeDefault();
buf_t tl_botCommandScopeUsers();
buf_t tl_botCommandScopeChats();
buf_t tl_botCommandScopeChatAdmins();
buf_t tl_botCommandScopePeer(InputPeer *peer_);
buf_t tl_botCommandScopePeerAdmins(InputPeer *peer_);
buf_t tl_botCommandScopePeerUser(InputPeer *peer_, InputUser *user_id_);
buf_t tl_account_resetPasswordFailedWait(int retry_date_);
buf_t tl_account_resetPasswordRequestedWait(int until_date_);
buf_t tl_account_resetPasswordOk();
buf_t tl_sponsoredMessage(bool recommended_, bool can_report_, buf_t *random_id_, const char * url_, const char * title_, const char * message_, MessageEntity *entities_, int entities_len, Photo *photo_, MessageMedia *media_, PeerColor *color_, const char * button_text_, const char * sponsor_info_, const char * additional_info_);
buf_t tl_messages_sponsoredMessages(int posts_between_, SponsoredMessage *messages_, int messages_len, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_messages_sponsoredMessagesEmpty();
buf_t tl_searchResultsCalendarPeriod(int date_, int min_msg_id_, int max_msg_id_, int count_);
buf_t tl_messages_searchResultsCalendar(bool inexact_, int count_, int min_date_, int min_msg_id_, int offset_id_offset_, SearchResultsCalendarPeriod *periods_, int periods_len, Message *messages_, int messages_len, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_searchResultPosition(int msg_id_, int date_, int offset_);
buf_t tl_messages_searchResultsPositions(int count_, SearchResultsPosition *positions_, int positions_len);
buf_t tl_channels_sendAsPeers(SendAsPeer *peers_, int peers_len, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_users_userFull(UserFull *full_user_, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_messages_peerSettings(PeerSettings *settings_, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_auth_loggedOut(buf_t *future_auth_token_);
buf_t tl_reactionCount(int chosen_order_, Reaction *reaction_, int count_);
buf_t tl_messageReactions(bool min_, bool can_see_list_, bool reactions_as_tags_, ReactionCount *results_, int results_len, MessagePeerReaction *recent_reactions_, int recent_reactions_len, MessageReactor *top_reactors_, int top_reactors_len);
buf_t tl_messages_messageReactionsList(int count_, MessagePeerReaction *reactions_, int reactions_len, Chat *chats_, int chats_len, User *users_, int users_len, const char * next_offset_);
buf_t tl_availableReaction(bool inactive_, bool premium_, const char * reaction_, const char * title_, Document *static_icon_, Document *appear_animation_, Document *select_animation_, Document *activate_animation_, Document *effect_animation_, Document *around_animation_, Document *center_icon_);
buf_t tl_messages_availableReactionsNotModified();
buf_t tl_messages_availableReactions(int hash_, AvailableReaction *reactions_, int reactions_len);
buf_t tl_messagePeerReaction(bool big_, bool unread_, bool my_, Peer *peer_id_, int date_, Reaction *reaction_);
buf_t tl_groupCallStreamChannel(int channel_, int scale_, long last_timestamp_ms_);
buf_t tl_phone_groupCallStreamChannels(GroupCallStreamChannel *channels_, int channels_len);
buf_t tl_phone_groupCallStreamRtmpUrl(const char * url_, const char * key_);
buf_t tl_attachMenuBotIconColor(const char * name_, int color_);
buf_t tl_attachMenuBotIcon(const char * name_, Document *icon_, AttachMenuBotIconColor *colors_, int colors_len);
buf_t tl_attachMenuBot(bool inactive_, bool has_settings_, bool request_write_access_, bool show_in_attach_menu_, bool show_in_side_menu_, bool side_menu_disclaimer_needed_, long bot_id_, const char * short_name_, AttachMenuPeerType *peer_types_, int peer_types_len, AttachMenuBotIcon *icons_, int icons_len);
buf_t tl_attachMenuBotsNotModified();
buf_t tl_attachMenuBots(long hash_, AttachMenuBot *bots_, int bots_len, User *users_, int users_len);
buf_t tl_attachMenuBotsBot(AttachMenuBot *bot_, User *users_, int users_len);
buf_t tl_webViewResultUrl(bool fullsize_, long query_id_, const char * url_);
buf_t tl_webViewMessageSent(InputBotInlineMessageID *msg_id_);
buf_t tl_botMenuButtonDefault();
buf_t tl_botMenuButtonCommands();
buf_t tl_botMenuButton(const char * text_, const char * url_);
buf_t tl_account_savedRingtonesNotModified();
buf_t tl_account_savedRingtones(long hash_, Document *ringtones_, int ringtones_len);
buf_t tl_notificationSoundDefault();
buf_t tl_notificationSoundNone();
buf_t tl_notificationSoundLocal(const char * title_, const char * data_);
buf_t tl_notificationSoundRingtone(long id_);
buf_t tl_account_savedRingtone();
buf_t tl_account_savedRingtoneConverted(Document *document_);
buf_t tl_attachMenuPeerTypeSameBotPM();
buf_t tl_attachMenuPeerTypeBotPM();
buf_t tl_attachMenuPeerTypePM();
buf_t tl_attachMenuPeerTypeChat();
buf_t tl_attachMenuPeerTypeBroadcast();
buf_t tl_inputInvoiceMessage(InputPeer *peer_, int msg_id_);
buf_t tl_inputInvoiceSlug(const char * slug_);
buf_t tl_inputInvoicePremiumGiftCode(InputStorePaymentPurpose *purpose_, PremiumGiftCodeOption *option_);
buf_t tl_inputInvoiceStars(InputStorePaymentPurpose *purpose_);
buf_t tl_inputInvoiceChatInviteSubscription(const char * hash_);
buf_t tl_inputInvoiceStarGift(bool hide_name_, InputUser *user_id_, long gift_id_, TextWithEntities *message_);
buf_t tl_payments_exportedInvoice(const char * url_);
buf_t tl_messages_transcribedAudio(bool pending_, long transcription_id_, const char * text_, int trial_remains_num_, int trial_remains_until_date_);
buf_t tl_help_premiumPromo(const char * status_text_, MessageEntity *status_entities_, int status_entities_len, const char * *video_sections_, int video_sections_len, Document *videos_, int videos_len, PremiumSubscriptionOption *period_options_, int period_options_len, User *users_, int users_len);
buf_t tl_inputStorePaymentPremiumSubscription(bool restore_, bool upgrade_);
buf_t tl_inputStorePaymentGiftPremium(InputUser *user_id_, const char * currency_, long amount_);
buf_t tl_inputStorePaymentPremiumGiftCode(InputUser *users_, int users_len, InputPeer *boost_peer_, const char * currency_, long amount_);
buf_t tl_inputStorePaymentPremiumGiveaway(bool only_new_subscribers_, bool winners_are_visible_, InputPeer *boost_peer_, InputPeer *additional_peers_, int additional_peers_len, const char * *countries_iso2_, int countries_iso2_len, const char * prize_description_, long random_id_, int until_date_, const char * currency_, long amount_);
buf_t tl_inputStorePaymentStarsTopup(long stars_, const char * currency_, long amount_);
buf_t tl_inputStorePaymentStarsGift(InputUser *user_id_, long stars_, const char * currency_, long amount_);
buf_t tl_inputStorePaymentStarsGiveaway(bool only_new_subscribers_, bool winners_are_visible_, long stars_, InputPeer *boost_peer_, InputPeer *additional_peers_, int additional_peers_len, const char * *countries_iso2_, int countries_iso2_len, const char * prize_description_, long random_id_, int until_date_, const char * currency_, long amount_, int users_);
buf_t tl_premiumGiftOption(int months_, const char * currency_, long amount_, const char * bot_url_, const char * store_product_);
buf_t tl_paymentFormMethod(const char * url_, const char * title_);
buf_t tl_emojiStatusEmpty();
buf_t tl_emojiStatus(long document_id_);
buf_t tl_emojiStatusUntil(long document_id_, int until_);
buf_t tl_account_emojiStatusesNotModified();
buf_t tl_account_emojiStatuses(long hash_, EmojiStatus *statuses_, int statuses_len);
buf_t tl_reactionEmpty();
buf_t tl_reactionEmoji(const char * emoticon_);
buf_t tl_reactionCustomEmoji(long document_id_);
buf_t tl_reactionPaid();
buf_t tl_chatReactionsNone();
buf_t tl_chatReactionsAll(bool allow_custom_);
buf_t tl_chatReactionsSome(Reaction *reactions_, int reactions_len);
buf_t tl_messages_reactionsNotModified();
buf_t tl_messages_reactions(long hash_, Reaction *reactions_, int reactions_len);
buf_t tl_emailVerifyPurposeLoginSetup(const char * phone_number_, const char * phone_code_hash_);
buf_t tl_emailVerifyPurposeLoginChange();
buf_t tl_emailVerifyPurposePassport();
buf_t tl_emailVerificationCode(const char * code_);
buf_t tl_emailVerificationGoogle(const char * token_);
buf_t tl_emailVerificationApple(const char * token_);
buf_t tl_account_emailVerified(const char * email_);
buf_t tl_account_emailVerifiedLogin(const char * email_, auth_SentCode *sent_code_);
buf_t tl_premiumSubscriptionOption(bool current_, bool can_purchase_upgrade_, const char * transaction_, int months_, const char * currency_, long amount_, const char * bot_url_, const char * store_product_);
buf_t tl_sendAsPeer(bool premium_required_, Peer *peer_);
buf_t tl_messageExtendedMediaPreview(int w_, int h_, PhotoSize *thumb_, int video_duration_);
buf_t tl_messageExtendedMedia(MessageMedia *media_);
buf_t tl_stickerKeyword(long document_id_, const char * *keyword_, int keyword_len);
buf_t tl_username(bool editable_, bool active_, const char * username_);
buf_t tl_forumTopicDeleted(int id_);
buf_t tl_forumTopic(bool my_, bool closed_, bool pinned_, bool short_, bool hidden_, int id_, int date_, const char * title_, int icon_color_, long icon_emoji_id_, int top_message_, int read_inbox_max_id_, int read_outbox_max_id_, int unread_count_, int unread_mentions_count_, int unread_reactions_count_, Peer *from_id_, PeerNotifySettings *notify_settings_, DraftMessage *draft_);
buf_t tl_messages_forumTopics(bool order_by_create_date_, int count_, ForumTopic *topics_, int topics_len, Message *messages_, int messages_len, Chat *chats_, int chats_len, User *users_, int users_len, int pts_);
buf_t tl_defaultHistoryTTL(int period_);
buf_t tl_exportedContactToken(const char * url_, int expires_);
buf_t tl_requestPeerTypeUser(Bool *bot_, Bool *premium_);
buf_t tl_requestPeerTypeChat(bool creator_, bool bot_participant_, Bool *has_username_, Bool *forum_, ChatAdminRights *user_admin_rights_, ChatAdminRights *bot_admin_rights_);
buf_t tl_requestPeerTypeBroadcast(bool creator_, Bool *has_username_, ChatAdminRights *user_admin_rights_, ChatAdminRights *bot_admin_rights_);
buf_t tl_emojiListNotModified();
buf_t tl_emojiList(long hash_, long *document_id_, int document_id_len);
buf_t tl_emojiGroup(const char * title_, long icon_emoji_id_, const char * *emoticons_, int emoticons_len);
buf_t tl_emojiGroupGreeting(const char * title_, long icon_emoji_id_, const char * *emoticons_, int emoticons_len);
buf_t tl_emojiGroupPremium(const char * title_, long icon_emoji_id_);
buf_t tl_messages_emojiGroupsNotModified();
buf_t tl_messages_emojiGroups(int hash_, EmojiGroup *groups_, int groups_len);
buf_t tl_textWithEntities(const char * text_, MessageEntity *entities_, int entities_len);
buf_t tl_messages_translateResult(TextWithEntities *result_, int result_len);
buf_t tl_autoSaveSettings(bool photos_, bool videos_, long video_max_size_);
buf_t tl_autoSaveException(Peer *peer_, AutoSaveSettings *settings_);
buf_t tl_account_autoSaveSettings(AutoSaveSettings *users_settings_, AutoSaveSettings *chats_settings_, AutoSaveSettings *broadcasts_settings_, AutoSaveException *exceptions_, int exceptions_len, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_help_appConfigNotModified();
buf_t tl_help_appConfig(int hash_, JSONValue *config_);
buf_t tl_inputBotAppID(long id_, long access_hash_);
buf_t tl_inputBotAppShortName(InputUser *bot_id_, const char * short_name_);
buf_t tl_botAppNotModified();
buf_t tl_botApp(long id_, long access_hash_, const char * short_name_, const char * title_, const char * description_, Photo *photo_, Document *document_, long hash_);
buf_t tl_messages_botApp(bool inactive_, bool request_write_access_, bool has_settings_, BotApp *app_);
buf_t tl_inlineBotWebView(const char * text_, const char * url_);
buf_t tl_readParticipantDate(long user_id_, int date_);
buf_t tl_inputChatlistDialogFilter(int filter_id_);
buf_t tl_exportedChatlistInvite(const char * title_, const char * url_, Peer *peers_, int peers_len);
buf_t tl_chatlists_exportedChatlistInvite(DialogFilter *filter_, ExportedChatlistInvite *invite_);
buf_t tl_chatlists_exportedInvites(ExportedChatlistInvite *invites_, int invites_len, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_chatlists_chatlistInviteAlready(int filter_id_, Peer *missing_peers_, int missing_peers_len, Peer *already_peers_, int already_peers_len, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_chatlists_chatlistInvite(const char * title_, const char * emoticon_, Peer *peers_, int peers_len, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_chatlists_chatlistUpdates(Peer *missing_peers_, int missing_peers_len, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_bots_botInfo(const char * name_, const char * about_, const char * description_);
buf_t tl_messagePeerVote(Peer *peer_, buf_t *option_, int date_);
buf_t tl_messagePeerVoteInputOption(Peer *peer_, int date_);
buf_t tl_messagePeerVoteMultiple(Peer *peer_, buf_t *options_, int options_len, int date_);
buf_t tl_storyViews(bool has_viewers_, int views_count_, int forwards_count_, ReactionCount *reactions_, int reactions_len, int reactions_count_, long *recent_viewers_, int recent_viewers_len);
buf_t tl_storyItemDeleted(int id_);
buf_t tl_storyItemSkipped(bool close_friends_, int id_, int date_, int expire_date_);
buf_t tl_storyItem(bool pinned_, bool public_, bool close_friends_, bool min_, bool noforwards_, bool edited_, bool contacts_, bool selected_contacts_, bool out_, int id_, int date_, Peer *from_id_, StoryFwdHeader *fwd_from_, int expire_date_, const char * caption_, MessageEntity *entities_, int entities_len, MessageMedia *media_, MediaArea *media_areas_, int media_areas_len, PrivacyRule *privacy_, int privacy_len, StoryViews *views_, Reaction *sent_reaction_);
buf_t tl_stories_allStoriesNotModified(const char * state_, StoriesStealthMode *stealth_mode_);
buf_t tl_stories_allStories(bool has_more_, int count_, const char * state_, PeerStories *peer_stories_, int peer_stories_len, Chat *chats_, int chats_len, User *users_, int users_len, StoriesStealthMode *stealth_mode_);
buf_t tl_stories_stories(int count_, StoryItem *stories_, int stories_len, int *pinned_to_top_, int pinned_to_top_len, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_storyView(bool blocked_, bool blocked_my_stories_from_, long user_id_, int date_, Reaction *reaction_);
buf_t tl_storyViewPublicForward(bool blocked_, bool blocked_my_stories_from_, Message *message_);
buf_t tl_storyViewPublicRepost(bool blocked_, bool blocked_my_stories_from_, Peer *peer_id_, StoryItem *story_);
buf_t tl_stories_storyViewsList(int count_, int views_count_, int forwards_count_, int reactions_count_, StoryView *views_, int views_len, Chat *chats_, int chats_len, User *users_, int users_len, const char * next_offset_);
buf_t tl_stories_storyViews(StoryViews *views_, int views_len, User *users_, int users_len);
buf_t tl_inputReplyToMessage(int reply_to_msg_id_, int top_msg_id_, InputPeer *reply_to_peer_id_, const char * quote_text_, MessageEntity *quote_entities_, int quote_entities_len, int quote_offset_);
buf_t tl_inputReplyToStory(InputPeer *peer_, int story_id_);
buf_t tl_exportedStoryLink(const char * link_);
buf_t tl_storiesStealthMode(int active_until_date_, int cooldown_until_date_);
buf_t tl_mediaAreaCoordinates(double x_, double y_, double w_, double h_, double rotation_, double radius_);
buf_t tl_mediaAreaVenue(MediaAreaCoordinates *coordinates_, GeoPoint *geo_, const char * title_, const char * address_, const char * provider_, const char * venue_id_, const char * venue_type_);
buf_t tl_inputMediaAreaVenue(MediaAreaCoordinates *coordinates_, long query_id_, const char * result_id_);
buf_t tl_mediaAreaGeoPoint(MediaAreaCoordinates *coordinates_, GeoPoint *geo_, GeoPointAddress *address_);
buf_t tl_mediaAreaSuggestedReaction(bool dark_, bool flipped_, MediaAreaCoordinates *coordinates_, Reaction *reaction_);
buf_t tl_mediaAreaChannelPost(MediaAreaCoordinates *coordinates_, long channel_id_, int msg_id_);
buf_t tl_inputMediaAreaChannelPost(MediaAreaCoordinates *coordinates_, InputChannel *channel_, int msg_id_);
buf_t tl_mediaAreaUrl(MediaAreaCoordinates *coordinates_, const char * url_);
buf_t tl_mediaAreaWeather(MediaAreaCoordinates *coordinates_, const char * emoji_, double temperature_c_, int color_);
buf_t tl_peerStories(Peer *peer_, int max_read_id_, StoryItem *stories_, int stories_len);
buf_t tl_stories_peerStories(PeerStories *stories_, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_messages_webPage(WebPage *webpage_, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_premiumGiftCodeOption(int users_, int months_, const char * store_product_, int store_quantity_, const char * currency_, long amount_);
buf_t tl_payments_checkedGiftCode(bool via_giveaway_, Peer *from_id_, int giveaway_msg_id_, long to_id_, int date_, int months_, int used_date_, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_payments_giveawayInfo(bool participating_, bool preparing_results_, int start_date_, int joined_too_early_date_, long admin_disallowed_chat_id_, const char * disallowed_country_);
buf_t tl_payments_giveawayInfoResults(bool winner_, bool refunded_, int start_date_, const char * gift_code_slug_, long stars_prize_, int finish_date_, int winners_count_, int activated_count_);
buf_t tl_prepaidGiveaway(long id_, int months_, int quantity_, int date_);
buf_t tl_prepaidStarsGiveaway(long id_, long stars_, int quantity_, int boosts_, int date_);
buf_t tl_boost(bool gift_, bool giveaway_, bool unclaimed_, const char * id_, long user_id_, int giveaway_msg_id_, int date_, int expires_, const char * used_gift_slug_, int multiplier_, long stars_);
buf_t tl_premium_boostsList(int count_, Boost *boosts_, int boosts_len, const char * next_offset_, User *users_, int users_len);
buf_t tl_myBoost(int slot_, Peer *peer_, int date_, int expires_, int cooldown_until_date_);
buf_t tl_premium_myBoosts(MyBoost *my_boosts_, int my_boosts_len, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_premium_boostsStatus(bool my_boost_, int level_, int current_level_boosts_, int boosts_, int gift_boosts_, int next_level_boosts_, StatsPercentValue *premium_audience_, const char * boost_url_, PrepaidGiveaway *prepaid_giveaways_, int prepaid_giveaways_len, int *my_boost_slots_, int my_boost_slots_len);
buf_t tl_storyFwdHeader(bool modified_, Peer *from_, const char * from_name_, int story_id_);
buf_t tl_postInteractionCountersMessage(int msg_id_, int views_, int forwards_, int reactions_);
buf_t tl_postInteractionCountersStory(int story_id_, int views_, int forwards_, int reactions_);
buf_t tl_stats_storyStats(StatsGraph *views_graph_, StatsGraph *reactions_by_emotion_graph_);
buf_t tl_publicForwardMessage(Message *message_);
buf_t tl_publicForwardStory(Peer *peer_, StoryItem *story_);
buf_t tl_stats_publicForwards(int count_, PublicForward *forwards_, int forwards_len, const char * next_offset_, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_peerColor(int color_, long background_emoji_id_);
buf_t tl_help_peerColorSet(int *colors_, int colors_len);
buf_t tl_help_peerColorProfileSet(int *palette_colors_, int palette_colors_len, int *bg_colors_, int bg_colors_len, int *story_colors_, int story_colors_len);
buf_t tl_help_peerColorOption(bool hidden_, int color_id_, help_PeerColorSet *colors_, help_PeerColorSet *dark_colors_, int channel_min_level_, int group_min_level_);
buf_t tl_help_peerColorsNotModified();
buf_t tl_help_peerColors(int hash_, help_PeerColorOption *colors_, int colors_len);
buf_t tl_storyReaction(Peer *peer_id_, int date_, Reaction *reaction_);
buf_t tl_storyReactionPublicForward(Message *message_);
buf_t tl_storyReactionPublicRepost(Peer *peer_id_, StoryItem *story_);
buf_t tl_stories_storyReactionsList(int count_, StoryReaction *reactions_, int reactions_len, Chat *chats_, int chats_len, User *users_, int users_len, const char * next_offset_);
buf_t tl_savedDialog(bool pinned_, Peer *peer_, int top_message_);
buf_t tl_messages_savedDialogs(SavedDialog *dialogs_, int dialogs_len, Message *messages_, int messages_len, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_messages_savedDialogsSlice(int count_, SavedDialog *dialogs_, int dialogs_len, Message *messages_, int messages_len, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_messages_savedDialogsNotModified(int count_);
buf_t tl_savedReactionTag(Reaction *reaction_, const char * title_, int count_);
buf_t tl_messages_savedReactionTagsNotModified();
buf_t tl_messages_savedReactionTags(SavedReactionTag *tags_, int tags_len, long hash_);
buf_t tl_outboxReadDate(int date_);
buf_t tl_smsjobs_eligibleToJoin(const char * terms_url_, int monthly_sent_sms_);
buf_t tl_smsjobs_status(bool allow_international_, int recent_sent_, int recent_since_, int recent_remains_, int total_sent_, int total_since_, const char * last_gift_slug_, const char * terms_url_);
buf_t tl_smsJob(const char * job_id_, const char * phone_number_, const char * text_);
buf_t tl_businessWeeklyOpen(int start_minute_, int end_minute_);
buf_t tl_businessWorkHours(bool open_now_, const char * timezone_id_, BusinessWeeklyOpen *weekly_open_, int weekly_open_len);
buf_t tl_businessLocation(GeoPoint *geo_point_, const char * address_);
buf_t tl_inputBusinessRecipients(bool existing_chats_, bool new_chats_, bool contacts_, bool non_contacts_, bool exclude_selected_, InputUser *users_, int users_len);
buf_t tl_businessRecipients(bool existing_chats_, bool new_chats_, bool contacts_, bool non_contacts_, bool exclude_selected_, long *users_, int users_len);
buf_t tl_businessAwayMessageScheduleAlways();
buf_t tl_businessAwayMessageScheduleOutsideWorkHours();
buf_t tl_businessAwayMessageScheduleCustom(int start_date_, int end_date_);
buf_t tl_inputBusinessGreetingMessage(int shortcut_id_, InputBusinessRecipients *recipients_, int no_activity_days_);
buf_t tl_businessGreetingMessage(int shortcut_id_, BusinessRecipients *recipients_, int no_activity_days_);
buf_t tl_inputBusinessAwayMessage(bool offline_only_, int shortcut_id_, BusinessAwayMessageSchedule *schedule_, InputBusinessRecipients *recipients_);
buf_t tl_businessAwayMessage(bool offline_only_, int shortcut_id_, BusinessAwayMessageSchedule *schedule_, BusinessRecipients *recipients_);
buf_t tl_timezone(const char * id_, const char * name_, int utc_offset_);
buf_t tl_help_timezonesListNotModified();
buf_t tl_help_timezonesList(Timezone *timezones_, int timezones_len, int hash_);
buf_t tl_quickReply(int shortcut_id_, const char * shortcut_, int top_message_, int count_);
buf_t tl_inputQuickReplyShortcut(const char * shortcut_);
buf_t tl_inputQuickReplyShortcutId(int shortcut_id_);
buf_t tl_messages_quickReplies(QuickReply *quick_replies_, int quick_replies_len, Message *messages_, int messages_len, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_messages_quickRepliesNotModified();
buf_t tl_connectedBot(bool can_reply_, long bot_id_, BusinessBotRecipients *recipients_);
buf_t tl_account_connectedBots(ConnectedBot *connected_bots_, int connected_bots_len, User *users_, int users_len);
buf_t tl_messages_dialogFilters(bool tags_enabled_, DialogFilter *filters_, int filters_len);
buf_t tl_birthday(int day_, int month_, int year_);
buf_t tl_botBusinessConnection(bool can_reply_, bool disabled_, const char * connection_id_, long user_id_, int dc_id_, int date_);
buf_t tl_inputBusinessIntro(const char * title_, const char * description_, InputDocument *sticker_);
buf_t tl_businessIntro(const char * title_, const char * description_, Document *sticker_);
buf_t tl_messages_myStickers(int count_, StickerSetCovered *sets_, int sets_len);
buf_t tl_inputCollectibleUsername(const char * username_);
buf_t tl_inputCollectiblePhone(const char * phone_);
buf_t tl_fragment_collectibleInfo(int purchase_date_, const char * currency_, long amount_, const char * crypto_currency_, long crypto_amount_, const char * url_);
buf_t tl_inputBusinessBotRecipients(bool existing_chats_, bool new_chats_, bool contacts_, bool non_contacts_, bool exclude_selected_, InputUser *users_, int users_len, InputUser *exclude_users_, int exclude_users_len);
buf_t tl_businessBotRecipients(bool existing_chats_, bool new_chats_, bool contacts_, bool non_contacts_, bool exclude_selected_, long *users_, int users_len, long *exclude_users_, int exclude_users_len);
buf_t tl_contactBirthday(long contact_id_, Birthday *birthday_);
buf_t tl_contacts_contactBirthdays(ContactBirthday *contacts_, int contacts_len, User *users_, int users_len);
buf_t tl_missingInvitee(bool premium_would_allow_invite_, bool premium_required_for_pm_, long user_id_);
buf_t tl_messages_invitedUsers(Updates *updates_, MissingInvitee *missing_invitees_, int missing_invitees_len);
buf_t tl_inputBusinessChatLink(const char * message_, MessageEntity *entities_, int entities_len, const char * title_);
buf_t tl_businessChatLink(const char * link_, const char * message_, MessageEntity *entities_, int entities_len, const char * title_, int views_);
buf_t tl_account_businessChatLinks(BusinessChatLink *links_, int links_len, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_account_resolvedBusinessChatLinks(Peer *peer_, const char * message_, MessageEntity *entities_, int entities_len, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_requestedPeerUser(long user_id_, const char * first_name_, const char * last_name_, const char * username_, Photo *photo_);
buf_t tl_requestedPeerChat(long chat_id_, const char * title_, Photo *photo_);
buf_t tl_requestedPeerChannel(long channel_id_, const char * title_, const char * username_, Photo *photo_);
buf_t tl_sponsoredMessageReportOption(const char * text_, buf_t *option_);
buf_t tl_channels_sponsoredMessageReportResultChooseOption(const char * title_, SponsoredMessageReportOption *options_, int options_len);
buf_t tl_channels_sponsoredMessageReportResultAdsHidden();
buf_t tl_channels_sponsoredMessageReportResultReported();
buf_t tl_stats_broadcastRevenueStats(StatsGraph *top_hours_graph_, StatsGraph *revenue_graph_, BroadcastRevenueBalances *balances_, double usd_rate_);
buf_t tl_stats_broadcastRevenueWithdrawalUrl(const char * url_);
buf_t tl_broadcastRevenueTransactionProceeds(long amount_, int from_date_, int to_date_);
buf_t tl_broadcastRevenueTransactionWithdrawal(bool pending_, bool failed_, long amount_, int date_, const char * provider_, int transaction_date_, const char * transaction_url_);
buf_t tl_broadcastRevenueTransactionRefund(long amount_, int date_, const char * provider_);
buf_t tl_stats_broadcastRevenueTransactions(int count_, BroadcastRevenueTransaction *transactions_, int transactions_len);
buf_t tl_reactionNotificationsFromContacts();
buf_t tl_reactionNotificationsFromAll();
buf_t tl_reactionsNotifySettings(ReactionNotificationsFrom *messages_notify_from_, ReactionNotificationsFrom *stories_notify_from_, NotificationSound *sound_, Bool *show_previews_);
buf_t tl_broadcastRevenueBalances(bool withdrawal_enabled_, long current_balance_, long available_balance_, long overall_revenue_);
buf_t tl_availableEffect(bool premium_required_, long id_, const char * emoticon_, long static_icon_id_, long effect_sticker_id_, long effect_animation_id_);
buf_t tl_messages_availableEffectsNotModified();
buf_t tl_messages_availableEffects(int hash_, AvailableEffect *effects_, int effects_len, Document *documents_, int documents_len);
buf_t tl_factCheck(bool need_check_, const char * country_, TextWithEntities *text_, long hash_);
buf_t tl_starsTransactionPeerUnsupported();
buf_t tl_starsTransactionPeerAppStore();
buf_t tl_starsTransactionPeerPlayMarket();
buf_t tl_starsTransactionPeerPremiumBot();
buf_t tl_starsTransactionPeerFragment();
buf_t tl_starsTransactionPeer(Peer *peer_);
buf_t tl_starsTransactionPeerAds();
buf_t tl_starsTopupOption(bool extended_, long stars_, const char * store_product_, const char * currency_, long amount_);
buf_t tl_starsTransaction(bool refund_, bool pending_, bool failed_, bool gift_, bool reaction_, const char * id_, long stars_, int date_, StarsTransactionPeer *peer_, const char * title_, const char * description_, WebDocument *photo_, int transaction_date_, const char * transaction_url_, buf_t *bot_payload_, int msg_id_, MessageMedia *extended_media_, int extended_media_len, int subscription_period_, int giveaway_post_id_, StarGift *stargift_);
buf_t tl_payments_starsStatus(long balance_, StarsSubscription *subscriptions_, int subscriptions_len, const char * subscriptions_next_offset_, long subscriptions_missing_balance_, StarsTransaction *history_, int history_len, const char * next_offset_, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_foundStory(Peer *peer_, StoryItem *story_);
buf_t tl_stories_foundStories(int count_, FoundStory *stories_, int stories_len, const char * next_offset_, Chat *chats_, int chats_len, User *users_, int users_len);
buf_t tl_geoPointAddress(const char * country_iso2_, const char * state_, const char * city_, const char * street_);
buf_t tl_starsRevenueStatus(bool withdrawal_enabled_, long current_balance_, long available_balance_, long overall_revenue_, int next_withdrawal_at_);
buf_t tl_payments_starsRevenueStats(StatsGraph *revenue_graph_, StarsRevenueStatus *status_, double usd_rate_);
buf_t tl_payments_starsRevenueWithdrawalUrl(const char * url_);
buf_t tl_payments_starsRevenueAdsAccountUrl(const char * url_);
buf_t tl_inputStarsTransaction(bool refund_, const char * id_);
buf_t tl_starsGiftOption(bool extended_, long stars_, const char * store_product_, const char * currency_, long amount_);
buf_t tl_bots_popularAppBots(const char * next_offset_, User *users_, int users_len);
buf_t tl_botPreviewMedia(int date_, MessageMedia *media_);
buf_t tl_bots_previewInfo(BotPreviewMedia *media_, int media_len, const char * *lang_codes_, int lang_codes_len);
buf_t tl_starsSubscriptionPricing(int period_, long amount_);
buf_t tl_starsSubscription(bool canceled_, bool can_refulfill_, bool missing_balance_, const char * id_, Peer *peer_, int until_date_, StarsSubscriptionPricing *pricing_, const char * chat_invite_hash_);
buf_t tl_messageReactor(bool top_, bool my_, bool anonymous_, Peer *peer_id_, int count_);
buf_t tl_starsGiveawayOption(bool extended_, bool default_, long stars_, int yearly_boosts_, const char * store_product_, const char * currency_, long amount_, StarsGiveawayWinnersOption *winners_, int winners_len);
buf_t tl_starsGiveawayWinnersOption(bool default_, int users_, long per_user_stars_);
buf_t tl_starGift(bool limited_, long id_, Document *sticker_, long stars_, int availability_remains_, int availability_total_, long convert_stars_);
buf_t tl_payments_starGiftsNotModified();
buf_t tl_payments_starGifts(int hash_, StarGift *gifts_, int gifts_len);
buf_t tl_userStarGift(bool name_hidden_, bool unsaved_, long from_id_, int date_, StarGift *gift_, TextWithEntities *message_, int msg_id_, long convert_stars_);
buf_t tl_payments_userStarGifts(int count_, UserStarGift *gifts_, int gifts_len, const char * next_offset_, User *users_, int users_len);
buf_t tl_messageReportOption(const char * text_, buf_t *option_);
buf_t tl_reportResultChooseOption(const char * title_, MessageReportOption *options_, int options_len);
buf_t tl_reportResultAddComment(bool optional_, buf_t *option_);
buf_t tl_reportResultReported();
buf_t tl_invokeAfterMsg(long msg_id_, X *query_);
buf_t tl_invokeAfterMsgs(long *msg_ids_, int msg_ids_len, X *query_);
buf_t tl_initConnection(int api_id_, const char * device_model_, const char * system_version_, const char * app_version_, const char * system_lang_code_, const char * lang_pack_, const char * lang_code_, InputClientProxy *proxy_, JSONValue *params_, X *query_);
buf_t tl_invokeWithLayer(int layer_, X *query_);
buf_t tl_invokeWithoutUpdates(X *query_);
buf_t tl_invokeWithMessagesRange(MessageRange *range_, X *query_);
buf_t tl_invokeWithTakeout(long takeout_id_, X *query_);
buf_t tl_invokeWithBusinessConnection(const char * connection_id_, X *query_);
buf_t tl_invokeWithGooglePlayIntegrity(const char * nonce_, const char * token_, X *query_);
buf_t tl_invokeWithApnsSecret(const char * nonce_, const char * secret_, X *query_);
buf_t tl_auth_sendCode(const char * phone_number_, int api_id_, const char * api_hash_, CodeSettings *settings_);
buf_t tl_auth_signUp(bool no_joined_notifications_, const char * phone_number_, const char * phone_code_hash_, const char * first_name_, const char * last_name_);
buf_t tl_auth_signIn(const char * phone_number_, const char * phone_code_hash_, const char * phone_code_, EmailVerification *email_verification_);
buf_t tl_auth_logOut();
buf_t tl_auth_resetAuthorizations();
buf_t tl_auth_exportAuthorization(int dc_id_);
buf_t tl_auth_importAuthorization(long id_, buf_t *bytes_);
buf_t tl_auth_bindTempAuthKey(long perm_auth_key_id_, long nonce_, int expires_at_, buf_t *encrypted_message_);
buf_t tl_auth_importBotAuthorization(int flags_, int api_id_, const char * api_hash_, const char * bot_auth_token_);
buf_t tl_auth_checkPassword(InputCheckPasswordSRP *password_);
buf_t tl_auth_requestPasswordRecovery();
buf_t tl_auth_recoverPassword(const char * code_, account_PasswordInputSettings *new_settings_);
buf_t tl_auth_resendCode(const char * phone_number_, const char * phone_code_hash_, const char * reason_);
buf_t tl_auth_cancelCode(const char * phone_number_, const char * phone_code_hash_);
buf_t tl_auth_dropTempAuthKeys(long *except_auth_keys_, int except_auth_keys_len);
buf_t tl_auth_exportLoginToken(int api_id_, const char * api_hash_, long *except_ids_, int except_ids_len);
buf_t tl_auth_importLoginToken(buf_t *token_);
buf_t tl_auth_acceptLoginToken(buf_t *token_);
buf_t tl_auth_checkRecoveryPassword(const char * code_);
buf_t tl_auth_importWebTokenAuthorization(int api_id_, const char * api_hash_, const char * web_auth_token_);
buf_t tl_auth_requestFirebaseSms(const char * phone_number_, const char * phone_code_hash_, const char * safety_net_token_, const char * play_integrity_token_, const char * ios_push_secret_);
buf_t tl_auth_resetLoginEmail(const char * phone_number_, const char * phone_code_hash_);
buf_t tl_auth_reportMissingCode(const char * phone_number_, const char * phone_code_hash_, const char * mnc_);
buf_t tl_account_registerDevice(bool no_muted_, int token_type_, const char * token_, Bool *app_sandbox_, buf_t *secret_, long *other_uids_, int other_uids_len);
buf_t tl_account_unregisterDevice(int token_type_, const char * token_, long *other_uids_, int other_uids_len);
buf_t tl_account_updateNotifySettings(InputNotifyPeer *peer_, InputPeerNotifySettings *settings_);
buf_t tl_account_getNotifySettings(InputNotifyPeer *peer_);
buf_t tl_account_resetNotifySettings();
buf_t tl_account_updateProfile(const char * first_name_, const char * last_name_, const char * about_);
buf_t tl_account_updateStatus(Bool *offline_);
buf_t tl_account_getWallPapers(long hash_);
buf_t tl_account_reportPeer(InputPeer *peer_, ReportReason *reason_, const char * message_);
buf_t tl_account_checkUsername(const char * username_);
buf_t tl_account_updateUsername(const char * username_);
buf_t tl_account_getPrivacy(InputPrivacyKey *key_);
buf_t tl_account_setPrivacy(InputPrivacyKey *key_, InputPrivacyRule *rules_, int rules_len);
buf_t tl_account_deleteAccount(const char * reason_, InputCheckPasswordSRP *password_);
buf_t tl_account_getAccountTTL();
buf_t tl_account_setAccountTTL(AccountDaysTTL *ttl_);
buf_t tl_account_sendChangePhoneCode(const char * phone_number_, CodeSettings *settings_);
buf_t tl_account_changePhone(const char * phone_number_, const char * phone_code_hash_, const char * phone_code_);
buf_t tl_account_updateDeviceLocked(int period_);
buf_t tl_account_getAuthorizations();
buf_t tl_account_resetAuthorization(long hash_);
buf_t tl_account_getPassword();
buf_t tl_account_getPasswordSettings(InputCheckPasswordSRP *password_);
buf_t tl_account_updatePasswordSettings(InputCheckPasswordSRP *password_, account_PasswordInputSettings *new_settings_);
buf_t tl_account_sendConfirmPhoneCode(const char * hash_, CodeSettings *settings_);
buf_t tl_account_confirmPhone(const char * phone_code_hash_, const char * phone_code_);
buf_t tl_account_getTmpPassword(InputCheckPasswordSRP *password_, int period_);
buf_t tl_account_getWebAuthorizations();
buf_t tl_account_resetWebAuthorization(long hash_);
buf_t tl_account_resetWebAuthorizations();
buf_t tl_account_getAllSecureValues();
buf_t tl_account_getSecureValue(SecureValueType *types_, int types_len);
buf_t tl_account_saveSecureValue(InputSecureValue *value_, long secure_secret_id_);
buf_t tl_account_deleteSecureValue(SecureValueType *types_, int types_len);
buf_t tl_account_getAuthorizationForm(long bot_id_, const char * scope_, const char * public_key_);
buf_t tl_account_acceptAuthorization(long bot_id_, const char * scope_, const char * public_key_, SecureValueHash *value_hashes_, int value_hashes_len, SecureCredentialsEncrypted *credentials_);
buf_t tl_account_sendVerifyPhoneCode(const char * phone_number_, CodeSettings *settings_);
buf_t tl_account_verifyPhone(const char * phone_number_, const char * phone_code_hash_, const char * phone_code_);
buf_t tl_account_sendVerifyEmailCode(EmailVerifyPurpose *purpose_, const char * email_);
buf_t tl_account_verifyEmail(EmailVerifyPurpose *purpose_, EmailVerification *verification_);
buf_t tl_account_initTakeoutSession(bool contacts_, bool message_users_, bool message_chats_, bool message_megagroups_, bool message_channels_, bool files_, long file_max_size_);
buf_t tl_account_finishTakeoutSession(bool success_);
buf_t tl_account_confirmPasswordEmail(const char * code_);
buf_t tl_account_resendPasswordEmail();
buf_t tl_account_cancelPasswordEmail();
buf_t tl_account_getContactSignUpNotification();
buf_t tl_account_setContactSignUpNotification(Bool *silent_);
buf_t tl_account_getNotifyExceptions(bool compare_sound_, bool compare_stories_, InputNotifyPeer *peer_);
buf_t tl_account_getWallPaper(InputWallPaper *wallpaper_);
buf_t tl_account_uploadWallPaper(bool for_chat_, InputFile *file_, const char * mime_type_, WallPaperSettings *settings_);
buf_t tl_account_saveWallPaper(InputWallPaper *wallpaper_, Bool *unsave_, WallPaperSettings *settings_);
buf_t tl_account_installWallPaper(InputWallPaper *wallpaper_, WallPaperSettings *settings_);
buf_t tl_account_resetWallPapers();
buf_t tl_account_getAutoDownloadSettings();
buf_t tl_account_saveAutoDownloadSettings(bool low_, bool high_, AutoDownloadSettings *settings_);
buf_t tl_account_uploadTheme(InputFile *file_, InputFile *thumb_, const char * file_name_, const char * mime_type_);
buf_t tl_account_createTheme(const char * slug_, const char * title_, InputDocument *document_, InputThemeSettings *settings_, int settings_len);
buf_t tl_account_updateTheme(const char * format_, InputTheme *theme_, const char * slug_, const char * title_, InputDocument *document_, InputThemeSettings *settings_, int settings_len);
buf_t tl_account_saveTheme(InputTheme *theme_, Bool *unsave_);
buf_t tl_account_installTheme(bool dark_, InputTheme *theme_, const char * format_, BaseTheme *base_theme_);
buf_t tl_account_getTheme(const char * format_, InputTheme *theme_);
buf_t tl_account_getThemes(const char * format_, long hash_);
buf_t tl_account_setContentSettings(bool sensitive_enabled_);
buf_t tl_account_getContentSettings();
buf_t tl_account_getMultiWallPapers(InputWallPaper *wallpapers_, int wallpapers_len);
buf_t tl_account_getGlobalPrivacySettings();
buf_t tl_account_setGlobalPrivacySettings(GlobalPrivacySettings *settings_);
buf_t tl_account_reportProfilePhoto(InputPeer *peer_, InputPhoto *photo_id_, ReportReason *reason_, const char * message_);
buf_t tl_account_resetPassword();
buf_t tl_account_declinePasswordReset();
buf_t tl_account_getChatThemes(long hash_);
buf_t tl_account_setAuthorizationTTL(int authorization_ttl_days_);
buf_t tl_account_changeAuthorizationSettings(bool confirmed_, long hash_, Bool *encrypted_requests_disabled_, Bool *call_requests_disabled_);
buf_t tl_account_getSavedRingtones(long hash_);
buf_t tl_account_saveRingtone(InputDocument *id_, Bool *unsave_);
buf_t tl_account_uploadRingtone(InputFile *file_, const char * file_name_, const char * mime_type_);
buf_t tl_account_updateEmojiStatus(EmojiStatus *emoji_status_);
buf_t tl_account_getDefaultEmojiStatuses(long hash_);
buf_t tl_account_getRecentEmojiStatuses(long hash_);
buf_t tl_account_clearRecentEmojiStatuses();
buf_t tl_account_reorderUsernames(const char * *order_, int order_len);
buf_t tl_account_toggleUsername(const char * username_, Bool *active_);
buf_t tl_account_getDefaultProfilePhotoEmojis(long hash_);
buf_t tl_account_getDefaultGroupPhotoEmojis(long hash_);
buf_t tl_account_getAutoSaveSettings();
buf_t tl_account_saveAutoSaveSettings(bool users_, bool chats_, bool broadcasts_, InputPeer *peer_, AutoSaveSettings *settings_);
buf_t tl_account_deleteAutoSaveExceptions();
buf_t tl_account_invalidateSignInCodes(const char * *codes_, int codes_len);
buf_t tl_account_updateColor(bool for_profile_, int color_, long background_emoji_id_);
buf_t tl_account_getDefaultBackgroundEmojis(long hash_);
buf_t tl_account_getChannelDefaultEmojiStatuses(long hash_);
buf_t tl_account_getChannelRestrictedStatusEmojis(long hash_);
buf_t tl_account_updateBusinessWorkHours(BusinessWorkHours *business_work_hours_);
buf_t tl_account_updateBusinessLocation(InputGeoPoint *geo_point_, const char * address_);
buf_t tl_account_updateBusinessGreetingMessage(InputBusinessGreetingMessage *message_);
buf_t tl_account_updateBusinessAwayMessage(InputBusinessAwayMessage *message_);
buf_t tl_account_updateConnectedBot(bool can_reply_, bool deleted_, InputUser *bot_, InputBusinessBotRecipients *recipients_);
buf_t tl_account_getConnectedBots();
buf_t tl_account_getBotBusinessConnection(const char * connection_id_);
buf_t tl_account_updateBusinessIntro(InputBusinessIntro *intro_);
buf_t tl_account_toggleConnectedBotPaused(InputPeer *peer_, Bool *paused_);
buf_t tl_account_disablePeerConnectedBot(InputPeer *peer_);
buf_t tl_account_updateBirthday(Birthday *birthday_);
buf_t tl_account_createBusinessChatLink(InputBusinessChatLink *link_);
buf_t tl_account_editBusinessChatLink(const char * slug_, InputBusinessChatLink *link_);
buf_t tl_account_deleteBusinessChatLink(const char * slug_);
buf_t tl_account_getBusinessChatLinks();
buf_t tl_account_resolveBusinessChatLink(const char * slug_);
buf_t tl_account_updatePersonalChannel(InputChannel *channel_);
buf_t tl_account_toggleSponsoredMessages(Bool *enabled_);
buf_t tl_account_getReactionsNotifySettings();
buf_t tl_account_setReactionsNotifySettings(ReactionsNotifySettings *settings_);
buf_t tl_users_getUsers(InputUser *id_, int id_len);
buf_t tl_users_getFullUser(InputUser *id_);
buf_t tl_users_setSecureValueErrors(InputUser *id_, SecureValueError *errors_, int errors_len);
buf_t tl_users_getIsPremiumRequiredToContact(InputUser *id_, int id_len);
buf_t tl_contacts_getContactIDs(long hash_);
buf_t tl_contacts_getStatuses();
buf_t tl_contacts_getContacts(long hash_);
buf_t tl_contacts_importContacts(InputContact *contacts_, int contacts_len);
buf_t tl_contacts_deleteContacts(InputUser *id_, int id_len);
buf_t tl_contacts_deleteByPhones(const char * *phones_, int phones_len);
buf_t tl_contacts_block(bool my_stories_from_, InputPeer *id_);
buf_t tl_contacts_unblock(bool my_stories_from_, InputPeer *id_);
buf_t tl_contacts_getBlocked(bool my_stories_from_, int offset_, int limit_);
buf_t tl_contacts_search(const char * q_, int limit_);
buf_t tl_contacts_resolveUsername(const char * username_);
buf_t tl_contacts_getTopPeers(bool correspondents_, bool bots_pm_, bool bots_inline_, bool phone_calls_, bool forward_users_, bool forward_chats_, bool groups_, bool channels_, bool bots_app_, int offset_, int limit_, long hash_);
buf_t tl_contacts_resetTopPeerRating(TopPeerCategory *category_, InputPeer *peer_);
buf_t tl_contacts_resetSaved();
buf_t tl_contacts_getSaved();
buf_t tl_contacts_toggleTopPeers(Bool *enabled_);
buf_t tl_contacts_addContact(bool add_phone_privacy_exception_, InputUser *id_, const char * first_name_, const char * last_name_, const char * phone_);
buf_t tl_contacts_acceptContact(InputUser *id_);
buf_t tl_contacts_getLocated(bool background_, InputGeoPoint *geo_point_, int self_expires_);
buf_t tl_contacts_blockFromReplies(bool delete_message_, bool delete_history_, bool report_spam_, int msg_id_);
buf_t tl_contacts_resolvePhone(const char * phone_);
buf_t tl_contacts_exportContactToken();
buf_t tl_contacts_importContactToken(const char * token_);
buf_t tl_contacts_editCloseFriends(long *id_, int id_len);
buf_t tl_contacts_setBlocked(bool my_stories_from_, InputPeer *id_, int id_len, int limit_);
buf_t tl_contacts_getBirthdays();
buf_t tl_messages_getMessages(InputMessage *id_, int id_len);
buf_t tl_messages_getDialogs(bool exclude_pinned_, int folder_id_, int offset_date_, int offset_id_, InputPeer *offset_peer_, int limit_, long hash_);
buf_t tl_messages_getHistory(InputPeer *peer_, int offset_id_, int offset_date_, int add_offset_, int limit_, int max_id_, int min_id_, long hash_);
buf_t tl_messages_search(InputPeer *peer_, const char * q_, InputPeer *from_id_, InputPeer *saved_peer_id_, Reaction *saved_reaction_, int saved_reaction_len, int top_msg_id_, MessagesFilter *filter_, int min_date_, int max_date_, int offset_id_, int add_offset_, int limit_, int max_id_, int min_id_, long hash_);
buf_t tl_messages_readHistory(InputPeer *peer_, int max_id_);
buf_t tl_messages_deleteHistory(bool just_clear_, bool revoke_, InputPeer *peer_, int max_id_, int min_date_, int max_date_);
buf_t tl_messages_deleteMessages(bool revoke_, int *id_, int id_len);
buf_t tl_messages_receivedMessages(int max_id_);
buf_t tl_messages_setTyping(InputPeer *peer_, int top_msg_id_, SendMessageAction *action_);
buf_t tl_messages_sendMessage(bool no_webpage_, bool silent_, bool background_, bool clear_draft_, bool noforwards_, bool update_stickersets_order_, bool invert_media_, InputPeer *peer_, InputReplyTo *reply_to_, const char * message_, long random_id_, ReplyMarkup *reply_markup_, MessageEntity *entities_, int entities_len, int schedule_date_, InputPeer *send_as_, InputQuickReplyShortcut *quick_reply_shortcut_, long effect_);
buf_t tl_messages_sendMedia(bool silent_, bool background_, bool clear_draft_, bool noforwards_, bool update_stickersets_order_, bool invert_media_, InputPeer *peer_, InputReplyTo *reply_to_, InputMedia *media_, const char * message_, long random_id_, ReplyMarkup *reply_markup_, MessageEntity *entities_, int entities_len, int schedule_date_, InputPeer *send_as_, InputQuickReplyShortcut *quick_reply_shortcut_, long effect_);
buf_t tl_messages_forwardMessages(bool silent_, bool background_, bool with_my_score_, bool drop_author_, bool drop_media_captions_, bool noforwards_, InputPeer *from_peer_, int *id_, int id_len, long *random_id_, int random_id_len, InputPeer *to_peer_, int top_msg_id_, int schedule_date_, InputPeer *send_as_, InputQuickReplyShortcut *quick_reply_shortcut_);
buf_t tl_messages_reportSpam(InputPeer *peer_);
buf_t tl_messages_getPeerSettings(InputPeer *peer_);
buf_t tl_messages_report(InputPeer *peer_, int *id_, int id_len, buf_t *option_, const char * message_);
buf_t tl_messages_getChats(long *id_, int id_len);
buf_t tl_messages_getFullChat(long chat_id_);
buf_t tl_messages_editChatTitle(long chat_id_, const char * title_);
buf_t tl_messages_editChatPhoto(long chat_id_, InputChatPhoto *photo_);
buf_t tl_messages_addChatUser(long chat_id_, InputUser *user_id_, int fwd_limit_);
buf_t tl_messages_deleteChatUser(bool revoke_history_, long chat_id_, InputUser *user_id_);
buf_t tl_messages_createChat(InputUser *users_, int users_len, const char * title_, int ttl_period_);
buf_t tl_messages_getDhConfig(int version_, int random_length_);
buf_t tl_messages_requestEncryption(InputUser *user_id_, int random_id_, buf_t *g_a_);
buf_t tl_messages_acceptEncryption(InputEncryptedChat *peer_, buf_t *g_b_, long key_fingerprint_);
buf_t tl_messages_discardEncryption(bool delete_history_, int chat_id_);
buf_t tl_messages_setEncryptedTyping(InputEncryptedChat *peer_, Bool *typing_);
buf_t tl_messages_readEncryptedHistory(InputEncryptedChat *peer_, int max_date_);
buf_t tl_messages_sendEncrypted(bool silent_, InputEncryptedChat *peer_, long random_id_, buf_t *data_);
buf_t tl_messages_sendEncryptedFile(bool silent_, InputEncryptedChat *peer_, long random_id_, buf_t *data_, InputEncryptedFile *file_);
buf_t tl_messages_sendEncryptedService(InputEncryptedChat *peer_, long random_id_, buf_t *data_);
buf_t tl_messages_receivedQueue(int max_qts_);
buf_t tl_messages_reportEncryptedSpam(InputEncryptedChat *peer_);
buf_t tl_messages_readMessageContents(int *id_, int id_len);
buf_t tl_messages_getStickers(const char * emoticon_, long hash_);
buf_t tl_messages_getAllStickers(long hash_);
buf_t tl_messages_getWebPagePreview(const char * message_, MessageEntity *entities_, int entities_len);
buf_t tl_messages_exportChatInvite(bool legacy_revoke_permanent_, bool request_needed_, InputPeer *peer_, int expire_date_, int usage_limit_, const char * title_, StarsSubscriptionPricing *subscription_pricing_);
buf_t tl_messages_checkChatInvite(const char * hash_);
buf_t tl_messages_importChatInvite(const char * hash_);
buf_t tl_messages_getStickerSet(InputStickerSet *stickerset_, int hash_);
buf_t tl_messages_installStickerSet(InputStickerSet *stickerset_, Bool *archived_);
buf_t tl_messages_uninstallStickerSet(InputStickerSet *stickerset_);
buf_t tl_messages_startBot(InputUser *bot_, InputPeer *peer_, long random_id_, const char * start_param_);
buf_t tl_messages_getMessagesViews(InputPeer *peer_, int *id_, int id_len, Bool *increment_);
buf_t tl_messages_editChatAdmin(long chat_id_, InputUser *user_id_, Bool *is_admin_);
buf_t tl_messages_migrateChat(long chat_id_);
buf_t tl_messages_searchGlobal(bool broadcasts_only_, int folder_id_, const char * q_, MessagesFilter *filter_, int min_date_, int max_date_, int offset_rate_, InputPeer *offset_peer_, int offset_id_, int limit_);
buf_t tl_messages_reorderStickerSets(bool masks_, bool emojis_, long *order_, int order_len);
buf_t tl_messages_getDocumentByHash(buf_t *sha256_, long size_, const char * mime_type_);
buf_t tl_messages_getSavedGifs(long hash_);
buf_t tl_messages_saveGif(InputDocument *id_, Bool *unsave_);
buf_t tl_messages_getInlineBotResults(InputUser *bot_, InputPeer *peer_, InputGeoPoint *geo_point_, const char * query_, const char * offset_);
buf_t tl_messages_setInlineBotResults(bool gallery_, bool private_, long query_id_, InputBotInlineResult *results_, int results_len, int cache_time_, const char * next_offset_, InlineBotSwitchPM *switch_pm_, InlineBotWebView *switch_webview_);
buf_t tl_messages_sendInlineBotResult(bool silent_, bool background_, bool clear_draft_, bool hide_via_, InputPeer *peer_, InputReplyTo *reply_to_, long random_id_, long query_id_, const char * id_, int schedule_date_, InputPeer *send_as_, InputQuickReplyShortcut *quick_reply_shortcut_);
buf_t tl_messages_getMessageEditData(InputPeer *peer_, int id_);
buf_t tl_messages_editMessage(bool no_webpage_, bool invert_media_, InputPeer *peer_, int id_, const char * message_, InputMedia *media_, ReplyMarkup *reply_markup_, MessageEntity *entities_, int entities_len, int schedule_date_, int quick_reply_shortcut_id_);
buf_t tl_messages_editInlineBotMessage(bool no_webpage_, bool invert_media_, InputBotInlineMessageID *id_, const char * message_, InputMedia *media_, ReplyMarkup *reply_markup_, MessageEntity *entities_, int entities_len);
buf_t tl_messages_getBotCallbackAnswer(bool game_, InputPeer *peer_, int msg_id_, buf_t *data_, InputCheckPasswordSRP *password_);
buf_t tl_messages_setBotCallbackAnswer(bool alert_, long query_id_, const char * message_, const char * url_, int cache_time_);
buf_t tl_messages_getPeerDialogs(InputDialogPeer *peers_, int peers_len);
buf_t tl_messages_saveDraft(bool no_webpage_, bool invert_media_, InputReplyTo *reply_to_, InputPeer *peer_, const char * message_, MessageEntity *entities_, int entities_len, InputMedia *media_, long effect_);
buf_t tl_messages_getAllDrafts();
buf_t tl_messages_getFeaturedStickers(long hash_);
buf_t tl_messages_readFeaturedStickers(long *id_, int id_len);
buf_t tl_messages_getRecentStickers(bool attached_, long hash_);
buf_t tl_messages_saveRecentSticker(bool attached_, InputDocument *id_, Bool *unsave_);
buf_t tl_messages_clearRecentStickers(bool attached_);
buf_t tl_messages_getArchivedStickers(bool masks_, bool emojis_, long offset_id_, int limit_);
buf_t tl_messages_getMaskStickers(long hash_);
buf_t tl_messages_getAttachedStickers(InputStickeredMedia *media_);
buf_t tl_messages_setGameScore(bool edit_message_, bool force_, InputPeer *peer_, int id_, InputUser *user_id_, int score_);
buf_t tl_messages_setInlineGameScore(bool edit_message_, bool force_, InputBotInlineMessageID *id_, InputUser *user_id_, int score_);
buf_t tl_messages_getGameHighScores(InputPeer *peer_, int id_, InputUser *user_id_);
buf_t tl_messages_getInlineGameHighScores(InputBotInlineMessageID *id_, InputUser *user_id_);
buf_t tl_messages_getCommonChats(InputUser *user_id_, long max_id_, int limit_);
buf_t tl_messages_getWebPage(const char * url_, int hash_);
buf_t tl_messages_toggleDialogPin(bool pinned_, InputDialogPeer *peer_);
buf_t tl_messages_reorderPinnedDialogs(bool force_, int folder_id_, InputDialogPeer *order_, int order_len);
buf_t tl_messages_getPinnedDialogs(int folder_id_);
buf_t tl_messages_setBotShippingResults(long query_id_, const char * error_, ShippingOption *shipping_options_, int shipping_options_len);
buf_t tl_messages_setBotPrecheckoutResults(bool success_, long query_id_, const char * error_);
buf_t tl_messages_uploadMedia(const char * business_connection_id_, InputPeer *peer_, InputMedia *media_);
buf_t tl_messages_sendScreenshotNotification(InputPeer *peer_, InputReplyTo *reply_to_, long random_id_);
buf_t tl_messages_getFavedStickers(long hash_);
buf_t tl_messages_faveSticker(InputDocument *id_, Bool *unfave_);
buf_t tl_messages_getUnreadMentions(InputPeer *peer_, int top_msg_id_, int offset_id_, int add_offset_, int limit_, int max_id_, int min_id_);
buf_t tl_messages_readMentions(InputPeer *peer_, int top_msg_id_);
buf_t tl_messages_getRecentLocations(InputPeer *peer_, int limit_, long hash_);
buf_t tl_messages_sendMultiMedia(bool silent_, bool background_, bool clear_draft_, bool noforwards_, bool update_stickersets_order_, bool invert_media_, InputPeer *peer_, InputReplyTo *reply_to_, InputSingleMedia *multi_media_, int multi_media_len, int schedule_date_, InputPeer *send_as_, InputQuickReplyShortcut *quick_reply_shortcut_, long effect_);
buf_t tl_messages_uploadEncryptedFile(InputEncryptedChat *peer_, InputEncryptedFile *file_);
buf_t tl_messages_searchStickerSets(bool exclude_featured_, const char * q_, long hash_);
buf_t tl_messages_getSplitRanges();
buf_t tl_messages_markDialogUnread(bool unread_, InputDialogPeer *peer_);
buf_t tl_messages_getDialogUnreadMarks();
buf_t tl_messages_clearAllDrafts();
buf_t tl_messages_updatePinnedMessage(bool silent_, bool unpin_, bool pm_oneside_, InputPeer *peer_, int id_);
buf_t tl_messages_sendVote(InputPeer *peer_, int msg_id_, buf_t *options_, int options_len);
buf_t tl_messages_getPollResults(InputPeer *peer_, int msg_id_);
buf_t tl_messages_getOnlines(InputPeer *peer_);
buf_t tl_messages_editChatAbout(InputPeer *peer_, const char * about_);
buf_t tl_messages_editChatDefaultBannedRights(InputPeer *peer_, ChatBannedRights *banned_rights_);
buf_t tl_messages_getEmojiKeywords(const char * lang_code_);
buf_t tl_messages_getEmojiKeywordsDifference(const char * lang_code_, int from_version_);
buf_t tl_messages_getEmojiKeywordsLanguages(const char * *lang_codes_, int lang_codes_len);
buf_t tl_messages_getEmojiURL(const char * lang_code_);
buf_t tl_messages_getSearchCounters(InputPeer *peer_, InputPeer *saved_peer_id_, int top_msg_id_, MessagesFilter *filters_, int filters_len);
buf_t tl_messages_requestUrlAuth(InputPeer *peer_, int msg_id_, int button_id_, const char * url_);
buf_t tl_messages_acceptUrlAuth(bool write_allowed_, InputPeer *peer_, int msg_id_, int button_id_, const char * url_);
buf_t tl_messages_hidePeerSettingsBar(InputPeer *peer_);
buf_t tl_messages_getScheduledHistory(InputPeer *peer_, long hash_);
buf_t tl_messages_getScheduledMessages(InputPeer *peer_, int *id_, int id_len);
buf_t tl_messages_sendScheduledMessages(InputPeer *peer_, int *id_, int id_len);
buf_t tl_messages_deleteScheduledMessages(InputPeer *peer_, int *id_, int id_len);
buf_t tl_messages_getPollVotes(InputPeer *peer_, int id_, buf_t *option_, const char * offset_, int limit_);
buf_t tl_messages_toggleStickerSets(bool uninstall_, bool archive_, bool unarchive_, InputStickerSet *stickersets_, int stickersets_len);
buf_t tl_messages_getDialogFilters();
buf_t tl_messages_getSuggestedDialogFilters();
buf_t tl_messages_updateDialogFilter(int id_, DialogFilter *filter_);
buf_t tl_messages_updateDialogFiltersOrder(int *order_, int order_len);
buf_t tl_messages_getOldFeaturedStickers(int offset_, int limit_, long hash_);
buf_t tl_messages_getReplies(InputPeer *peer_, int msg_id_, int offset_id_, int offset_date_, int add_offset_, int limit_, int max_id_, int min_id_, long hash_);
buf_t tl_messages_getDiscussionMessage(InputPeer *peer_, int msg_id_);
buf_t tl_messages_readDiscussion(InputPeer *peer_, int msg_id_, int read_max_id_);
buf_t tl_messages_unpinAllMessages(InputPeer *peer_, int top_msg_id_);
buf_t tl_messages_deleteChat(long chat_id_);
buf_t tl_messages_deletePhoneCallHistory(bool revoke_);
buf_t tl_messages_checkHistoryImport(const char * import_head_);
buf_t tl_messages_initHistoryImport(InputPeer *peer_, InputFile *file_, int media_count_);
buf_t tl_messages_uploadImportedMedia(InputPeer *peer_, long import_id_, const char * file_name_, InputMedia *media_);
buf_t tl_messages_startHistoryImport(InputPeer *peer_, long import_id_);
buf_t tl_messages_getExportedChatInvites(bool revoked_, InputPeer *peer_, InputUser *admin_id_, int offset_date_, const char * offset_link_, int limit_);
buf_t tl_messages_getExportedChatInvite(InputPeer *peer_, const char * link_);
buf_t tl_messages_editExportedChatInvite(bool revoked_, InputPeer *peer_, const char * link_, int expire_date_, int usage_limit_, Bool *request_needed_, const char * title_);
buf_t tl_messages_deleteRevokedExportedChatInvites(InputPeer *peer_, InputUser *admin_id_);
buf_t tl_messages_deleteExportedChatInvite(InputPeer *peer_, const char * link_);
buf_t tl_messages_getAdminsWithInvites(InputPeer *peer_);
buf_t tl_messages_getChatInviteImporters(bool requested_, bool subscription_expired_, InputPeer *peer_, const char * link_, const char * q_, int offset_date_, InputUser *offset_user_, int limit_);
buf_t tl_messages_setHistoryTTL(InputPeer *peer_, int period_);
buf_t tl_messages_checkHistoryImportPeer(InputPeer *peer_);
buf_t tl_messages_setChatTheme(InputPeer *peer_, const char * emoticon_);
buf_t tl_messages_getMessageReadParticipants(InputPeer *peer_, int msg_id_);
buf_t tl_messages_getSearchResultsCalendar(InputPeer *peer_, InputPeer *saved_peer_id_, MessagesFilter *filter_, int offset_id_, int offset_date_);
buf_t tl_messages_getSearchResultsPositions(InputPeer *peer_, InputPeer *saved_peer_id_, MessagesFilter *filter_, int offset_id_, int limit_);
buf_t tl_messages_hideChatJoinRequest(bool approved_, InputPeer *peer_, InputUser *user_id_);
buf_t tl_messages_hideAllChatJoinRequests(bool approved_, InputPeer *peer_, const char * link_);
buf_t tl_messages_toggleNoForwards(InputPeer *peer_, Bool *enabled_);
buf_t tl_messages_saveDefaultSendAs(InputPeer *peer_, InputPeer *send_as_);
buf_t tl_messages_sendReaction(bool big_, bool add_to_recent_, InputPeer *peer_, int msg_id_, Reaction *reaction_, int reaction_len);
buf_t tl_messages_getMessagesReactions(InputPeer *peer_, int *id_, int id_len);
buf_t tl_messages_getMessageReactionsList(InputPeer *peer_, int id_, Reaction *reaction_, const char * offset_, int limit_);
buf_t tl_messages_setChatAvailableReactions(InputPeer *peer_, ChatReactions *available_reactions_, int reactions_limit_, Bool *paid_enabled_);
buf_t tl_messages_getAvailableReactions(int hash_);
buf_t tl_messages_setDefaultReaction(Reaction *reaction_);
buf_t tl_messages_translateText(InputPeer *peer_, int *id_, int id_len, TextWithEntities *text_, int text_len, const char * to_lang_);
buf_t tl_messages_getUnreadReactions(InputPeer *peer_, int top_msg_id_, int offset_id_, int add_offset_, int limit_, int max_id_, int min_id_);
buf_t tl_messages_readReactions(InputPeer *peer_, int top_msg_id_);
buf_t tl_messages_searchSentMedia(const char * q_, MessagesFilter *filter_, int limit_);
buf_t tl_messages_getAttachMenuBots(long hash_);
buf_t tl_messages_getAttachMenuBot(InputUser *bot_);
buf_t tl_messages_toggleBotInAttachMenu(bool write_allowed_, InputUser *bot_, Bool *enabled_);
buf_t tl_messages_requestWebView(bool from_bot_menu_, bool silent_, bool compact_, InputPeer *peer_, InputUser *bot_, const char * url_, const char * start_param_, DataJSON *theme_params_, const char * platform_, InputReplyTo *reply_to_, InputPeer *send_as_);
buf_t tl_messages_prolongWebView(bool silent_, InputPeer *peer_, InputUser *bot_, long query_id_, InputReplyTo *reply_to_, InputPeer *send_as_);
buf_t tl_messages_requestSimpleWebView(bool from_switch_webview_, bool from_side_menu_, bool compact_, InputUser *bot_, const char * url_, const char * start_param_, DataJSON *theme_params_, const char * platform_);
buf_t tl_messages_sendWebViewResultMessage(const char * bot_query_id_, InputBotInlineResult *result_);
buf_t tl_messages_sendWebViewData(InputUser *bot_, long random_id_, const char * button_text_, const char * data_);
buf_t tl_messages_transcribeAudio(InputPeer *peer_, int msg_id_);
buf_t tl_messages_rateTranscribedAudio(InputPeer *peer_, int msg_id_, long transcription_id_, Bool *good_);
buf_t tl_messages_getCustomEmojiDocuments(long *document_id_, int document_id_len);
buf_t tl_messages_getEmojiStickers(long hash_);
buf_t tl_messages_getFeaturedEmojiStickers(long hash_);
buf_t tl_messages_reportReaction(InputPeer *peer_, int id_, InputPeer *reaction_peer_);
buf_t tl_messages_getTopReactions(int limit_, long hash_);
buf_t tl_messages_getRecentReactions(int limit_, long hash_);
buf_t tl_messages_clearRecentReactions();
buf_t tl_messages_getExtendedMedia(InputPeer *peer_, int *id_, int id_len);
buf_t tl_messages_setDefaultHistoryTTL(int period_);
buf_t tl_messages_getDefaultHistoryTTL();
buf_t tl_messages_sendBotRequestedPeer(InputPeer *peer_, int msg_id_, int button_id_, InputPeer *requested_peers_, int requested_peers_len);
buf_t tl_messages_getEmojiGroups(int hash_);
buf_t tl_messages_getEmojiStatusGroups(int hash_);
buf_t tl_messages_getEmojiProfilePhotoGroups(int hash_);
buf_t tl_messages_searchCustomEmoji(const char * emoticon_, long hash_);
buf_t tl_messages_togglePeerTranslations(bool disabled_, InputPeer *peer_);
buf_t tl_messages_getBotApp(InputBotApp *app_, long hash_);
buf_t tl_messages_requestAppWebView(bool write_allowed_, bool compact_, InputPeer *peer_, InputBotApp *app_, const char * start_param_, DataJSON *theme_params_, const char * platform_);
buf_t tl_messages_setChatWallPaper(bool for_both_, bool revert_, InputPeer *peer_, InputWallPaper *wallpaper_, WallPaperSettings *settings_, int id_);
buf_t tl_messages_searchEmojiStickerSets(bool exclude_featured_, const char * q_, long hash_);
buf_t tl_messages_getSavedDialogs(bool exclude_pinned_, int offset_date_, int offset_id_, InputPeer *offset_peer_, int limit_, long hash_);
buf_t tl_messages_getSavedHistory(InputPeer *peer_, int offset_id_, int offset_date_, int add_offset_, int limit_, int max_id_, int min_id_, long hash_);
buf_t tl_messages_deleteSavedHistory(InputPeer *peer_, int max_id_, int min_date_, int max_date_);
buf_t tl_messages_getPinnedSavedDialogs();
buf_t tl_messages_toggleSavedDialogPin(bool pinned_, InputDialogPeer *peer_);
buf_t tl_messages_reorderPinnedSavedDialogs(bool force_, InputDialogPeer *order_, int order_len);
buf_t tl_messages_getSavedReactionTags(InputPeer *peer_, long hash_);
buf_t tl_messages_updateSavedReactionTag(Reaction *reaction_, const char * title_);
buf_t tl_messages_getDefaultTagReactions(long hash_);
buf_t tl_messages_getOutboxReadDate(InputPeer *peer_, int msg_id_);
buf_t tl_messages_getQuickReplies(long hash_);
buf_t tl_messages_reorderQuickReplies(int *order_, int order_len);
buf_t tl_messages_checkQuickReplyShortcut(const char * shortcut_);
buf_t tl_messages_editQuickReplyShortcut(int shortcut_id_, const char * shortcut_);
buf_t tl_messages_deleteQuickReplyShortcut(int shortcut_id_);
buf_t tl_messages_getQuickReplyMessages(int shortcut_id_, int *id_, int id_len, long hash_);
buf_t tl_messages_sendQuickReplyMessages(InputPeer *peer_, int shortcut_id_, int *id_, int id_len, long *random_id_, int random_id_len);
buf_t tl_messages_deleteQuickReplyMessages(int shortcut_id_, int *id_, int id_len);
buf_t tl_messages_toggleDialogFilterTags(Bool *enabled_);
buf_t tl_messages_getMyStickers(long offset_id_, int limit_);
buf_t tl_messages_getEmojiStickerGroups(int hash_);
buf_t tl_messages_getAvailableEffects(int hash_);
buf_t tl_messages_editFactCheck(InputPeer *peer_, int msg_id_, TextWithEntities *text_);
buf_t tl_messages_deleteFactCheck(InputPeer *peer_, int msg_id_);
buf_t tl_messages_getFactCheck(InputPeer *peer_, int *msg_id_, int msg_id_len);
buf_t tl_messages_requestMainWebView(bool compact_, InputPeer *peer_, InputUser *bot_, const char * start_param_, DataJSON *theme_params_, const char * platform_);
buf_t tl_messages_sendPaidReaction(InputPeer *peer_, int msg_id_, int count_, long random_id_, Bool *private_);
buf_t tl_messages_togglePaidReactionPrivacy(InputPeer *peer_, int msg_id_, Bool *private_);
buf_t tl_messages_getPaidReactionPrivacy();
buf_t tl_updates_getState();
buf_t tl_updates_getDifference(int pts_, int pts_limit_, int pts_total_limit_, int date_, int qts_, int qts_limit_);
buf_t tl_updates_getChannelDifference(bool force_, InputChannel *channel_, ChannelMessagesFilter *filter_, int pts_, int limit_);
buf_t tl_photos_updateProfilePhoto(bool fallback_, InputUser *bot_, InputPhoto *id_);
buf_t tl_photos_uploadProfilePhoto(bool fallback_, InputUser *bot_, InputFile *file_, InputFile *video_, double video_start_ts_, VideoSize *video_emoji_markup_);
buf_t tl_photos_deletePhotos(InputPhoto *id_, int id_len);
buf_t tl_photos_getUserPhotos(InputUser *user_id_, int offset_, long max_id_, int limit_);
buf_t tl_photos_uploadContactProfilePhoto(bool suggest_, bool save_, InputUser *user_id_, InputFile *file_, InputFile *video_, double video_start_ts_, VideoSize *video_emoji_markup_);
buf_t tl_upload_saveFilePart(long file_id_, int file_part_, buf_t *bytes_);
buf_t tl_upload_getFile(bool precise_, bool cdn_supported_, InputFileLocation *location_, long offset_, int limit_);
buf_t tl_upload_saveBigFilePart(long file_id_, int file_part_, int file_total_parts_, buf_t *bytes_);
buf_t tl_upload_getWebFile(InputWebFileLocation *location_, int offset_, int limit_);
buf_t tl_upload_getCdnFile(buf_t *file_token_, long offset_, int limit_);
buf_t tl_upload_reuploadCdnFile(buf_t *file_token_, buf_t *request_token_);
buf_t tl_upload_getCdnFileHashes(buf_t *file_token_, long offset_);
buf_t tl_upload_getFileHashes(InputFileLocation *location_, long offset_);
buf_t tl_help_getConfig();
buf_t tl_help_getNearestDc();
buf_t tl_help_getAppUpdate(const char * source_);
buf_t tl_help_getInviteText();
buf_t tl_help_getSupport();
buf_t tl_help_setBotUpdatesStatus(int pending_updates_count_, const char * message_);
buf_t tl_help_getCdnConfig();
buf_t tl_help_getRecentMeUrls(const char * referer_);
buf_t tl_help_getTermsOfServiceUpdate();
buf_t tl_help_acceptTermsOfService(DataJSON *id_);
buf_t tl_help_getDeepLinkInfo(const char * path_);
buf_t tl_help_getAppConfig(int hash_);
buf_t tl_help_saveAppLog(InputAppEvent *events_, int events_len);
buf_t tl_help_getPassportConfig(int hash_);
buf_t tl_help_getSupportName();
buf_t tl_help_getUserInfo(InputUser *user_id_);
buf_t tl_help_editUserInfo(InputUser *user_id_, const char * message_, MessageEntity *entities_, int entities_len);
buf_t tl_help_getPromoData();
buf_t tl_help_hidePromoData(InputPeer *peer_);
buf_t tl_help_dismissSuggestion(InputPeer *peer_, const char * suggestion_);
buf_t tl_help_getCountriesList(const char * lang_code_, int hash_);
buf_t tl_help_getPremiumPromo();
buf_t tl_help_getPeerColors(int hash_);
buf_t tl_help_getPeerProfileColors(int hash_);
buf_t tl_help_getTimezonesList(int hash_);
buf_t tl_channels_readHistory(InputChannel *channel_, int max_id_);
buf_t tl_channels_deleteMessages(InputChannel *channel_, int *id_, int id_len);
buf_t tl_channels_reportSpam(InputChannel *channel_, InputPeer *participant_, int *id_, int id_len);
buf_t tl_channels_getMessages(InputChannel *channel_, InputMessage *id_, int id_len);
buf_t tl_channels_getParticipants(InputChannel *channel_, ChannelParticipantsFilter *filter_, int offset_, int limit_, long hash_);
buf_t tl_channels_getParticipant(InputChannel *channel_, InputPeer *participant_);
buf_t tl_channels_getChannels(InputChannel *id_, int id_len);
buf_t tl_channels_getFullChannel(InputChannel *channel_);
buf_t tl_channels_createChannel(bool broadcast_, bool megagroup_, bool for_import_, bool forum_, const char * title_, const char * about_, InputGeoPoint *geo_point_, const char * address_, int ttl_period_);
buf_t tl_channels_editAdmin(InputChannel *channel_, InputUser *user_id_, ChatAdminRights *admin_rights_, const char * rank_);
buf_t tl_channels_editTitle(InputChannel *channel_, const char * title_);
buf_t tl_channels_editPhoto(InputChannel *channel_, InputChatPhoto *photo_);
buf_t tl_channels_checkUsername(InputChannel *channel_, const char * username_);
buf_t tl_channels_updateUsername(InputChannel *channel_, const char * username_);
buf_t tl_channels_joinChannel(InputChannel *channel_);
buf_t tl_channels_leaveChannel(InputChannel *channel_);
buf_t tl_channels_inviteToChannel(InputChannel *channel_, InputUser *users_, int users_len);
buf_t tl_channels_deleteChannel(InputChannel *channel_);
buf_t tl_channels_exportMessageLink(bool grouped_, bool thread_, InputChannel *channel_, int id_);
buf_t tl_channels_toggleSignatures(bool signatures_enabled_, bool profiles_enabled_, InputChannel *channel_);
buf_t tl_channels_getAdminedPublicChannels(bool by_location_, bool check_limit_, bool for_personal_);
buf_t tl_channels_editBanned(InputChannel *channel_, InputPeer *participant_, ChatBannedRights *banned_rights_);
buf_t tl_channels_getAdminLog(InputChannel *channel_, const char * q_, ChannelAdminLogEventsFilter *events_filter_, InputUser *admins_, int admins_len, long max_id_, long min_id_, int limit_);
buf_t tl_channels_setStickers(InputChannel *channel_, InputStickerSet *stickerset_);
buf_t tl_channels_readMessageContents(InputChannel *channel_, int *id_, int id_len);
buf_t tl_channels_deleteHistory(bool for_everyone_, InputChannel *channel_, int max_id_);
buf_t tl_channels_togglePreHistoryHidden(InputChannel *channel_, Bool *enabled_);
buf_t tl_channels_getLeftChannels(int offset_);
buf_t tl_channels_getGroupsForDiscussion();
buf_t tl_channels_setDiscussionGroup(InputChannel *broadcast_, InputChannel *group_);
buf_t tl_channels_editCreator(InputChannel *channel_, InputUser *user_id_, InputCheckPasswordSRP *password_);
buf_t tl_channels_editLocation(InputChannel *channel_, InputGeoPoint *geo_point_, const char * address_);
buf_t tl_channels_toggleSlowMode(InputChannel *channel_, int seconds_);
buf_t tl_channels_getInactiveChannels();
buf_t tl_channels_convertToGigagroup(InputChannel *channel_);
buf_t tl_channels_viewSponsoredMessage(InputChannel *channel_, buf_t *random_id_);
buf_t tl_channels_getSponsoredMessages(InputChannel *channel_);
buf_t tl_channels_getSendAs(InputPeer *peer_);
buf_t tl_channels_deleteParticipantHistory(InputChannel *channel_, InputPeer *participant_);
buf_t tl_channels_toggleJoinToSend(InputChannel *channel_, Bool *enabled_);
buf_t tl_channels_toggleJoinRequest(InputChannel *channel_, Bool *enabled_);
buf_t tl_channels_reorderUsernames(InputChannel *channel_, const char * *order_, int order_len);
buf_t tl_channels_toggleUsername(InputChannel *channel_, const char * username_, Bool *active_);
buf_t tl_channels_deactivateAllUsernames(InputChannel *channel_);
buf_t tl_channels_toggleForum(InputChannel *channel_, Bool *enabled_);
buf_t tl_channels_createForumTopic(InputChannel *channel_, const char * title_, int icon_color_, long icon_emoji_id_, long random_id_, InputPeer *send_as_);
buf_t tl_channels_getForumTopics(InputChannel *channel_, const char * q_, int offset_date_, int offset_id_, int offset_topic_, int limit_);
buf_t tl_channels_getForumTopicsByID(InputChannel *channel_, int *topics_, int topics_len);
buf_t tl_channels_editForumTopic(InputChannel *channel_, int topic_id_, const char * title_, long icon_emoji_id_, Bool *closed_, Bool *hidden_);
buf_t tl_channels_updatePinnedForumTopic(InputChannel *channel_, int topic_id_, Bool *pinned_);
buf_t tl_channels_deleteTopicHistory(InputChannel *channel_, int top_msg_id_);
buf_t tl_channels_reorderPinnedForumTopics(bool force_, InputChannel *channel_, int *order_, int order_len);
buf_t tl_channels_toggleAntiSpam(InputChannel *channel_, Bool *enabled_);
buf_t tl_channels_reportAntiSpamFalsePositive(InputChannel *channel_, int msg_id_);
buf_t tl_channels_toggleParticipantsHidden(InputChannel *channel_, Bool *enabled_);
buf_t tl_channels_clickSponsoredMessage(bool media_, bool fullscreen_, InputChannel *channel_, buf_t *random_id_);
buf_t tl_channels_updateColor(bool for_profile_, InputChannel *channel_, int color_, long background_emoji_id_);
buf_t tl_channels_toggleViewForumAsMessages(InputChannel *channel_, Bool *enabled_);
buf_t tl_channels_getChannelRecommendations(InputChannel *channel_);
buf_t tl_channels_updateEmojiStatus(InputChannel *channel_, EmojiStatus *emoji_status_);
buf_t tl_channels_setBoostsToUnblockRestrictions(InputChannel *channel_, int boosts_);
buf_t tl_channels_setEmojiStickers(InputChannel *channel_, InputStickerSet *stickerset_);
buf_t tl_channels_reportSponsoredMessage(InputChannel *channel_, buf_t *random_id_, buf_t *option_);
buf_t tl_channels_restrictSponsoredMessages(InputChannel *channel_, Bool *restricted_);
buf_t tl_channels_searchPosts(const char * hashtag_, int offset_rate_, InputPeer *offset_peer_, int offset_id_, int limit_);
buf_t tl_bots_sendCustomRequest(const char * custom_method_, DataJSON *params_);
buf_t tl_bots_answerWebhookJSONQuery(long query_id_, DataJSON *data_);
buf_t tl_bots_setBotCommands(BotCommandScope *scope_, const char * lang_code_, BotCommand *commands_, int commands_len);
buf_t tl_bots_resetBotCommands(BotCommandScope *scope_, const char * lang_code_);
buf_t tl_bots_getBotCommands(BotCommandScope *scope_, const char * lang_code_);
buf_t tl_bots_setBotMenuButton(InputUser *user_id_, BotMenuButton *button_);
buf_t tl_bots_getBotMenuButton(InputUser *user_id_);
buf_t tl_bots_setBotBroadcastDefaultAdminRights(ChatAdminRights *admin_rights_);
buf_t tl_bots_setBotGroupDefaultAdminRights(ChatAdminRights *admin_rights_);
buf_t tl_bots_setBotInfo(InputUser *bot_, const char * lang_code_, const char * name_, const char * about_, const char * description_);
buf_t tl_bots_getBotInfo(InputUser *bot_, const char * lang_code_);
buf_t tl_bots_reorderUsernames(InputUser *bot_, const char * *order_, int order_len);
buf_t tl_bots_toggleUsername(InputUser *bot_, const char * username_, Bool *active_);
buf_t tl_bots_canSendMessage(InputUser *bot_);
buf_t tl_bots_allowSendMessage(InputUser *bot_);
buf_t tl_bots_invokeWebViewCustomMethod(InputUser *bot_, const char * custom_method_, DataJSON *params_);
buf_t tl_bots_getPopularAppBots(const char * offset_, int limit_);
buf_t tl_bots_addPreviewMedia(InputUser *bot_, const char * lang_code_, InputMedia *media_);
buf_t tl_bots_editPreviewMedia(InputUser *bot_, const char * lang_code_, InputMedia *media_, InputMedia *new_media_);
buf_t tl_bots_deletePreviewMedia(InputUser *bot_, const char * lang_code_, InputMedia *media_, int media_len);
buf_t tl_bots_reorderPreviewMedias(InputUser *bot_, const char * lang_code_, InputMedia *order_, int order_len);
buf_t tl_bots_getPreviewInfo(InputUser *bot_, const char * lang_code_);
buf_t tl_bots_getPreviewMedias(InputUser *bot_);
buf_t tl_payments_getPaymentForm(InputInvoice *invoice_, DataJSON *theme_params_);
buf_t tl_payments_getPaymentReceipt(InputPeer *peer_, int msg_id_);
buf_t tl_payments_validateRequestedInfo(bool save_, InputInvoice *invoice_, PaymentRequestedInfo *info_);
buf_t tl_payments_sendPaymentForm(long form_id_, InputInvoice *invoice_, const char * requested_info_id_, const char * shipping_option_id_, InputPaymentCredentials *credentials_, long tip_amount_);
buf_t tl_payments_getSavedInfo();
buf_t tl_payments_clearSavedInfo(bool credentials_, bool info_);
buf_t tl_payments_getBankCardData(const char * number_);
buf_t tl_payments_exportInvoice(InputMedia *invoice_media_);
buf_t tl_payments_assignAppStoreTransaction(buf_t *receipt_, InputStorePaymentPurpose *purpose_);
buf_t tl_payments_assignPlayMarketTransaction(DataJSON *receipt_, InputStorePaymentPurpose *purpose_);
buf_t tl_payments_canPurchasePremium(InputStorePaymentPurpose *purpose_);
buf_t tl_payments_getPremiumGiftCodeOptions(InputPeer *boost_peer_);
buf_t tl_payments_checkGiftCode(const char * slug_);
buf_t tl_payments_applyGiftCode(const char * slug_);
buf_t tl_payments_getGiveawayInfo(InputPeer *peer_, int msg_id_);
buf_t tl_payments_launchPrepaidGiveaway(InputPeer *peer_, long giveaway_id_, InputStorePaymentPurpose *purpose_);
buf_t tl_payments_getStarsTopupOptions();
buf_t tl_payments_getStarsStatus(InputPeer *peer_);
buf_t tl_payments_getStarsTransactions(bool inbound_, bool outbound_, bool ascending_, const char * subscription_id_, InputPeer *peer_, const char * offset_, int limit_);
buf_t tl_payments_sendStarsForm(long form_id_, InputInvoice *invoice_);
buf_t tl_payments_refundStarsCharge(InputUser *user_id_, const char * charge_id_);
buf_t tl_payments_getStarsRevenueStats(bool dark_, InputPeer *peer_);
buf_t tl_payments_getStarsRevenueWithdrawalUrl(InputPeer *peer_, long stars_, InputCheckPasswordSRP *password_);
buf_t tl_payments_getStarsRevenueAdsAccountUrl(InputPeer *peer_);
buf_t tl_payments_getStarsTransactionsByID(InputPeer *peer_, InputStarsTransaction *id_, int id_len);
buf_t tl_payments_getStarsGiftOptions(InputUser *user_id_);
buf_t tl_payments_getStarsSubscriptions(bool missing_balance_, InputPeer *peer_, const char * offset_);
buf_t tl_payments_changeStarsSubscription(InputPeer *peer_, const char * subscription_id_, Bool *canceled_);
buf_t tl_payments_fulfillStarsSubscription(InputPeer *peer_, const char * subscription_id_);
buf_t tl_payments_getStarsGiveawayOptions();
buf_t tl_payments_getStarGifts(int hash_);
buf_t tl_payments_getUserStarGifts(InputUser *user_id_, const char * offset_, int limit_);
buf_t tl_payments_saveStarGift(bool unsave_, InputUser *user_id_, int msg_id_);
buf_t tl_payments_convertStarGift(InputUser *user_id_, int msg_id_);
buf_t tl_stickers_createStickerSet(bool masks_, bool emojis_, bool text_color_, InputUser *user_id_, const char * title_, const char * short_name_, InputDocument *thumb_, InputStickerSetItem *stickers_, int stickers_len, const char * software_);
buf_t tl_stickers_removeStickerFromSet(InputDocument *sticker_);
buf_t tl_stickers_changeStickerPosition(InputDocument *sticker_, int position_);
buf_t tl_stickers_addStickerToSet(InputStickerSet *stickerset_, InputStickerSetItem *sticker_);
buf_t tl_stickers_setStickerSetThumb(InputStickerSet *stickerset_, InputDocument *thumb_, long thumb_document_id_);
buf_t tl_stickers_checkShortName(const char * short_name_);
buf_t tl_stickers_suggestShortName(const char * title_);
buf_t tl_stickers_changeSticker(InputDocument *sticker_, const char * emoji_, MaskCoords *mask_coords_, const char * keywords_);
buf_t tl_stickers_renameStickerSet(InputStickerSet *stickerset_, const char * title_);
buf_t tl_stickers_deleteStickerSet(InputStickerSet *stickerset_);
buf_t tl_stickers_replaceSticker(InputDocument *sticker_, InputStickerSetItem *new_sticker_);
buf_t tl_phone_getCallConfig();
buf_t tl_phone_requestCall(bool video_, InputUser *user_id_, int random_id_, buf_t *g_a_hash_, PhoneCallProtocol *protocol_);
buf_t tl_phone_acceptCall(InputPhoneCall *peer_, buf_t *g_b_, PhoneCallProtocol *protocol_);
buf_t tl_phone_confirmCall(InputPhoneCall *peer_, buf_t *g_a_, long key_fingerprint_, PhoneCallProtocol *protocol_);
buf_t tl_phone_receivedCall(InputPhoneCall *peer_);
buf_t tl_phone_discardCall(bool video_, InputPhoneCall *peer_, int duration_, PhoneCallDiscardReason *reason_, long connection_id_);
buf_t tl_phone_setCallRating(bool user_initiative_, InputPhoneCall *peer_, int rating_, const char * comment_);
buf_t tl_phone_saveCallDebug(InputPhoneCall *peer_, DataJSON *debug_);
buf_t tl_phone_sendSignalingData(InputPhoneCall *peer_, buf_t *data_);
buf_t tl_phone_createGroupCall(bool rtmp_stream_, InputPeer *peer_, int random_id_, const char * title_, int schedule_date_);
buf_t tl_phone_joinGroupCall(bool muted_, bool video_stopped_, InputGroupCall *call_, InputPeer *join_as_, const char * invite_hash_, DataJSON *params_);
buf_t tl_phone_leaveGroupCall(InputGroupCall *call_, int source_);
buf_t tl_phone_inviteToGroupCall(InputGroupCall *call_, InputUser *users_, int users_len);
buf_t tl_phone_discardGroupCall(InputGroupCall *call_);
buf_t tl_phone_toggleGroupCallSettings(bool reset_invite_hash_, InputGroupCall *call_, Bool *join_muted_);
buf_t tl_phone_getGroupCall(InputGroupCall *call_, int limit_);
buf_t tl_phone_getGroupParticipants(InputGroupCall *call_, InputPeer *ids_, int ids_len, int *sources_, int sources_len, const char * offset_, int limit_);
buf_t tl_phone_checkGroupCall(InputGroupCall *call_, int *sources_, int sources_len);
buf_t tl_phone_toggleGroupCallRecord(bool start_, bool video_, InputGroupCall *call_, const char * title_, Bool *video_portrait_);
buf_t tl_phone_editGroupCallParticipant(InputGroupCall *call_, InputPeer *participant_, Bool *muted_, int volume_, Bool *raise_hand_, Bool *video_stopped_, Bool *video_paused_, Bool *presentation_paused_);
buf_t tl_phone_editGroupCallTitle(InputGroupCall *call_, const char * title_);
buf_t tl_phone_getGroupCallJoinAs(InputPeer *peer_);
buf_t tl_phone_exportGroupCallInvite(bool can_self_unmute_, InputGroupCall *call_);
buf_t tl_phone_toggleGroupCallStartSubscription(InputGroupCall *call_, Bool *subscribed_);
buf_t tl_phone_startScheduledGroupCall(InputGroupCall *call_);
buf_t tl_phone_saveDefaultGroupCallJoinAs(InputPeer *peer_, InputPeer *join_as_);
buf_t tl_phone_joinGroupCallPresentation(InputGroupCall *call_, DataJSON *params_);
buf_t tl_phone_leaveGroupCallPresentation(InputGroupCall *call_);
buf_t tl_phone_getGroupCallStreamChannels(InputGroupCall *call_);
buf_t tl_phone_getGroupCallStreamRtmpUrl(InputPeer *peer_, Bool *revoke_);
buf_t tl_phone_saveCallLog(InputPhoneCall *peer_, InputFile *file_);
buf_t tl_langpack_getLangPack(const char * lang_pack_, const char * lang_code_);
buf_t tl_langpack_getStrings(const char * lang_pack_, const char * lang_code_, const char * *keys_, int keys_len);
buf_t tl_langpack_getDifference(const char * lang_pack_, const char * lang_code_, int from_version_);
buf_t tl_langpack_getLanguages(const char * lang_pack_);
buf_t tl_langpack_getLanguage(const char * lang_pack_, const char * lang_code_);
buf_t tl_folders_editPeerFolders(InputFolderPeer *folder_peers_, int folder_peers_len);
buf_t tl_stats_getBroadcastStats(bool dark_, InputChannel *channel_);
buf_t tl_stats_loadAsyncGraph(const char * token_, long x_);
buf_t tl_stats_getMegagroupStats(bool dark_, InputChannel *channel_);
buf_t tl_stats_getMessagePublicForwards(InputChannel *channel_, int msg_id_, const char * offset_, int limit_);
buf_t tl_stats_getMessageStats(bool dark_, InputChannel *channel_, int msg_id_);
buf_t tl_stats_getStoryStats(bool dark_, InputPeer *peer_, int id_);
buf_t tl_stats_getStoryPublicForwards(InputPeer *peer_, int id_, const char * offset_, int limit_);
buf_t tl_stats_getBroadcastRevenueStats(bool dark_, InputChannel *channel_);
buf_t tl_stats_getBroadcastRevenueWithdrawalUrl(InputChannel *channel_, InputCheckPasswordSRP *password_);
buf_t tl_stats_getBroadcastRevenueTransactions(InputChannel *channel_, int offset_, int limit_);
buf_t tl_chatlists_exportChatlistInvite(InputChatlist *chatlist_, const char * title_, InputPeer *peers_, int peers_len);
buf_t tl_chatlists_deleteExportedInvite(InputChatlist *chatlist_, const char * slug_);
buf_t tl_chatlists_editExportedInvite(InputChatlist *chatlist_, const char * slug_, const char * title_, InputPeer *peers_, int peers_len);
buf_t tl_chatlists_getExportedInvites(InputChatlist *chatlist_);
buf_t tl_chatlists_checkChatlistInvite(const char * slug_);
buf_t tl_chatlists_joinChatlistInvite(const char * slug_, InputPeer *peers_, int peers_len);
buf_t tl_chatlists_getChatlistUpdates(InputChatlist *chatlist_);
buf_t tl_chatlists_joinChatlistUpdates(InputChatlist *chatlist_, InputPeer *peers_, int peers_len);
buf_t tl_chatlists_hideChatlistUpdates(InputChatlist *chatlist_);
buf_t tl_chatlists_getLeaveChatlistSuggestions(InputChatlist *chatlist_);
buf_t tl_chatlists_leaveChatlist(InputChatlist *chatlist_, InputPeer *peers_, int peers_len);
buf_t tl_stories_canSendStory(InputPeer *peer_);
buf_t tl_stories_sendStory(bool pinned_, bool noforwards_, bool fwd_modified_, InputPeer *peer_, InputMedia *media_, MediaArea *media_areas_, int media_areas_len, const char * caption_, MessageEntity *entities_, int entities_len, InputPrivacyRule *privacy_rules_, int privacy_rules_len, long random_id_, int period_, InputPeer *fwd_from_id_, int fwd_from_story_);
buf_t tl_stories_editStory(InputPeer *peer_, int id_, InputMedia *media_, MediaArea *media_areas_, int media_areas_len, const char * caption_, MessageEntity *entities_, int entities_len, InputPrivacyRule *privacy_rules_, int privacy_rules_len);
buf_t tl_stories_deleteStories(InputPeer *peer_, int *id_, int id_len);
buf_t tl_stories_togglePinned(InputPeer *peer_, int *id_, int id_len, Bool *pinned_);
buf_t tl_stories_getAllStories(bool next_, bool hidden_, const char * state_);
buf_t tl_stories_getPinnedStories(InputPeer *peer_, int offset_id_, int limit_);
buf_t tl_stories_getStoriesArchive(InputPeer *peer_, int offset_id_, int limit_);
buf_t tl_stories_getStoriesByID(InputPeer *peer_, int *id_, int id_len);
buf_t tl_stories_toggleAllStoriesHidden(Bool *hidden_);
buf_t tl_stories_readStories(InputPeer *peer_, int max_id_);
buf_t tl_stories_incrementStoryViews(InputPeer *peer_, int *id_, int id_len);
buf_t tl_stories_getStoryViewsList(bool just_contacts_, bool reactions_first_, bool forwards_first_, InputPeer *peer_, const char * q_, int id_, const char * offset_, int limit_);
buf_t tl_stories_getStoriesViews(InputPeer *peer_, int *id_, int id_len);
buf_t tl_stories_exportStoryLink(InputPeer *peer_, int id_);
buf_t tl_stories_report(InputPeer *peer_, int *id_, int id_len, buf_t *option_, const char * message_);
buf_t tl_stories_activateStealthMode(bool past_, bool future_);
buf_t tl_stories_sendReaction(bool add_to_recent_, InputPeer *peer_, int story_id_, Reaction *reaction_);
buf_t tl_stories_getPeerStories(InputPeer *peer_);
buf_t tl_stories_getAllReadPeerStories();
buf_t tl_stories_getPeerMaxIDs(InputPeer *id_, int id_len);
buf_t tl_stories_getChatsToSend();
buf_t tl_stories_togglePeerStoriesHidden(InputPeer *peer_, Bool *hidden_);
buf_t tl_stories_getStoryReactionsList(bool forwards_first_, InputPeer *peer_, int id_, Reaction *reaction_, const char * offset_, int limit_);
buf_t tl_stories_togglePinnedToTop(InputPeer *peer_, int *id_, int id_len);
buf_t tl_stories_searchPosts(const char * hashtag_, MediaArea *area_, const char * offset_, int limit_);
buf_t tl_premium_getBoostsList(bool gifts_, InputPeer *peer_, const char * offset_, int limit_);
buf_t tl_premium_getMyBoosts();
buf_t tl_premium_applyBoost(int *slots_, int slots_len, InputPeer *peer_);
buf_t tl_premium_getBoostsStatus(InputPeer *peer_);
buf_t tl_premium_getUserBoosts(InputPeer *peer_, InputUser *user_id_);
buf_t tl_smsjobs_isEligibleToJoin();
buf_t tl_smsjobs_join();
buf_t tl_smsjobs_leave();
buf_t tl_smsjobs_updateSettings(bool allow_international_);
buf_t tl_smsjobs_getStatus();
buf_t tl_smsjobs_getSmsJob(const char * job_id_);
buf_t tl_smsjobs_finishJob(const char * job_id_, const char * error_);
buf_t tl_fragment_getCollectibleInfo(InputCollectible *collectible_);
